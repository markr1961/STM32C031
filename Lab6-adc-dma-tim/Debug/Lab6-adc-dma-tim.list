
Lab6-adc-dma-tim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080030b0  080030b0  000130b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f0  080030f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080030f0  080030f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030f0  080030f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030f0  080030f0  000130f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030f4  080030f4  000130f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  08003104  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003104  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be06  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e4e  00000000  00000000  0002be3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  0002dc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  0002e970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013dfe  00000000  00000000  0002f570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d872  00000000  00000000  0004336e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000804b0  00000000  00000000  00050be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1090  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e9c  00000000  00000000  000d10e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003098 	.word	0x08003098

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003098 	.word	0x08003098

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa89 	bl	800073a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f81e 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f944 	bl	80004b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f924 	bl	800047c <MX_DMA_Init>
  MX_TIM3_Init();
 8000234:	f000 f8ca 	bl	80003cc <MX_TIM3_Init>
  MX_ADC1_Init();
 8000238:	f000 f85a 	bl	80002f0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <main+0x3c>)
 800023e:	0018      	movs	r0, r3
 8000240:	f001 fa76 	bl	8001730 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buffer, 8);
 8000244:	4906      	ldr	r1, [pc, #24]	; (8000260 <main+0x40>)
 8000246:	4b05      	ldr	r3, [pc, #20]	; (800025c <main+0x3c>)
 8000248:	2208      	movs	r2, #8
 800024a:	0018      	movs	r0, r3
 800024c:	f000 fe10 	bl	8000e70 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <main+0x44>)
 8000252:	0018      	movs	r0, r3
 8000254:	f002 fc6e 	bl	8002b34 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000258:	e7fe      	b.n	8000258 <main+0x38>
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	20000028 	.word	0x20000028
 8000260:	20000134 	.word	0x20000134
 8000264:	200000e8 	.word	0x200000e8

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b590      	push	{r4, r7, lr}
 800026a:	b08d      	sub	sp, #52	; 0x34
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	2414      	movs	r4, #20
 8000270:	193b      	adds	r3, r7, r4
 8000272:	0018      	movs	r0, r3
 8000274:	231c      	movs	r3, #28
 8000276:	001a      	movs	r2, r3
 8000278:	2100      	movs	r1, #0
 800027a:	f002 ff05 	bl	8003088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027e:	003b      	movs	r3, r7
 8000280:	0018      	movs	r0, r3
 8000282:	2314      	movs	r3, #20
 8000284:	001a      	movs	r2, r3
 8000286:	2100      	movs	r1, #0
 8000288:	f002 fefe 	bl	8003088 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028c:	193b      	adds	r3, r7, r4
 800028e:	2202      	movs	r2, #2
 8000290:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000292:	193b      	adds	r3, r7, r4
 8000294:	2280      	movs	r2, #128	; 0x80
 8000296:	0052      	lsls	r2, r2, #1
 8000298:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800029a:	193b      	adds	r3, r7, r4
 800029c:	2280      	movs	r2, #128	; 0x80
 800029e:	0152      	lsls	r2, r2, #5
 80002a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a2:	193b      	adds	r3, r7, r4
 80002a4:	2240      	movs	r2, #64	; 0x40
 80002a6:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	0018      	movs	r0, r3
 80002ac:	f001 ffb6 	bl	800221c <HAL_RCC_OscConfig>
 80002b0:	1e03      	subs	r3, r0, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002b4:	f000 f916 	bl	80004e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b8:	003b      	movs	r3, r7
 80002ba:	2207      	movs	r2, #7
 80002bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002be:	003b      	movs	r3, r7
 80002c0:	2200      	movs	r2, #0
 80002c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002c4:	003b      	movs	r3, r7
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002ca:	003b      	movs	r3, r7
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80002d0:	003b      	movs	r3, r7
 80002d2:	2200      	movs	r2, #0
 80002d4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d6:	003b      	movs	r3, r7
 80002d8:	2100      	movs	r1, #0
 80002da:	0018      	movs	r0, r3
 80002dc:	f002 f998 	bl	8002610 <HAL_RCC_ClockConfig>
 80002e0:	1e03      	subs	r3, r0, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002e4:	f000 f8fe 	bl	80004e4 <Error_Handler>
  }
}
 80002e8:	46c0      	nop			; (mov r8, r8)
 80002ea:	46bd      	mov	sp, r7
 80002ec:	b00d      	add	sp, #52	; 0x34
 80002ee:	bd90      	pop	{r4, r7, pc}

080002f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	0018      	movs	r0, r3
 80002fa:	230c      	movs	r3, #12
 80002fc:	001a      	movs	r2, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	f002 fec2 	bl	8003088 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000304:	4b2e      	ldr	r3, [pc, #184]	; (80003c0 <MX_ADC1_Init+0xd0>)
 8000306:	4a2f      	ldr	r2, [pc, #188]	; (80003c4 <MX_ADC1_Init+0xd4>)
 8000308:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800030a:	4b2d      	ldr	r3, [pc, #180]	; (80003c0 <MX_ADC1_Init+0xd0>)
 800030c:	22c0      	movs	r2, #192	; 0xc0
 800030e:	0612      	lsls	r2, r2, #24
 8000310:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000312:	4b2b      	ldr	r3, [pc, #172]	; (80003c0 <MX_ADC1_Init+0xd0>)
 8000314:	2210      	movs	r2, #16
 8000316:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000318:	4b29      	ldr	r3, [pc, #164]	; (80003c0 <MX_ADC1_Init+0xd0>)
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800031e:	4b28      	ldr	r3, [pc, #160]	; (80003c0 <MX_ADC1_Init+0xd0>)
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000324:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <MX_ADC1_Init+0xd0>)
 8000326:	2204      	movs	r2, #4
 8000328:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800032a:	4b25      	ldr	r3, [pc, #148]	; (80003c0 <MX_ADC1_Init+0xd0>)
 800032c:	2200      	movs	r2, #0
 800032e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000330:	4b23      	ldr	r3, [pc, #140]	; (80003c0 <MX_ADC1_Init+0xd0>)
 8000332:	2200      	movs	r2, #0
 8000334:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000336:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <MX_ADC1_Init+0xd0>)
 8000338:	2200      	movs	r2, #0
 800033a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800033c:	4b20      	ldr	r3, [pc, #128]	; (80003c0 <MX_ADC1_Init+0xd0>)
 800033e:	2201      	movs	r2, #1
 8000340:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000342:	4b1f      	ldr	r3, [pc, #124]	; (80003c0 <MX_ADC1_Init+0xd0>)
 8000344:	2220      	movs	r2, #32
 8000346:	2100      	movs	r1, #0
 8000348:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800034a:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <MX_ADC1_Init+0xd0>)
 800034c:	2298      	movs	r2, #152	; 0x98
 800034e:	00d2      	lsls	r2, r2, #3
 8000350:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000352:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <MX_ADC1_Init+0xd0>)
 8000354:	2280      	movs	r2, #128	; 0x80
 8000356:	00d2      	lsls	r2, r2, #3
 8000358:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <MX_ADC1_Init+0xd0>)
 800035c:	222c      	movs	r2, #44	; 0x2c
 800035e:	2101      	movs	r1, #1
 8000360:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000362:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <MX_ADC1_Init+0xd0>)
 8000364:	2200      	movs	r2, #0
 8000366:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 8000368:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <MX_ADC1_Init+0xd0>)
 800036a:	2203      	movs	r2, #3
 800036c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800036e:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <MX_ADC1_Init+0xd0>)
 8000370:	2200      	movs	r2, #0
 8000372:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <MX_ADC1_Init+0xd0>)
 8000376:	223c      	movs	r2, #60	; 0x3c
 8000378:	2100      	movs	r1, #0
 800037a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <MX_ADC1_Init+0xd0>)
 800037e:	2200      	movs	r2, #0
 8000380:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000382:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <MX_ADC1_Init+0xd0>)
 8000384:	0018      	movs	r0, r3
 8000386:	f000 fbab 	bl	8000ae0 <HAL_ADC_Init>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d001      	beq.n	8000392 <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 800038e:	f000 f8a9 	bl	80004e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <MX_ADC1_Init+0xd8>)
 8000396:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a4:	1d3a      	adds	r2, r7, #4
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_ADC1_Init+0xd0>)
 80003a8:	0011      	movs	r1, r2
 80003aa:	0018      	movs	r0, r3
 80003ac:	f000 fe06 	bl	8000fbc <HAL_ADC_ConfigChannel>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80003b4:	f000 f896 	bl	80004e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b004      	add	sp, #16
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000028 	.word	0x20000028
 80003c4:	40012400 	.word	0x40012400
 80003c8:	30001000 	.word	0x30001000

080003cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d2:	2310      	movs	r3, #16
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	0018      	movs	r0, r3
 80003d8:	2310      	movs	r3, #16
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f002 fe53 	bl	8003088 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	0018      	movs	r0, r3
 80003e6:	230c      	movs	r3, #12
 80003e8:	001a      	movs	r2, r3
 80003ea:	2100      	movs	r1, #0
 80003ec:	f002 fe4c 	bl	8003088 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003f0:	4b1e      	ldr	r3, [pc, #120]	; (800046c <MX_TIM3_Init+0xa0>)
 80003f2:	4a1f      	ldr	r2, [pc, #124]	; (8000470 <MX_TIM3_Init+0xa4>)
 80003f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11999;
 80003f6:	4b1d      	ldr	r3, [pc, #116]	; (800046c <MX_TIM3_Init+0xa0>)
 80003f8:	4a1e      	ldr	r2, [pc, #120]	; (8000474 <MX_TIM3_Init+0xa8>)
 80003fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <MX_TIM3_Init+0xa0>)
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000402:	4b1a      	ldr	r3, [pc, #104]	; (800046c <MX_TIM3_Init+0xa0>)
 8000404:	4a1c      	ldr	r2, [pc, #112]	; (8000478 <MX_TIM3_Init+0xac>)
 8000406:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <MX_TIM3_Init+0xa0>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800040e:	4b17      	ldr	r3, [pc, #92]	; (800046c <MX_TIM3_Init+0xa0>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000414:	4b15      	ldr	r3, [pc, #84]	; (800046c <MX_TIM3_Init+0xa0>)
 8000416:	0018      	movs	r0, r3
 8000418:	f002 fb34 	bl	8002a84 <HAL_TIM_Base_Init>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000420:	f000 f860 	bl	80004e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000424:	2110      	movs	r1, #16
 8000426:	187b      	adds	r3, r7, r1
 8000428:	2280      	movs	r2, #128	; 0x80
 800042a:	0152      	lsls	r2, r2, #5
 800042c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800042e:	187a      	adds	r2, r7, r1
 8000430:	4b0e      	ldr	r3, [pc, #56]	; (800046c <MX_TIM3_Init+0xa0>)
 8000432:	0011      	movs	r1, r2
 8000434:	0018      	movs	r0, r3
 8000436:	f002 fbc3 	bl	8002bc0 <HAL_TIM_ConfigClockSource>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800043e:	f000 f851 	bl	80004e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2220      	movs	r2, #32
 8000446:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2280      	movs	r2, #128	; 0x80
 800044c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800044e:	1d3a      	adds	r2, r7, #4
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_TIM3_Init+0xa0>)
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f002 fd91 	bl	8002f7c <HAL_TIMEx_MasterConfigSynchronization>
 800045a:	1e03      	subs	r3, r0, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800045e:	f000 f841 	bl	80004e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	b008      	add	sp, #32
 8000468:	bd80      	pop	{r7, pc}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	200000e8 	.word	0x200000e8
 8000470:	40000400 	.word	0x40000400
 8000474:	00002edf 	.word	0x00002edf
 8000478:	000003e7 	.word	0x000003e7

0800047c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_DMA_Init+0x38>)
 8000484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <MX_DMA_Init+0x38>)
 8000488:	2101      	movs	r1, #1
 800048a:	430a      	orrs	r2, r1
 800048c:	639a      	str	r2, [r3, #56]	; 0x38
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_DMA_Init+0x38>)
 8000490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000492:	2201      	movs	r2, #1
 8000494:	4013      	ands	r3, r2
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2100      	movs	r1, #0
 800049e:	2009      	movs	r0, #9
 80004a0:	f001 fac4 	bl	8001a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004a4:	2009      	movs	r0, #9
 80004a6:	f001 fad6 	bl	8001a56 <HAL_NVIC_EnableIRQ>

}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b002      	add	sp, #8
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	40021000 	.word	0x40021000

080004b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <MX_GPIO_Init+0x28>)
 80004c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004c2:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <MX_GPIO_Init+0x28>)
 80004c4:	2101      	movs	r1, #1
 80004c6:	430a      	orrs	r2, r1
 80004c8:	635a      	str	r2, [r3, #52]	; 0x34
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <MX_GPIO_Init+0x28>)
 80004cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ce:	2201      	movs	r2, #1
 80004d0:	4013      	ands	r3, r2
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b002      	add	sp, #8
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	40021000 	.word	0x40021000

080004e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e8:	b672      	cpsid	i
}
 80004ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ec:	e7fe      	b.n	80004ec <Error_Handler+0x8>
	...

080004f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <HAL_MspInit+0x44>)
 80004f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <HAL_MspInit+0x44>)
 80004fc:	2101      	movs	r1, #1
 80004fe:	430a      	orrs	r2, r1
 8000500:	641a      	str	r2, [r3, #64]	; 0x40
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <HAL_MspInit+0x44>)
 8000504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000506:	2201      	movs	r2, #1
 8000508:	4013      	ands	r3, r2
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <HAL_MspInit+0x44>)
 8000510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <HAL_MspInit+0x44>)
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	0549      	lsls	r1, r1, #21
 8000518:	430a      	orrs	r2, r1
 800051a:	63da      	str	r2, [r3, #60]	; 0x3c
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <HAL_MspInit+0x44>)
 800051e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	055b      	lsls	r3, r3, #21
 8000524:	4013      	ands	r3, r2
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b002      	add	sp, #8
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	40021000 	.word	0x40021000

08000538 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b091      	sub	sp, #68	; 0x44
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000540:	232c      	movs	r3, #44	; 0x2c
 8000542:	18fb      	adds	r3, r7, r3
 8000544:	0018      	movs	r0, r3
 8000546:	2314      	movs	r3, #20
 8000548:	001a      	movs	r2, r3
 800054a:	2100      	movs	r1, #0
 800054c:	f002 fd9c 	bl	8003088 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000550:	2410      	movs	r4, #16
 8000552:	193b      	adds	r3, r7, r4
 8000554:	0018      	movs	r0, r3
 8000556:	231c      	movs	r3, #28
 8000558:	001a      	movs	r2, r3
 800055a:	2100      	movs	r1, #0
 800055c:	f002 fd94 	bl	8003088 <memset>
  if(hadc->Instance==ADC1)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a35      	ldr	r2, [pc, #212]	; (800063c <HAL_ADC_MspInit+0x104>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d163      	bne.n	8000632 <HAL_ADC_MspInit+0xfa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800056a:	193b      	adds	r3, r7, r4
 800056c:	2280      	movs	r2, #128	; 0x80
 800056e:	01d2      	lsls	r2, r2, #7
 8000570:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2200      	movs	r2, #0
 8000576:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000578:	193b      	adds	r3, r7, r4
 800057a:	0018      	movs	r0, r3
 800057c:	f002 f994 	bl	80028a8 <HAL_RCCEx_PeriphCLKConfig>
 8000580:	1e03      	subs	r3, r0, #0
 8000582:	d001      	beq.n	8000588 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000584:	f7ff ffae 	bl	80004e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000588:	4b2d      	ldr	r3, [pc, #180]	; (8000640 <HAL_ADC_MspInit+0x108>)
 800058a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800058c:	4b2c      	ldr	r3, [pc, #176]	; (8000640 <HAL_ADC_MspInit+0x108>)
 800058e:	2180      	movs	r1, #128	; 0x80
 8000590:	0349      	lsls	r1, r1, #13
 8000592:	430a      	orrs	r2, r1
 8000594:	641a      	str	r2, [r3, #64]	; 0x40
 8000596:	4b2a      	ldr	r3, [pc, #168]	; (8000640 <HAL_ADC_MspInit+0x108>)
 8000598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800059a:	2380      	movs	r3, #128	; 0x80
 800059c:	035b      	lsls	r3, r3, #13
 800059e:	4013      	ands	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a4:	4b26      	ldr	r3, [pc, #152]	; (8000640 <HAL_ADC_MspInit+0x108>)
 80005a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005a8:	4b25      	ldr	r3, [pc, #148]	; (8000640 <HAL_ADC_MspInit+0x108>)
 80005aa:	2101      	movs	r1, #1
 80005ac:	430a      	orrs	r2, r1
 80005ae:	635a      	str	r2, [r3, #52]	; 0x34
 80005b0:	4b23      	ldr	r3, [pc, #140]	; (8000640 <HAL_ADC_MspInit+0x108>)
 80005b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b4:	2201      	movs	r2, #1
 80005b6:	4013      	ands	r3, r2
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA12 [PA10]     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005bc:	212c      	movs	r1, #44	; 0x2c
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2280      	movs	r2, #128	; 0x80
 80005c2:	0152      	lsls	r2, r2, #5
 80005c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2203      	movs	r2, #3
 80005ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	187a      	adds	r2, r7, r1
 80005d4:	23a0      	movs	r3, #160	; 0xa0
 80005d6:	05db      	lsls	r3, r3, #23
 80005d8:	0011      	movs	r1, r2
 80005da:	0018      	movs	r0, r3
 80005dc:	f001 fcac 	bl	8001f38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <HAL_ADC_MspInit+0x10c>)
 80005e2:	4a19      	ldr	r2, [pc, #100]	; (8000648 <HAL_ADC_MspInit+0x110>)
 80005e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <HAL_ADC_MspInit+0x10c>)
 80005e8:	2205      	movs	r2, #5
 80005ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <HAL_ADC_MspInit+0x10c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <HAL_ADC_MspInit+0x10c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_ADC_MspInit+0x10c>)
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_ADC_MspInit+0x10c>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <HAL_ADC_MspInit+0x10c>)
 8000606:	2200      	movs	r2, #0
 8000608:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <HAL_ADC_MspInit+0x10c>)
 800060c:	2220      	movs	r2, #32
 800060e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <HAL_ADC_MspInit+0x10c>)
 8000612:	2200      	movs	r2, #0
 8000614:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <HAL_ADC_MspInit+0x10c>)
 8000618:	0018      	movs	r0, r3
 800061a:	f001 fa39 	bl	8001a90 <HAL_DMA_Init>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8000622:	f7ff ff5f 	bl	80004e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <HAL_ADC_MspInit+0x10c>)
 800062a:	651a      	str	r2, [r3, #80]	; 0x50
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <HAL_ADC_MspInit+0x10c>)
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b011      	add	sp, #68	; 0x44
 8000638:	bd90      	pop	{r4, r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	40012400 	.word	0x40012400
 8000640:	40021000 	.word	0x40021000
 8000644:	2000008c 	.word	0x2000008c
 8000648:	40020008 	.word	0x40020008

0800064c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a09      	ldr	r2, [pc, #36]	; (8000680 <HAL_TIM_Base_MspInit+0x34>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d10b      	bne.n	8000676 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_TIM_Base_MspInit+0x38>)
 8000660:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <HAL_TIM_Base_MspInit+0x38>)
 8000664:	2102      	movs	r1, #2
 8000666:	430a      	orrs	r2, r1
 8000668:	63da      	str	r2, [r3, #60]	; 0x3c
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_TIM_Base_MspInit+0x38>)
 800066c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800066e:	2202      	movs	r2, #2
 8000670:	4013      	ands	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b004      	add	sp, #16
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	40000400 	.word	0x40000400
 8000684:	40021000 	.word	0x40021000

08000688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800068c:	e7fe      	b.n	800068c <NMI_Handler+0x4>

0800068e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <HardFault_Handler+0x4>

08000694 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ac:	f000 f8a6 	bl	80007fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <DMA1_Channel1_IRQHandler+0x14>)
 80006be:	0018      	movs	r0, r3
 80006c0:	f001 faf8 	bl	8001cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	2000008c 	.word	0x2000008c

080006d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <SystemInit+0x14>)
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	0512      	lsls	r2, r2, #20
 80006da:	609a      	str	r2, [r3, #8]
#endif
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006ee:	e003      	b.n	80006f8 <LoopCopyDataInit>

080006f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80006f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006f6:	3104      	adds	r1, #4

080006f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <LoopForever+0xa>)
  ldr r3, =_edata
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <LoopForever+0xe>)
  adds r2, r0, r1
 80006fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000700:	d3f6      	bcc.n	80006f0 <CopyDataInit>
  ldr r2, =_sbss
 8000702:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <LoopForever+0x12>)
  b LoopFillZerobss
 8000704:	e002      	b.n	800070c <LoopFillZerobss>

08000706 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  str  r3, [r2]
 8000708:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800070a:	3204      	adds	r2, #4

0800070c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <LoopForever+0x16>)
  cmp r2, r3
 800070e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000710:	d3f9      	bcc.n	8000706 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000712:	f7ff ffdd 	bl	80006d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000716:	f002 fc93 	bl	8003040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071a:	f7ff fd81 	bl	8000220 <main>

0800071e <LoopForever>:

LoopForever:
    b LoopForever
 800071e:	e7fe      	b.n	800071e <LoopForever>
  ldr   r0, =_estack
 8000720:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000724:	080030f8 	.word	0x080030f8
  ldr r0, =_sdata
 8000728:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800072c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000730:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000734:	20000140 	.word	0x20000140

08000738 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000738:	e7fe      	b.n	8000738 <ADC1_IRQHandler>

0800073a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b082      	sub	sp, #8
 800073e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000740:	1dfb      	adds	r3, r7, #7
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000746:	2003      	movs	r0, #3
 8000748:	f000 f80e 	bl	8000768 <HAL_InitTick>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d003      	beq.n	8000758 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000750:	1dfb      	adds	r3, r7, #7
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]
 8000756:	e001      	b.n	800075c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000758:	f7ff feca 	bl	80004f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800075c:	1dfb      	adds	r3, r7, #7
 800075e:	781b      	ldrb	r3, [r3, #0]
}
 8000760:	0018      	movs	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	b002      	add	sp, #8
 8000766:	bd80      	pop	{r7, pc}

08000768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000770:	230f      	movs	r3, #15
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000778:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <HAL_InitTick+0x88>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d02b      	beq.n	80007d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000780:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <HAL_InitTick+0x8c>)
 8000782:	681c      	ldr	r4, [r3, #0]
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <HAL_InitTick+0x88>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	0019      	movs	r1, r3
 800078a:	23fa      	movs	r3, #250	; 0xfa
 800078c:	0098      	lsls	r0, r3, #2
 800078e:	f7ff fcbb 	bl	8000108 <__udivsi3>
 8000792:	0003      	movs	r3, r0
 8000794:	0019      	movs	r1, r3
 8000796:	0020      	movs	r0, r4
 8000798:	f7ff fcb6 	bl	8000108 <__udivsi3>
 800079c:	0003      	movs	r3, r0
 800079e:	0018      	movs	r0, r3
 80007a0:	f001 f969 	bl	8001a76 <HAL_SYSTICK_Config>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d112      	bne.n	80007ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d80a      	bhi.n	80007c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	2301      	movs	r3, #1
 80007b2:	425b      	negs	r3, r3
 80007b4:	2200      	movs	r2, #0
 80007b6:	0018      	movs	r0, r3
 80007b8:	f001 f938 	bl	8001a2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <HAL_InitTick+0x90>)
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	e00d      	b.n	80007e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80007c4:	230f      	movs	r3, #15
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	e008      	b.n	80007e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007ce:	230f      	movs	r3, #15
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
 80007d6:	e003      	b.n	80007e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007d8:	230f      	movs	r3, #15
 80007da:	18fb      	adds	r3, r7, r3
 80007dc:	2201      	movs	r2, #1
 80007de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80007e0:	230f      	movs	r3, #15
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	781b      	ldrb	r3, [r3, #0]
}
 80007e6:	0018      	movs	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b005      	add	sp, #20
 80007ec:	bd90      	pop	{r4, r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	20000008 	.word	0x20000008
 80007f4:	20000000 	.word	0x20000000
 80007f8:	20000004 	.word	0x20000004

080007fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <HAL_IncTick+0x18>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b04      	ldr	r3, [pc, #16]	; (8000818 <HAL_IncTick+0x1c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	18d2      	adds	r2, r2, r3
 800080a:	4b02      	ldr	r3, [pc, #8]	; (8000814 <HAL_IncTick+0x18>)
 800080c:	601a      	str	r2, [r3, #0]
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000013c 	.word	0x2000013c
 8000818:	20000008 	.word	0x20000008

0800081c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;
 8000820:	4b02      	ldr	r3, [pc, #8]	; (800082c <HAL_GetTick+0x10>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	2000013c 	.word	0x2000013c

08000830 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000840:	401a      	ands	r2, r3
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	431a      	orrs	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	601a      	str	r2, [r3, #0]
}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b002      	add	sp, #8
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	ff3fffff 	.word	0xff3fffff

08000858 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	23c0      	movs	r3, #192	; 0xc0
 8000866:	041b      	lsls	r3, r3, #16
 8000868:	4013      	ands	r3, r2
}
 800086a:	0018      	movs	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	b002      	add	sp, #8
 8000870:	bd80      	pop	{r7, pc}

08000872 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b084      	sub	sp, #16
 8000876:	af00      	add	r7, sp, #0
 8000878:	60f8      	str	r0, [r7, #12]
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	2104      	movs	r1, #4
 8000886:	400a      	ands	r2, r1
 8000888:	2107      	movs	r1, #7
 800088a:	4091      	lsls	r1, r2
 800088c:	000a      	movs	r2, r1
 800088e:	43d2      	mvns	r2, r2
 8000890:	401a      	ands	r2, r3
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	2104      	movs	r1, #4
 8000896:	400b      	ands	r3, r1
 8000898:	6879      	ldr	r1, [r7, #4]
 800089a:	4099      	lsls	r1, r3
 800089c:	000b      	movs	r3, r1
 800089e:	431a      	orrs	r2, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	b004      	add	sp, #16
 80008aa:	bd80      	pop	{r7, pc}

080008ac <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	2104      	movs	r1, #4
 80008be:	400a      	ands	r2, r1
 80008c0:	2107      	movs	r1, #7
 80008c2:	4091      	lsls	r1, r2
 80008c4:	000a      	movs	r2, r1
 80008c6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	2104      	movs	r1, #4
 80008cc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80008ce:	40da      	lsrs	r2, r3
 80008d0:	0013      	movs	r3, r2
}
 80008d2:	0018      	movs	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b002      	add	sp, #8
 80008d8:	bd80      	pop	{r7, pc}

080008da <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	68da      	ldr	r2, [r3, #12]
 80008e6:	23c0      	movs	r3, #192	; 0xc0
 80008e8:	011b      	lsls	r3, r3, #4
 80008ea:	4013      	ands	r3, r2
 80008ec:	d101      	bne.n	80008f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80008ee:	2301      	movs	r3, #1
 80008f0:	e000      	b.n	80008f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	0018      	movs	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b002      	add	sp, #8
 80008fa:	bd80      	pop	{r7, pc}

080008fc <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090c:	68ba      	ldr	r2, [r7, #8]
 800090e:	211f      	movs	r1, #31
 8000910:	400a      	ands	r2, r1
 8000912:	210f      	movs	r1, #15
 8000914:	4091      	lsls	r1, r2
 8000916:	000a      	movs	r2, r1
 8000918:	43d2      	mvns	r2, r2
 800091a:	401a      	ands	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	0e9b      	lsrs	r3, r3, #26
 8000920:	210f      	movs	r1, #15
 8000922:	4019      	ands	r1, r3
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	201f      	movs	r0, #31
 8000928:	4003      	ands	r3, r0
 800092a:	4099      	lsls	r1, r3
 800092c:	000b      	movs	r3, r1
 800092e:	431a      	orrs	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b004      	add	sp, #16
 800093a:	bd80      	pop	{r7, pc}

0800093c <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	025b      	lsls	r3, r3, #9
 800094e:	0a5b      	lsrs	r3, r3, #9
 8000950:	431a      	orrs	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bd80      	pop	{r7, pc}

0800095e <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096c:	683a      	ldr	r2, [r7, #0]
 800096e:	0252      	lsls	r2, r2, #9
 8000970:	0a52      	lsrs	r2, r2, #9
 8000972:	43d2      	mvns	r2, r2
 8000974:	401a      	ands	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	629a      	str	r2, [r3, #40]	; 0x28
}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b002      	add	sp, #8
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	68ba      	ldr	r2, [r7, #8]
 8000996:	0212      	lsls	r2, r2, #8
 8000998:	43d2      	mvns	r2, r2
 800099a:	401a      	ands	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	021b      	lsls	r3, r3, #8
 80009a0:	6879      	ldr	r1, [r7, #4]
 80009a2:	400b      	ands	r3, r1
 80009a4:	4904      	ldr	r1, [pc, #16]	; (80009b8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80009a6:	400b      	ands	r3, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b004      	add	sp, #16
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	7fffff00 	.word	0x7fffff00

080009bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <LL_ADC_EnableInternalRegulator+0x24>)
 80009ca:	4013      	ands	r3, r2
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	0552      	lsls	r2, r2, #21
 80009d0:	431a      	orrs	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b002      	add	sp, #8
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	6fffffe8 	.word	0x6fffffe8

080009e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	689a      	ldr	r2, [r3, #8]
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	055b      	lsls	r3, r3, #21
 80009f4:	401a      	ands	r2, r3
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	055b      	lsls	r3, r3, #21
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d101      	bne.n	8000a02 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	0018      	movs	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b002      	add	sp, #8
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <LL_ADC_Enable+0x20>)
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b002      	add	sp, #8
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	7fffffe8 	.word	0x7fffffe8

08000a30 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <LL_ADC_Disable+0x20>)
 8000a3e:	4013      	ands	r3, r2
 8000a40:	2202      	movs	r2, #2
 8000a42:	431a      	orrs	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	7fffffe8 	.word	0x7fffffe8

08000a54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	2201      	movs	r2, #1
 8000a62:	4013      	ands	r3, r2
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d101      	bne.n	8000a6c <LL_ADC_IsEnabled+0x18>
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e000      	b.n	8000a6e <LL_ADC_IsEnabled+0x1a>
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	0018      	movs	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b002      	add	sp, #8
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	2202      	movs	r2, #2
 8000a84:	4013      	ands	r3, r2
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d101      	bne.n	8000a8e <LL_ADC_IsDisableOngoing+0x18>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e000      	b.n	8000a90 <LL_ADC_IsDisableOngoing+0x1a>
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <LL_ADC_REG_StartConversion+0x20>)
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	431a      	orrs	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b002      	add	sp, #8
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	7fffffe8 	.word	0x7fffffe8

08000abc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	2204      	movs	r2, #4
 8000aca:	4013      	ands	r3, r2
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	d101      	bne.n	8000ad4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e000      	b.n	8000ad6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b002      	add	sp, #8
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae8:	231f      	movs	r3, #31
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d101      	bne.n	8000b06 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e1a0      	b.n	8000e48 <HAL_ADC_Init+0x368>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d10a      	bne.n	8000b24 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	0018      	movs	r0, r3
 8000b12:	f7ff fd11 	bl	8000538 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2254      	movs	r2, #84	; 0x54
 8000b20:	2100      	movs	r1, #0
 8000b22:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f7ff ff5b 	bl	80009e4 <LL_ADC_IsInternalRegulatorEnabled>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d114      	bne.n	8000b5c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	0018      	movs	r0, r3
 8000b38:	f7ff ff40 	bl	80009bc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000b3c:	4bc4      	ldr	r3, [pc, #784]	; (8000e50 <HAL_ADC_Init+0x370>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	49c4      	ldr	r1, [pc, #784]	; (8000e54 <HAL_ADC_Init+0x374>)
 8000b42:	0018      	movs	r0, r3
 8000b44:	f7ff fae0 	bl	8000108 <__udivsi3>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b4e:	e002      	b.n	8000b56 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1f9      	bne.n	8000b50 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff ff3f 	bl	80009e4 <LL_ADC_IsInternalRegulatorEnabled>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d10f      	bne.n	8000b8a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	2210      	movs	r2, #16
 8000b70:	431a      	orrs	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000b82:	231f      	movs	r3, #31
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f7ff ff94 	bl	8000abc <LL_ADC_REG_IsConversionOngoing>
 8000b94:	0003      	movs	r3, r0
 8000b96:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	d000      	beq.n	8000ba4 <HAL_ADC_Init+0xc4>
 8000ba2:	e144      	b.n	8000e2e <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d000      	beq.n	8000bac <HAL_ADC_Init+0xcc>
 8000baa:	e140      	b.n	8000e2e <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb0:	4aa9      	ldr	r2, [pc, #676]	; (8000e58 <HAL_ADC_Init+0x378>)
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff ff47 	bl	8000a54 <LL_ADC_IsEnabled>
 8000bc6:	1e03      	subs	r3, r0, #0
 8000bc8:	d000      	beq.n	8000bcc <HAL_ADC_Init+0xec>
 8000bca:	e0ad      	b.n	8000d28 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7e1b      	ldrb	r3, [r3, #24]
 8000bd4:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000bd6:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7e5b      	ldrb	r3, [r3, #25]
 8000bdc:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000bde:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7e9b      	ldrb	r3, [r3, #26]
 8000be4:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000be6:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d002      	beq.n	8000bf6 <HAL_ADC_Init+0x116>
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	015b      	lsls	r3, r3, #5
 8000bf4:	e000      	b.n	8000bf8 <HAL_ADC_Init+0x118>
 8000bf6:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000bf8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000bfe:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	691b      	ldr	r3, [r3, #16]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	da04      	bge.n	8000c12 <HAL_ADC_Init+0x132>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	691b      	ldr	r3, [r3, #16]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	085b      	lsrs	r3, r3, #1
 8000c10:	e001      	b.n	8000c16 <HAL_ADC_Init+0x136>
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000c16:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	212c      	movs	r1, #44	; 0x2c
 8000c1c:	5c5b      	ldrb	r3, [r3, r1]
 8000c1e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000c20:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2220      	movs	r2, #32
 8000c2c:	5c9b      	ldrb	r3, [r3, r2]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d115      	bne.n	8000c5e <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7e9b      	ldrb	r3, [r3, #26]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d105      	bne.n	8000c46 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	0252      	lsls	r2, r2, #9
 8000c40:	4313      	orrs	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	e00b      	b.n	8000c5e <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4a:	2220      	movs	r2, #32
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c56:	2201      	movs	r2, #1
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d00a      	beq.n	8000c7c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c6a:	23e0      	movs	r3, #224	; 0xe0
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000c74:	4313      	orrs	r3, r2
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	4a76      	ldr	r2, [pc, #472]	; (8000e5c <HAL_ADC_Init+0x37c>)
 8000c84:	4013      	ands	r3, r2
 8000c86:	0019      	movs	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	0f9b      	lsrs	r3, r3, #30
 8000c98:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	223c      	movs	r2, #60	; 0x3c
 8000caa:	5c9b      	ldrb	r3, [r3, r2]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d111      	bne.n	8000cd4 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	0f9b      	lsrs	r3, r3, #30
 8000cb6:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000cbc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000cc2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000cc8:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	4a61      	ldr	r2, [pc, #388]	; (8000e60 <HAL_ADC_Init+0x380>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	0019      	movs	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	23c0      	movs	r3, #192	; 0xc0
 8000cf0:	061b      	lsls	r3, r3, #24
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d018      	beq.n	8000d28 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	05db      	lsls	r3, r3, #23
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d012      	beq.n	8000d28 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	061b      	lsls	r3, r3, #24
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d00c      	beq.n	8000d28 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000d0e:	4b55      	ldr	r3, [pc, #340]	; (8000e64 <HAL_ADC_Init+0x384>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a55      	ldr	r2, [pc, #340]	; (8000e68 <HAL_ADC_Init+0x388>)
 8000d14:	4013      	ands	r3, r2
 8000d16:	0019      	movs	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	23f0      	movs	r3, #240	; 0xf0
 8000d1e:	039b      	lsls	r3, r3, #14
 8000d20:	401a      	ands	r2, r3
 8000d22:	4b50      	ldr	r3, [pc, #320]	; (8000e64 <HAL_ADC_Init+0x384>)
 8000d24:	430a      	orrs	r2, r1
 8000d26:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6818      	ldr	r0, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d30:	001a      	movs	r2, r3
 8000d32:	2100      	movs	r1, #0
 8000d34:	f7ff fd9d 	bl	8000872 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d40:	494a      	ldr	r1, [pc, #296]	; (8000e6c <HAL_ADC_Init+0x38c>)
 8000d42:	001a      	movs	r2, r3
 8000d44:	f7ff fd95 	bl	8000872 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d109      	bne.n	8000d64 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	4249      	negs	r1, r1
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28
 8000d62:	e03a      	b.n	8000dda <HAL_ADC_Init+0x2fa>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	691a      	ldr	r2, [r3, #16]
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	039b      	lsls	r3, r3, #14
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d134      	bne.n	8000dda <HAL_ADC_Init+0x2fa>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	e00c      	b.n	8000d90 <HAL_ADC_Init+0x2b0>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	40da      	lsrs	r2, r3
 8000d80:	0013      	movs	r3, r2
 8000d82:	220f      	movs	r2, #15
 8000d84:	4013      	ands	r3, r2
 8000d86:	2b0f      	cmp	r3, #15
 8000d88:	d006      	beq.n	8000d98 <HAL_ADC_Init+0x2b8>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	2b07      	cmp	r3, #7
 8000d94:	d9ef      	bls.n	8000d76 <HAL_ADC_Init+0x296>
 8000d96:	e000      	b.n	8000d9a <HAL_ADC_Init+0x2ba>
            ADC_CHSELR_SQ1)
        {
          break;
 8000d98:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d109      	bne.n	8000db4 <HAL_ADC_Init+0x2d4>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2110      	movs	r1, #16
 8000dac:	4249      	negs	r1, r1
 8000dae:	430a      	orrs	r2, r1
 8000db0:	629a      	str	r2, [r3, #40]	; 0x28
 8000db2:	e012      	b.n	8000dda <HAL_ADC_Init+0x2fa>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	221c      	movs	r2, #28
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	2210      	movs	r2, #16
 8000dc8:	4252      	negs	r2, r2
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0011      	movs	r1, r2
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2100      	movs	r1, #0
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff fd63 	bl	80008ac <LL_ADC_GetSamplingTimeCommonChannels>
 8000de6:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d10b      	bne.n	8000e08 <HAL_ADC_Init+0x328>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	4393      	bics	r3, r2
 8000dfe:	2201      	movs	r2, #1
 8000e00:	431a      	orrs	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e06:	e01c      	b.n	8000e42 <HAL_ADC_Init+0x362>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0c:	2212      	movs	r2, #18
 8000e0e:	4393      	bics	r3, r2
 8000e10:	2210      	movs	r2, #16
 8000e12:	431a      	orrs	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000e24:	231f      	movs	r3, #31
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	2201      	movs	r2, #1
 8000e2a:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000e2c:	e009      	b.n	8000e42 <HAL_ADC_Init+0x362>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	2210      	movs	r2, #16
 8000e34:	431a      	orrs	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000e3a:	231f      	movs	r3, #31
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e42:	231f      	movs	r3, #31
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	781b      	ldrb	r3, [r3, #0]
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b008      	add	sp, #32
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000
 8000e54:	00030d40 	.word	0x00030d40
 8000e58:	fffffefd 	.word	0xfffffefd
 8000e5c:	fffe0201 	.word	0xfffe0201
 8000e60:	1ffffc02 	.word	0x1ffffc02
 8000e64:	40012708 	.word	0x40012708
 8000e68:	ffc3ffff 	.word	0xffc3ffff
 8000e6c:	7fffff04 	.word	0x7fffff04

08000e70 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000e70:	b5b0      	push	{r4, r5, r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	0018      	movs	r0, r3
 8000e82:	f7ff fe1b 	bl	8000abc <LL_ADC_REG_IsConversionOngoing>
 8000e86:	1e03      	subs	r3, r0, #0
 8000e88:	d16c      	bne.n	8000f64 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2254      	movs	r2, #84	; 0x54
 8000e8e:	5c9b      	ldrb	r3, [r3, r2]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d101      	bne.n	8000e98 <HAL_ADC_Start_DMA+0x28>
 8000e94:	2302      	movs	r3, #2
 8000e96:	e06c      	b.n	8000f72 <HAL_ADC_Start_DMA+0x102>
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2254      	movs	r2, #84	; 0x54
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d113      	bne.n	8000ed4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff fdcf 	bl	8000a54 <LL_ADC_IsEnabled>
 8000eb6:	1e03      	subs	r3, r0, #0
 8000eb8:	d004      	beq.n	8000ec4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff fdb6 	bl	8000a30 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2101      	movs	r1, #1
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ed4:	2517      	movs	r5, #23
 8000ed6:	197c      	adds	r4, r7, r5
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	0018      	movs	r0, r3
 8000edc:	f000 fa44 	bl	8001368 <ADC_Enable>
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ee4:	002c      	movs	r4, r5
 8000ee6:	193b      	adds	r3, r7, r4
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d13e      	bne.n	8000f6c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	4a22      	ldr	r2, [pc, #136]	; (8000f7c <HAL_ADC_Start_DMA+0x10c>)
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	0052      	lsls	r2, r2, #1
 8000efa:	431a      	orrs	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2200      	movs	r2, #0
 8000f04:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f0a:	4a1d      	ldr	r2, [pc, #116]	; (8000f80 <HAL_ADC_Start_DMA+0x110>)
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f12:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <HAL_ADC_Start_DMA+0x114>)
 8000f14:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f1a:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <HAL_ADC_Start_DMA+0x118>)
 8000f1c:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	221c      	movs	r2, #28
 8000f24:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2254      	movs	r2, #84	; 0x54
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2110      	movs	r1, #16
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3340      	adds	r3, #64	; 0x40
 8000f48:	0019      	movs	r1, r3
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	193c      	adds	r4, r7, r4
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f000 fe28 	bl	8001ba4 <HAL_DMA_Start_IT>
 8000f54:	0003      	movs	r3, r0
 8000f56:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f7ff fd9b 	bl	8000a98 <LL_ADC_REG_StartConversion>
 8000f62:	e003      	b.n	8000f6c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f64:	2317      	movs	r3, #23
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	2202      	movs	r2, #2
 8000f6a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000f6c:	2317      	movs	r3, #23
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	781b      	ldrb	r3, [r3, #0]
}
 8000f72:	0018      	movs	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b006      	add	sp, #24
 8000f78:	bdb0      	pop	{r4, r5, r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	fffff0fe 	.word	0xfffff0fe
 8000f80:	08001515 	.word	0x08001515
 8000f84:	080015dd 	.word	0x080015dd
 8000f88:	080015fb 	.word	0x080015fb

08000f8c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b002      	add	sp, #8
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b002      	add	sp, #8
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc6:	2317      	movs	r3, #23
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2254      	movs	r2, #84	; 0x54
 8000fd6:	5c9b      	ldrb	r3, [r3, r2]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d101      	bne.n	8000fe0 <HAL_ADC_ConfigChannel+0x24>
 8000fdc:	2302      	movs	r3, #2
 8000fde:	e1be      	b.n	800135e <HAL_ADC_ConfigChannel+0x3a2>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2254      	movs	r2, #84	; 0x54
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	0018      	movs	r0, r3
 8000fee:	f7ff fd65 	bl	8000abc <LL_ADC_REG_IsConversionOngoing>
 8000ff2:	1e03      	subs	r3, r0, #0
 8000ff4:	d000      	beq.n	8000ff8 <HAL_ADC_ConfigChannel+0x3c>
 8000ff6:	e1a1      	b.n	800133c <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d100      	bne.n	8001002 <HAL_ADC_ConfigChannel+0x46>
 8001000:	e152      	b.n	80012a8 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	691a      	ldr	r2, [r3, #16]
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	061b      	lsls	r3, r3, #24
 800100a:	429a      	cmp	r2, r3
 800100c:	d004      	beq.n	8001018 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001012:	4ac2      	ldr	r2, [pc, #776]	; (800131c <HAL_ADC_ConfigChannel+0x360>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d108      	bne.n	800102a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	0019      	movs	r1, r3
 8001022:	0010      	movs	r0, r2
 8001024:	f7ff fc8a 	bl	800093c <LL_ADC_REG_SetSequencerChAdd>
 8001028:	e0ed      	b.n	8001206 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	211f      	movs	r1, #31
 8001034:	400b      	ands	r3, r1
 8001036:	210f      	movs	r1, #15
 8001038:	4099      	lsls	r1, r3
 800103a:	000b      	movs	r3, r1
 800103c:	43db      	mvns	r3, r3
 800103e:	4013      	ands	r3, r2
 8001040:	0019      	movs	r1, r3
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	025b      	lsls	r3, r3, #9
 8001048:	0a5b      	lsrs	r3, r3, #9
 800104a:	d105      	bne.n	8001058 <HAL_ADC_ConfigChannel+0x9c>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	0e9b      	lsrs	r3, r3, #26
 8001052:	221f      	movs	r2, #31
 8001054:	4013      	ands	r3, r2
 8001056:	e0bc      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2201      	movs	r2, #1
 800105e:	4013      	ands	r3, r2
 8001060:	d000      	beq.n	8001064 <HAL_ADC_ConfigChannel+0xa8>
 8001062:	e0b5      	b.n	80011d0 <HAL_ADC_ConfigChannel+0x214>
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2202      	movs	r2, #2
 800106a:	4013      	ands	r3, r2
 800106c:	d000      	beq.n	8001070 <HAL_ADC_ConfigChannel+0xb4>
 800106e:	e0ad      	b.n	80011cc <HAL_ADC_ConfigChannel+0x210>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2204      	movs	r2, #4
 8001076:	4013      	ands	r3, r2
 8001078:	d000      	beq.n	800107c <HAL_ADC_ConfigChannel+0xc0>
 800107a:	e0a5      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x20c>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2208      	movs	r2, #8
 8001082:	4013      	ands	r3, r2
 8001084:	d000      	beq.n	8001088 <HAL_ADC_ConfigChannel+0xcc>
 8001086:	e09d      	b.n	80011c4 <HAL_ADC_ConfigChannel+0x208>
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2210      	movs	r2, #16
 800108e:	4013      	ands	r3, r2
 8001090:	d000      	beq.n	8001094 <HAL_ADC_ConfigChannel+0xd8>
 8001092:	e095      	b.n	80011c0 <HAL_ADC_ConfigChannel+0x204>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2220      	movs	r2, #32
 800109a:	4013      	ands	r3, r2
 800109c:	d000      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0xe4>
 800109e:	e08d      	b.n	80011bc <HAL_ADC_ConfigChannel+0x200>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2240      	movs	r2, #64	; 0x40
 80010a6:	4013      	ands	r3, r2
 80010a8:	d000      	beq.n	80010ac <HAL_ADC_ConfigChannel+0xf0>
 80010aa:	e085      	b.n	80011b8 <HAL_ADC_ConfigChannel+0x1fc>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	4013      	ands	r3, r2
 80010b4:	d000      	beq.n	80010b8 <HAL_ADC_ConfigChannel+0xfc>
 80010b6:	e07d      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x1f8>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4013      	ands	r3, r2
 80010c2:	d000      	beq.n	80010c6 <HAL_ADC_ConfigChannel+0x10a>
 80010c4:	e074      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x1f4>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4013      	ands	r3, r2
 80010d0:	d000      	beq.n	80010d4 <HAL_ADC_ConfigChannel+0x118>
 80010d2:	e06b      	b.n	80011ac <HAL_ADC_ConfigChannel+0x1f0>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4013      	ands	r3, r2
 80010de:	d000      	beq.n	80010e2 <HAL_ADC_ConfigChannel+0x126>
 80010e0:	e062      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x1ec>
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	4013      	ands	r3, r2
 80010ec:	d000      	beq.n	80010f0 <HAL_ADC_ConfigChannel+0x134>
 80010ee:	e059      	b.n	80011a4 <HAL_ADC_ConfigChannel+0x1e8>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	015b      	lsls	r3, r3, #5
 80010f8:	4013      	ands	r3, r2
 80010fa:	d151      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x1e4>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	019b      	lsls	r3, r3, #6
 8001104:	4013      	ands	r3, r2
 8001106:	d149      	bne.n	800119c <HAL_ADC_ConfigChannel+0x1e0>
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	01db      	lsls	r3, r3, #7
 8001110:	4013      	ands	r3, r2
 8001112:	d141      	bne.n	8001198 <HAL_ADC_ConfigChannel+0x1dc>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	4013      	ands	r3, r2
 800111e:	d139      	bne.n	8001194 <HAL_ADC_ConfigChannel+0x1d8>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	025b      	lsls	r3, r3, #9
 8001128:	4013      	ands	r3, r2
 800112a:	d131      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x1d4>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	029b      	lsls	r3, r3, #10
 8001134:	4013      	ands	r3, r2
 8001136:	d129      	bne.n	800118c <HAL_ADC_ConfigChannel+0x1d0>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	02db      	lsls	r3, r3, #11
 8001140:	4013      	ands	r3, r2
 8001142:	d121      	bne.n	8001188 <HAL_ADC_ConfigChannel+0x1cc>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	031b      	lsls	r3, r3, #12
 800114c:	4013      	ands	r3, r2
 800114e:	d119      	bne.n	8001184 <HAL_ADC_ConfigChannel+0x1c8>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	035b      	lsls	r3, r3, #13
 8001158:	4013      	ands	r3, r2
 800115a:	d111      	bne.n	8001180 <HAL_ADC_ConfigChannel+0x1c4>
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	039b      	lsls	r3, r3, #14
 8001164:	4013      	ands	r3, r2
 8001166:	d109      	bne.n	800117c <HAL_ADC_ConfigChannel+0x1c0>
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	03db      	lsls	r3, r3, #15
 8001170:	4013      	ands	r3, r2
 8001172:	d001      	beq.n	8001178 <HAL_ADC_ConfigChannel+0x1bc>
 8001174:	2316      	movs	r3, #22
 8001176:	e02c      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 8001178:	2300      	movs	r3, #0
 800117a:	e02a      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 800117c:	2315      	movs	r3, #21
 800117e:	e028      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 8001180:	2314      	movs	r3, #20
 8001182:	e026      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 8001184:	2313      	movs	r3, #19
 8001186:	e024      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 8001188:	2312      	movs	r3, #18
 800118a:	e022      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 800118c:	2311      	movs	r3, #17
 800118e:	e020      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 8001190:	2310      	movs	r3, #16
 8001192:	e01e      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 8001194:	230f      	movs	r3, #15
 8001196:	e01c      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 8001198:	230e      	movs	r3, #14
 800119a:	e01a      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 800119c:	230d      	movs	r3, #13
 800119e:	e018      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 80011a0:	230c      	movs	r3, #12
 80011a2:	e016      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 80011a4:	230b      	movs	r3, #11
 80011a6:	e014      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 80011a8:	230a      	movs	r3, #10
 80011aa:	e012      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 80011ac:	2309      	movs	r3, #9
 80011ae:	e010      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 80011b0:	2308      	movs	r3, #8
 80011b2:	e00e      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 80011b4:	2307      	movs	r3, #7
 80011b6:	e00c      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 80011b8:	2306      	movs	r3, #6
 80011ba:	e00a      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 80011bc:	2305      	movs	r3, #5
 80011be:	e008      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 80011c0:	2304      	movs	r3, #4
 80011c2:	e006      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 80011c4:	2303      	movs	r3, #3
 80011c6:	e004      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 80011c8:	2302      	movs	r3, #2
 80011ca:	e002      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x216>
 80011d0:	2300      	movs	r3, #0
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	6852      	ldr	r2, [r2, #4]
 80011d6:	201f      	movs	r0, #31
 80011d8:	4002      	ands	r2, r0
 80011da:	4093      	lsls	r3, r2
 80011dc:	000a      	movs	r2, r1
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d808      	bhi.n	8001206 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	6859      	ldr	r1, [r3, #4]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	001a      	movs	r2, r3
 8001202:	f7ff fb7b 	bl	80008fc <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	6819      	ldr	r1, [r3, #0]
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	001a      	movs	r2, r3
 8001214:	f7ff fbb6 	bl	8000984 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db00      	blt.n	8001222 <HAL_ADC_ConfigChannel+0x266>
 8001220:	e096      	b.n	8001350 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001222:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <HAL_ADC_ConfigChannel+0x364>)
 8001224:	0018      	movs	r0, r3
 8001226:	f7ff fb17 	bl	8000858 <LL_ADC_GetCommonPathInternalCh>
 800122a:	0003      	movs	r3, r0
 800122c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a3c      	ldr	r2, [pc, #240]	; (8001324 <HAL_ADC_ConfigChannel+0x368>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d123      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	041b      	lsls	r3, r3, #16
 800123e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001240:	d11e      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	2280      	movs	r2, #128	; 0x80
 8001246:	0412      	lsls	r2, r2, #16
 8001248:	4313      	orrs	r3, r2
 800124a:	4a35      	ldr	r2, [pc, #212]	; (8001320 <HAL_ADC_ConfigChannel+0x364>)
 800124c:	0019      	movs	r1, r3
 800124e:	0010      	movs	r0, r2
 8001250:	f7ff faee 	bl	8000830 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001254:	4b34      	ldr	r3, [pc, #208]	; (8001328 <HAL_ADC_ConfigChannel+0x36c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4934      	ldr	r1, [pc, #208]	; (800132c <HAL_ADC_ConfigChannel+0x370>)
 800125a:	0018      	movs	r0, r3
 800125c:	f7fe ff54 	bl	8000108 <__udivsi3>
 8001260:	0003      	movs	r3, r0
 8001262:	001a      	movs	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	189b      	adds	r3, r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	3301      	adds	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001270:	e002      	b.n	8001278 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3b01      	subs	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f9      	bne.n	8001272 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800127e:	e067      	b.n	8001350 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a2a      	ldr	r2, [pc, #168]	; (8001330 <HAL_ADC_ConfigChannel+0x374>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d162      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	03db      	lsls	r3, r3, #15
 8001290:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001292:	d15d      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	03d2      	lsls	r2, r2, #15
 800129a:	4313      	orrs	r3, r2
 800129c:	4a20      	ldr	r2, [pc, #128]	; (8001320 <HAL_ADC_ConfigChannel+0x364>)
 800129e:	0019      	movs	r1, r3
 80012a0:	0010      	movs	r0, r2
 80012a2:	f7ff fac5 	bl	8000830 <LL_ADC_SetCommonPathInternalCh>
 80012a6:	e053      	b.n	8001350 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	061b      	lsls	r3, r3, #24
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d004      	beq.n	80012be <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80012b8:	4a18      	ldr	r2, [pc, #96]	; (800131c <HAL_ADC_ConfigChannel+0x360>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d107      	bne.n	80012ce <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	0019      	movs	r1, r3
 80012c8:	0010      	movs	r0, r2
 80012ca:	f7ff fb48 	bl	800095e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	da3c      	bge.n	8001350 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_ADC_ConfigChannel+0x364>)
 80012d8:	0018      	movs	r0, r3
 80012da:	f7ff fabd 	bl	8000858 <LL_ADC_GetCommonPathInternalCh>
 80012de:	0003      	movs	r3, r0
 80012e0:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <HAL_ADC_ConfigChannel+0x368>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d108      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4a11      	ldr	r2, [pc, #68]	; (8001334 <HAL_ADC_ConfigChannel+0x378>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <HAL_ADC_ConfigChannel+0x364>)
 80012f4:	0019      	movs	r1, r3
 80012f6:	0010      	movs	r0, r2
 80012f8:	f7ff fa9a 	bl	8000830 <LL_ADC_SetCommonPathInternalCh>
 80012fc:	e028      	b.n	8001350 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <HAL_ADC_ConfigChannel+0x374>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d123      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <HAL_ADC_ConfigChannel+0x37c>)
 800130c:	4013      	ands	r3, r2
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_ADC_ConfigChannel+0x364>)
 8001310:	0019      	movs	r1, r3
 8001312:	0010      	movs	r0, r2
 8001314:	f7ff fa8c 	bl	8000830 <LL_ADC_SetCommonPathInternalCh>
 8001318:	e01a      	b.n	8001350 <HAL_ADC_ConfigChannel+0x394>
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	80000004 	.word	0x80000004
 8001320:	40012708 	.word	0x40012708
 8001324:	a4000200 	.word	0xa4000200
 8001328:	20000000 	.word	0x20000000
 800132c:	00030d40 	.word	0x00030d40
 8001330:	a8000400 	.word	0xa8000400
 8001334:	ff7fffff 	.word	0xff7fffff
 8001338:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	2220      	movs	r2, #32
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001348:	2317      	movs	r3, #23
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	2201      	movs	r2, #1
 800134e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2254      	movs	r2, #84	; 0x54
 8001354:	2100      	movs	r1, #0
 8001356:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001358:	2317      	movs	r3, #23
 800135a:	18fb      	adds	r3, r7, r3
 800135c:	781b      	ldrb	r3, [r3, #0]
}
 800135e:	0018      	movs	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	b006      	add	sp, #24
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)

08001368 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	0018      	movs	r0, r3
 800137a:	f7ff fb6b 	bl	8000a54 <LL_ADC_IsEnabled>
 800137e:	1e03      	subs	r3, r0, #0
 8001380:	d162      	bne.n	8001448 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	4a32      	ldr	r2, [pc, #200]	; (8001454 <ADC_Enable+0xec>)
 800138a:	4013      	ands	r3, r2
 800138c:	d00d      	beq.n	80013aa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	2210      	movs	r2, #16
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139e:	2201      	movs	r2, #1
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e04f      	b.n	800144a <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	0018      	movs	r0, r3
 80013b0:	f7ff fb2c 	bl	8000a0c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <ADC_Enable+0xf0>)
 80013b6:	0018      	movs	r0, r3
 80013b8:	f7ff fa4e 	bl	8000858 <LL_ADC_GetCommonPathInternalCh>
 80013bc:	0002      	movs	r2, r0
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	041b      	lsls	r3, r3, #16
 80013c2:	4013      	ands	r3, r2
 80013c4:	d00f      	beq.n	80013e6 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80013c6:	4b25      	ldr	r3, [pc, #148]	; (800145c <ADC_Enable+0xf4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4925      	ldr	r1, [pc, #148]	; (8001460 <ADC_Enable+0xf8>)
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7fe fe9b 	bl	8000108 <__udivsi3>
 80013d2:	0003      	movs	r3, r0
 80013d4:	3301      	adds	r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80013d8:	e002      	b.n	80013e0 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	3b01      	subs	r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f9      	bne.n	80013da <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	7e5b      	ldrb	r3, [r3, #25]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d02c      	beq.n	8001448 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80013ee:	f7ff fa15 	bl	800081c <HAL_GetTick>
 80013f2:	0003      	movs	r3, r0
 80013f4:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013f6:	e020      	b.n	800143a <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff fb29 	bl	8000a54 <LL_ADC_IsEnabled>
 8001402:	1e03      	subs	r3, r0, #0
 8001404:	d104      	bne.n	8001410 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	0018      	movs	r0, r3
 800140c:	f7ff fafe 	bl	8000a0c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001410:	f7ff fa04 	bl	800081c <HAL_GetTick>
 8001414:	0002      	movs	r2, r0
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d90d      	bls.n	800143a <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001422:	2210      	movs	r2, #16
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142e:	2201      	movs	r2, #1
 8001430:	431a      	orrs	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e007      	b.n	800144a <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2201      	movs	r2, #1
 8001442:	4013      	ands	r3, r2
 8001444:	2b01      	cmp	r3, #1
 8001446:	d1d7      	bne.n	80013f8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	b004      	add	sp, #16
 8001450:	bd80      	pop	{r7, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	80000017 	.word	0x80000017
 8001458:	40012708 	.word	0x40012708
 800145c:	20000000 	.word	0x20000000
 8001460:	00030d40 	.word	0x00030d40

08001464 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	0018      	movs	r0, r3
 8001472:	f7ff fb00 	bl	8000a76 <LL_ADC_IsDisableOngoing>
 8001476:	0003      	movs	r3, r0
 8001478:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	0018      	movs	r0, r3
 8001480:	f7ff fae8 	bl	8000a54 <LL_ADC_IsEnabled>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d040      	beq.n	800150a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d13d      	bne.n	800150a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	2205      	movs	r2, #5
 8001496:	4013      	ands	r3, r2
 8001498:	2b01      	cmp	r3, #1
 800149a:	d10d      	bne.n	80014b8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff fac5 	bl	8000a30 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2203      	movs	r2, #3
 80014ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014ae:	f7ff f9b5 	bl	800081c <HAL_GetTick>
 80014b2:	0003      	movs	r3, r0
 80014b4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80014b6:	e022      	b.n	80014fe <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014bc:	2210      	movs	r2, #16
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c8:	2201      	movs	r2, #1
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e01b      	b.n	800150c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014d4:	f7ff f9a2 	bl	800081c <HAL_GetTick>
 80014d8:	0002      	movs	r2, r0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d90d      	bls.n	80014fe <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e6:	2210      	movs	r2, #16
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f2:	2201      	movs	r2, #1
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e006      	b.n	800150c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2201      	movs	r2, #1
 8001506:	4013      	ands	r3, r2
 8001508:	d1e4      	bne.n	80014d4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	0018      	movs	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	b004      	add	sp, #16
 8001512:	bd80      	pop	{r7, pc}

08001514 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	2250      	movs	r2, #80	; 0x50
 8001528:	4013      	ands	r3, r2
 800152a:	d141      	bne.n	80015b0 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001530:	2280      	movs	r2, #128	; 0x80
 8001532:	0092      	lsls	r2, r2, #2
 8001534:	431a      	orrs	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	0018      	movs	r0, r3
 8001540:	f7ff f9cb 	bl	80008da <LL_ADC_REG_IsTriggerSourceSWStart>
 8001544:	1e03      	subs	r3, r0, #0
 8001546:	d02e      	beq.n	80015a6 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	7e9b      	ldrb	r3, [r3, #26]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d12a      	bne.n	80015a6 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2208      	movs	r2, #8
 8001558:	4013      	ands	r3, r2
 800155a:	2b08      	cmp	r3, #8
 800155c:	d123      	bne.n	80015a6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	0018      	movs	r0, r3
 8001564:	f7ff faaa 	bl	8000abc <LL_ADC_REG_IsConversionOngoing>
 8001568:	1e03      	subs	r3, r0, #0
 800156a:	d110      	bne.n	800158e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	210c      	movs	r1, #12
 8001578:	438a      	bics	r2, r1
 800157a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <ADC_DMAConvCplt+0xc4>)
 8001582:	4013      	ands	r3, r2
 8001584:	2201      	movs	r2, #1
 8001586:	431a      	orrs	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	659a      	str	r2, [r3, #88]	; 0x58
 800158c:	e00b      	b.n	80015a6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	2220      	movs	r2, #32
 8001594:	431a      	orrs	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159e:	2201      	movs	r2, #1
 80015a0:	431a      	orrs	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	0018      	movs	r0, r3
 80015aa:	f7ff fcef 	bl	8000f8c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80015ae:	e00f      	b.n	80015d0 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b4:	2210      	movs	r2, #16
 80015b6:	4013      	ands	r3, r2
 80015b8:	d004      	beq.n	80015c4 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	0018      	movs	r0, r3
 80015be:	f7ff fcf5 	bl	8000fac <HAL_ADC_ErrorCallback>
}
 80015c2:	e005      	b.n	80015d0 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	0010      	movs	r0, r2
 80015ce:	4798      	blx	r3
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b004      	add	sp, #16
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	fffffefe 	.word	0xfffffefe

080015dc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	0018      	movs	r0, r3
 80015ee:	f7ff fcd5 	bl	8000f9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b004      	add	sp, #16
 80015f8:	bd80      	pop	{r7, pc}

080015fa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160c:	2240      	movs	r2, #64	; 0x40
 800160e:	431a      	orrs	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001618:	2204      	movs	r2, #4
 800161a:	431a      	orrs	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	0018      	movs	r0, r3
 8001624:	f7ff fcc2 	bl	8000fac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b004      	add	sp, #16
 800162e:	bd80      	pop	{r7, pc}

08001630 <LL_ADC_SetCalibrationFactor>:
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	22b4      	movs	r2, #180	; 0xb4
 800163e:	589b      	ldr	r3, [r3, r2]
 8001640:	227f      	movs	r2, #127	; 0x7f
 8001642:	4393      	bics	r3, r2
 8001644:	001a      	movs	r2, r3
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	21b4      	movs	r1, #180	; 0xb4
 800164e:	505a      	str	r2, [r3, r1]
}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b002      	add	sp, #8
 8001656:	bd80      	pop	{r7, pc}

08001658 <LL_ADC_GetCalibrationFactor>:
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	22b4      	movs	r2, #180	; 0xb4
 8001664:	589b      	ldr	r3, [r3, r2]
 8001666:	227f      	movs	r2, #127	; 0x7f
 8001668:	4013      	ands	r3, r2
}
 800166a:	0018      	movs	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	b002      	add	sp, #8
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <LL_ADC_Enable>:
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <LL_ADC_Enable+0x20>)
 8001682:	4013      	ands	r3, r2
 8001684:	2201      	movs	r2, #1
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	609a      	str	r2, [r3, #8]
}
 800168c:	46c0      	nop			; (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	b002      	add	sp, #8
 8001692:	bd80      	pop	{r7, pc}
 8001694:	7fffffe8 	.word	0x7fffffe8

08001698 <LL_ADC_Disable>:
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <LL_ADC_Disable+0x20>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	2202      	movs	r2, #2
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	609a      	str	r2, [r3, #8]
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b002      	add	sp, #8
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	7fffffe8 	.word	0x7fffffe8

080016bc <LL_ADC_IsEnabled>:
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2201      	movs	r2, #1
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <LL_ADC_IsEnabled+0x18>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <LL_ADC_IsEnabled+0x1a>
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	0018      	movs	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	b002      	add	sp, #8
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <LL_ADC_StartCalibration>:
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <LL_ADC_StartCalibration+0x24>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	2280      	movs	r2, #128	; 0x80
 80016f2:	0612      	lsls	r2, r2, #24
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	609a      	str	r2, [r3, #8]
}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b002      	add	sp, #8
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	7fffffe8 	.word	0x7fffffe8

08001708 <LL_ADC_IsCalibrationOnGoing>:
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	0fdb      	lsrs	r3, r3, #31
 8001716:	07da      	lsls	r2, r3, #31
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	061b      	lsls	r3, r3, #24
 800171c:	429a      	cmp	r2, r3
 800171e:	d101      	bne.n	8001724 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001724:	2300      	movs	r3, #0
}
 8001726:	0018      	movs	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	b002      	add	sp, #8
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2254      	movs	r2, #84	; 0x54
 8001744:	5c9b      	ldrb	r3, [r3, r2]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_ADCEx_Calibration_Start+0x1e>
 800174a:	2302      	movs	r3, #2
 800174c:	e0bb      	b.n	80018c6 <HAL_ADCEx_Calibration_Start+0x196>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2254      	movs	r2, #84	; 0x54
 8001752:	2101      	movs	r1, #1
 8001754:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001756:	2317      	movs	r3, #23
 8001758:	18fc      	adds	r4, r7, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	0018      	movs	r0, r3
 800175e:	f7ff fe81 	bl	8001464 <ADC_Disable>
 8001762:	0003      	movs	r3, r0
 8001764:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	0018      	movs	r0, r3
 800176c:	f7ff ffa6 	bl	80016bc <LL_ADC_IsEnabled>
 8001770:	1e03      	subs	r3, r0, #0
 8001772:	d000      	beq.n	8001776 <HAL_ADCEx_Calibration_Start+0x46>
 8001774:	e09a      	b.n	80018ac <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	4a55      	ldr	r2, [pc, #340]	; (80018d0 <HAL_ADCEx_Calibration_Start+0x1a0>)
 800177c:	4013      	ands	r3, r2
 800177e:	2202      	movs	r2, #2
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	2203      	movs	r2, #3
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2103      	movs	r1, #3
 800179e:	438a      	bics	r2, r1
 80017a0:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
 80017a6:	e02e      	b.n	8001806 <HAL_ADCEx_Calibration_Start+0xd6>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0018      	movs	r0, r3
 80017ae:	f7ff ff97 	bl	80016e0 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80017b2:	e015      	b.n	80017e0 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	3301      	adds	r3, #1
 80017b8:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	23ae      	movs	r3, #174	; 0xae
 80017be:	029b      	lsls	r3, r3, #10
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d30d      	bcc.n	80017e0 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c8:	2212      	movs	r2, #18
 80017ca:	4393      	bics	r3, r2
 80017cc:	2210      	movs	r2, #16
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2254      	movs	r2, #84	; 0x54
 80017d8:	2100      	movs	r1, #0
 80017da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e072      	b.n	80018c6 <HAL_ADCEx_Calibration_Start+0x196>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0018      	movs	r0, r3
 80017e6:	f7ff ff8f 	bl	8001708 <LL_ADC_IsCalibrationOnGoing>
 80017ea:	1e03      	subs	r3, r0, #0
 80017ec:	d1e2      	bne.n	80017b4 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0018      	movs	r0, r3
 80017f4:	f7ff ff30 	bl	8001658 <LL_ADC_GetCalibrationFactor>
 80017f8:	0002      	movs	r2, r0
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	189b      	adds	r3, r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	3301      	adds	r3, #1
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	2b07      	cmp	r3, #7
 800180a:	d9cd      	bls.n	80017a8 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800180c:	69f9      	ldr	r1, [r7, #28]
 800180e:	69b8      	ldr	r0, [r7, #24]
 8001810:	f7fe fc7a 	bl	8000108 <__udivsi3>
 8001814:	0003      	movs	r3, r0
 8001816:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	0018      	movs	r0, r3
 800181e:	f7ff ff29 	bl	8001674 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	0011      	movs	r1, r2
 800182a:	0018      	movs	r0, r3
 800182c:	f7ff ff00 	bl	8001630 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0018      	movs	r0, r3
 8001836:	f7ff ff2f 	bl	8001698 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800183a:	f7fe ffef 	bl	800081c <HAL_GetTick>
 800183e:	0003      	movs	r3, r0
 8001840:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001842:	e01b      	b.n	800187c <HAL_ADCEx_Calibration_Start+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001844:	f7fe ffea 	bl	800081c <HAL_GetTick>
 8001848:	0002      	movs	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d914      	bls.n	800187c <HAL_ADCEx_Calibration_Start+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	0018      	movs	r0, r3
 8001858:	f7ff ff30 	bl	80016bc <LL_ADC_IsEnabled>
 800185c:	1e03      	subs	r3, r0, #0
 800185e:	d00d      	beq.n	800187c <HAL_ADCEx_Calibration_Start+0x14c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001864:	2210      	movs	r2, #16
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001870:	2201      	movs	r2, #1
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e024      	b.n	80018c6 <HAL_ADCEx_Calibration_Start+0x196>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff ff1b 	bl	80016bc <LL_ADC_IsEnabled>
 8001886:	1e03      	subs	r3, r0, #0
 8001888:	d1dc      	bne.n	8001844 <HAL_ADCEx_Calibration_Start+0x114>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68d9      	ldr	r1, [r3, #12]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	430a      	orrs	r2, r1
 8001898:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189e:	2203      	movs	r2, #3
 80018a0:	4393      	bics	r3, r2
 80018a2:	2201      	movs	r2, #1
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	659a      	str	r2, [r3, #88]	; 0x58
 80018aa:	e005      	b.n	80018b8 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b0:	2210      	movs	r2, #16
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2254      	movs	r2, #84	; 0x54
 80018bc:	2100      	movs	r1, #0
 80018be:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80018c0:	2317      	movs	r3, #23
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	781b      	ldrb	r3, [r3, #0]
}
 80018c6:	0018      	movs	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b009      	add	sp, #36	; 0x24
 80018cc:	bd90      	pop	{r4, r7, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	fffffefd 	.word	0xfffffefd

080018d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	0002      	movs	r2, r0
 80018dc:	1dfb      	adds	r3, r7, #7
 80018de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018e0:	1dfb      	adds	r3, r7, #7
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b7f      	cmp	r3, #127	; 0x7f
 80018e6:	d809      	bhi.n	80018fc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e8:	1dfb      	adds	r3, r7, #7
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	001a      	movs	r2, r3
 80018ee:	231f      	movs	r3, #31
 80018f0:	401a      	ands	r2, r3
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <__NVIC_EnableIRQ+0x30>)
 80018f4:	2101      	movs	r1, #1
 80018f6:	4091      	lsls	r1, r2
 80018f8:	000a      	movs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b002      	add	sp, #8
 8001902:	bd80      	pop	{r7, pc}
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	0002      	movs	r2, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001916:	1dfb      	adds	r3, r7, #7
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b7f      	cmp	r3, #127	; 0x7f
 800191c:	d828      	bhi.n	8001970 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800191e:	4a2f      	ldr	r2, [pc, #188]	; (80019dc <__NVIC_SetPriority+0xd4>)
 8001920:	1dfb      	adds	r3, r7, #7
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b25b      	sxtb	r3, r3
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	33c0      	adds	r3, #192	; 0xc0
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	589b      	ldr	r3, [r3, r2]
 800192e:	1dfa      	adds	r2, r7, #7
 8001930:	7812      	ldrb	r2, [r2, #0]
 8001932:	0011      	movs	r1, r2
 8001934:	2203      	movs	r2, #3
 8001936:	400a      	ands	r2, r1
 8001938:	00d2      	lsls	r2, r2, #3
 800193a:	21ff      	movs	r1, #255	; 0xff
 800193c:	4091      	lsls	r1, r2
 800193e:	000a      	movs	r2, r1
 8001940:	43d2      	mvns	r2, r2
 8001942:	401a      	ands	r2, r3
 8001944:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	019b      	lsls	r3, r3, #6
 800194a:	22ff      	movs	r2, #255	; 0xff
 800194c:	401a      	ands	r2, r3
 800194e:	1dfb      	adds	r3, r7, #7
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	0018      	movs	r0, r3
 8001954:	2303      	movs	r3, #3
 8001956:	4003      	ands	r3, r0
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800195c:	481f      	ldr	r0, [pc, #124]	; (80019dc <__NVIC_SetPriority+0xd4>)
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b25b      	sxtb	r3, r3
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	430a      	orrs	r2, r1
 8001968:	33c0      	adds	r3, #192	; 0xc0
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800196e:	e031      	b.n	80019d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001970:	4a1b      	ldr	r2, [pc, #108]	; (80019e0 <__NVIC_SetPriority+0xd8>)
 8001972:	1dfb      	adds	r3, r7, #7
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	0019      	movs	r1, r3
 8001978:	230f      	movs	r3, #15
 800197a:	400b      	ands	r3, r1
 800197c:	3b08      	subs	r3, #8
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3306      	adds	r3, #6
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	18d3      	adds	r3, r2, r3
 8001986:	3304      	adds	r3, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	1dfa      	adds	r2, r7, #7
 800198c:	7812      	ldrb	r2, [r2, #0]
 800198e:	0011      	movs	r1, r2
 8001990:	2203      	movs	r2, #3
 8001992:	400a      	ands	r2, r1
 8001994:	00d2      	lsls	r2, r2, #3
 8001996:	21ff      	movs	r1, #255	; 0xff
 8001998:	4091      	lsls	r1, r2
 800199a:	000a      	movs	r2, r1
 800199c:	43d2      	mvns	r2, r2
 800199e:	401a      	ands	r2, r3
 80019a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	019b      	lsls	r3, r3, #6
 80019a6:	22ff      	movs	r2, #255	; 0xff
 80019a8:	401a      	ands	r2, r3
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	0018      	movs	r0, r3
 80019b0:	2303      	movs	r3, #3
 80019b2:	4003      	ands	r3, r0
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019b8:	4809      	ldr	r0, [pc, #36]	; (80019e0 <__NVIC_SetPriority+0xd8>)
 80019ba:	1dfb      	adds	r3, r7, #7
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	001c      	movs	r4, r3
 80019c0:	230f      	movs	r3, #15
 80019c2:	4023      	ands	r3, r4
 80019c4:	3b08      	subs	r3, #8
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	430a      	orrs	r2, r1
 80019ca:	3306      	adds	r3, #6
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	18c3      	adds	r3, r0, r3
 80019d0:	3304      	adds	r3, #4
 80019d2:	601a      	str	r2, [r3, #0]
}
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b003      	add	sp, #12
 80019da:	bd90      	pop	{r4, r7, pc}
 80019dc:	e000e100 	.word	0xe000e100
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	1e5a      	subs	r2, r3, #1
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	045b      	lsls	r3, r3, #17
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d301      	bcc.n	80019fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f8:	2301      	movs	r3, #1
 80019fa:	e010      	b.n	8001a1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <SysTick_Config+0x44>)
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	3a01      	subs	r2, #1
 8001a02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a04:	2301      	movs	r3, #1
 8001a06:	425b      	negs	r3, r3
 8001a08:	2103      	movs	r1, #3
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f7ff ff7c 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <SysTick_Config+0x44>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <SysTick_Config+0x44>)
 8001a18:	2207      	movs	r2, #7
 8001a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	0018      	movs	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b002      	add	sp, #8
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	e000e010 	.word	0xe000e010

08001a2c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	210f      	movs	r1, #15
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	1c02      	adds	r2, r0, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	0011      	movs	r1, r2
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b004      	add	sp, #16
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	1dfb      	adds	r3, r7, #7
 8001a60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a62:	1dfb      	adds	r3, r7, #7
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f7ff ff33 	bl	80018d4 <__NVIC_EnableIRQ>
}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b002      	add	sp, #8
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	0018      	movs	r0, r3
 8001a82:	f7ff ffaf 	bl	80019e4 <SysTick_Config>
 8001a86:	0003      	movs	r3, r0
}
 8001a88:	0018      	movs	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b002      	add	sp, #8
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e077      	b.n	8001b92 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a3d      	ldr	r2, [pc, #244]	; (8001b9c <HAL_DMA_Init+0x10c>)
 8001aa8:	4694      	mov	ip, r2
 8001aaa:	4463      	add	r3, ip
 8001aac:	2114      	movs	r1, #20
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7fe fb2a 	bl	8000108 <__udivsi3>
 8001ab4:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8001ab6:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2225      	movs	r2, #37	; 0x25
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4934      	ldr	r1, [pc, #208]	; (8001ba0 <HAL_DMA_Init+0x110>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6819      	ldr	r1, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f000 f9c3 	bl	8001e98 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	01db      	lsls	r3, r3, #7
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d102      	bne.n	8001b24 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	21ff      	movs	r1, #255	; 0xff
 8001b2e:	400a      	ands	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b3a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d011      	beq.n	8001b68 <HAL_DMA_Init+0xd8>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d80d      	bhi.n	8001b68 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f000 f9ce 	bl	8001ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	e008      	b.n	8001b7a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2225      	movs	r2, #37	; 0x25
 8001b84:	2101      	movs	r1, #1
 8001b86:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2224      	movs	r2, #36	; 0x24
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b002      	add	sp, #8
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	bffdfff8 	.word	0xbffdfff8
 8001ba0:	ffff800f 	.word	0xffff800f

08001ba4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb2:	2317      	movs	r3, #23
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2224      	movs	r2, #36	; 0x24
 8001bbe:	5c9b      	ldrb	r3, [r3, r2]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_DMA_Start_IT+0x24>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e070      	b.n	8001caa <HAL_DMA_Start_IT+0x106>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2224      	movs	r2, #36	; 0x24
 8001bcc:	2101      	movs	r1, #1
 8001bce:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2225      	movs	r2, #37	; 0x25
 8001bd4:	5c9b      	ldrb	r3, [r3, r2]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d157      	bne.n	8001c8c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2225      	movs	r2, #37	; 0x25
 8001be0:	2102      	movs	r1, #2
 8001be2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	438a      	bics	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 f909 	bl	8001e18 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d008      	beq.n	8001c20 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	210e      	movs	r1, #14
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	e00f      	b.n	8001c40 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2104      	movs	r1, #4
 8001c2c:	438a      	bics	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	210a      	movs	r1, #10
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	025b      	lsls	r3, r3, #9
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d008      	beq.n	8001c60 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	2180      	movs	r1, #128	; 0x80
 8001c5a:	0049      	lsls	r1, r1, #1
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c72:	2180      	movs	r1, #128	; 0x80
 8001c74:	0049      	lsls	r1, r1, #1
 8001c76:	430a      	orrs	r2, r1
 8001c78:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2101      	movs	r1, #1
 8001c86:	430a      	orrs	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e007      	b.n	8001c9c <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2224      	movs	r2, #36	; 0x24
 8001c90:	2100      	movs	r1, #0
 8001c92:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c94:	2317      	movs	r3, #23
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	2202      	movs	r2, #2
 8001c9a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2224      	movs	r2, #36	; 0x24
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	5499      	strb	r1, [r3, r2]

  return status;
 8001ca4:	2317      	movs	r3, #23
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	781b      	ldrb	r3, [r3, #0]
}
 8001caa:	0018      	movs	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b006      	add	sp, #24
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8001cbc:	4b55      	ldr	r3, [pc, #340]	; (8001e14 <HAL_DMA_IRQHandler+0x160>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	221c      	movs	r2, #28
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	0013      	movs	r3, r2
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d027      	beq.n	8001d2e <HAL_DMA_IRQHandler+0x7a>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d023      	beq.n	8001d2e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2220      	movs	r2, #32
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d107      	bne.n	8001d02 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2104      	movs	r1, #4
 8001cfe:	438a      	bics	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8001d02:	4b44      	ldr	r3, [pc, #272]	; (8001e14 <HAL_DMA_IRQHandler+0x160>)
 8001d04:	6859      	ldr	r1, [r3, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	221c      	movs	r2, #28
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2204      	movs	r2, #4
 8001d10:	409a      	lsls	r2, r3
 8001d12:	4b40      	ldr	r3, [pc, #256]	; (8001e14 <HAL_DMA_IRQHandler+0x160>)
 8001d14:	430a      	orrs	r2, r1
 8001d16:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d100      	bne.n	8001d22 <HAL_DMA_IRQHandler+0x6e>
 8001d20:	e073      	b.n	8001e0a <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	0010      	movs	r0, r2
 8001d2a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d2c:	e06d      	b.n	8001e0a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	221c      	movs	r2, #28
 8001d34:	4013      	ands	r3, r2
 8001d36:	2202      	movs	r2, #2
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	0013      	movs	r3, r2
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d02e      	beq.n	8001da0 <HAL_DMA_IRQHandler+0xec>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2202      	movs	r2, #2
 8001d46:	4013      	ands	r3, r2
 8001d48:	d02a      	beq.n	8001da0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2220      	movs	r2, #32
 8001d52:	4013      	ands	r3, r2
 8001d54:	d10b      	bne.n	8001d6e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	210a      	movs	r1, #10
 8001d62:	438a      	bics	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2225      	movs	r2, #37	; 0x25
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8001d6e:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <HAL_DMA_IRQHandler+0x160>)
 8001d70:	6859      	ldr	r1, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	221c      	movs	r2, #28
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <HAL_DMA_IRQHandler+0x160>)
 8001d80:	430a      	orrs	r2, r1
 8001d82:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2224      	movs	r2, #36	; 0x24
 8001d88:	2100      	movs	r1, #0
 8001d8a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d03a      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	0010      	movs	r0, r2
 8001d9c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001d9e:	e034      	b.n	8001e0a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	221c      	movs	r2, #28
 8001da6:	4013      	ands	r3, r2
 8001da8:	2208      	movs	r2, #8
 8001daa:	409a      	lsls	r2, r3
 8001dac:	0013      	movs	r3, r2
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4013      	ands	r3, r2
 8001db2:	d02b      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x158>
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2208      	movs	r2, #8
 8001db8:	4013      	ands	r3, r2
 8001dba:	d027      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	210e      	movs	r1, #14
 8001dc8:	438a      	bics	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <HAL_DMA_IRQHandler+0x160>)
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	221c      	movs	r2, #28
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2201      	movs	r2, #1
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <HAL_DMA_IRQHandler+0x160>)
 8001dde:	430a      	orrs	r2, r1
 8001de0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2225      	movs	r2, #37	; 0x25
 8001dec:	2101      	movs	r1, #1
 8001dee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2224      	movs	r2, #36	; 0x24
 8001df4:	2100      	movs	r1, #0
 8001df6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	0010      	movs	r0, r2
 8001e08:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	46c0      	nop			; (mov r8, r8)
}
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b004      	add	sp, #16
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40020000 	.word	0x40020000

08001e18 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e2e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d004      	beq.n	8001e42 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001e40:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001e42:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <DMA_SetConfig+0x7c>)
 8001e44:	6859      	ldr	r1, [r3, #4]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	221c      	movs	r2, #28
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2201      	movs	r2, #1
 8001e50:	409a      	lsls	r2, r3
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <DMA_SetConfig+0x7c>)
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d108      	bne.n	8001e7a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e78:	e007      	b.n	8001e8a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	60da      	str	r2, [r3, #12]
}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b004      	add	sp, #16
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	40020000 	.word	0x40020000

08001e98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	001a      	movs	r2, r3
 8001ea6:	23ff      	movs	r3, #255	; 0xff
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	3b08      	subs	r3, #8
 8001eac:	2114      	movs	r1, #20
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f7fe f92a 	bl	8000108 <__udivsi3>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001ec0:	4694      	mov	ip, r2
 8001ec2:	4463      	add	r3, ip
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	001a      	movs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	645a      	str	r2, [r3, #68]	; 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a07      	ldr	r2, [pc, #28]	; (8001eec <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001ed0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	221c      	movs	r2, #28
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2201      	movs	r2, #1
 8001eda:	409a      	lsls	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b004      	add	sp, #16
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	10008200 	.word	0x10008200
 8001eec:	40020880 	.word	0x40020880

08001ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	22ff      	movs	r2, #255	; 0xff
 8001efe:	4013      	ands	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f06:	4694      	mov	ip, r2
 8001f08:	4463      	add	r3, ip
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	651a      	str	r2, [r3, #80]	; 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a07      	ldr	r2, [pc, #28]	; (8001f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2201      	movs	r2, #1
 8001f22:	409a      	lsls	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001f28:	46c0      	nop			; (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b004      	add	sp, #16
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	1000823f 	.word	0x1000823f
 8001f34:	40020940 	.word	0x40020940

08001f38 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f46:	e153      	b.n	80021f0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4091      	lsls	r1, r2
 8001f52:	000a      	movs	r2, r1
 8001f54:	4013      	ands	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d100      	bne.n	8001f60 <HAL_GPIO_Init+0x28>
 8001f5e:	e144      	b.n	80021ea <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x38>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b12      	cmp	r3, #18
 8001f6e:	d125      	bne.n	8001fbc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	08da      	lsrs	r2, r3, #3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3208      	adds	r2, #8
 8001f78:	0092      	lsls	r2, r2, #2
 8001f7a:	58d3      	ldr	r3, [r2, r3]
 8001f7c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2207      	movs	r2, #7
 8001f82:	4013      	ands	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	220f      	movs	r2, #15
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	0013      	movs	r3, r2
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	4013      	ands	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	220f      	movs	r2, #15
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	2107      	movs	r1, #7
 8001fa0:	400b      	ands	r3, r1
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	0013      	movs	r3, r2
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	0092      	lsls	r2, r2, #2
 8001fb8:	6979      	ldr	r1, [r7, #20]
 8001fba:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	0013      	movs	r3, r2
 8001fcc:	43da      	mvns	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2203      	movs	r2, #3
 8001fda:	401a      	ands	r2, r3
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	0013      	movs	r3, r2
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d00b      	beq.n	8002010 <HAL_GPIO_Init+0xd8>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d007      	beq.n	8002010 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002004:	2b11      	cmp	r3, #17
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b12      	cmp	r3, #18
 800200e:	d130      	bne.n	8002072 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	409a      	lsls	r2, r3
 800201e:	0013      	movs	r3, r2
 8002020:	43da      	mvns	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	4013      	ands	r3, r2
 8002026:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	409a      	lsls	r2, r3
 8002032:	0013      	movs	r3, r2
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	4313      	orrs	r3, r2
 8002038:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002046:	2201      	movs	r2, #1
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	409a      	lsls	r2, r3
 800204c:	0013      	movs	r3, r2
 800204e:	43da      	mvns	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	4013      	ands	r3, r2
 8002054:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	2201      	movs	r2, #1
 800205e:	401a      	ands	r2, r3
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	409a      	lsls	r2, r3
 8002064:	0013      	movs	r3, r2
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b03      	cmp	r3, #3
 8002078:	d017      	beq.n	80020aa <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	2203      	movs	r2, #3
 8002086:	409a      	lsls	r2, r3
 8002088:	0013      	movs	r3, r2
 800208a:	43da      	mvns	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	4013      	ands	r3, r2
 8002090:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	409a      	lsls	r2, r3
 800209c:	0013      	movs	r3, r2
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	055b      	lsls	r3, r3, #21
 80020b2:	4013      	ands	r3, r2
 80020b4:	d100      	bne.n	80020b8 <HAL_GPIO_Init+0x180>
 80020b6:	e098      	b.n	80021ea <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80020b8:	4a53      	ldr	r2, [pc, #332]	; (8002208 <HAL_GPIO_Init+0x2d0>)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	3318      	adds	r3, #24
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	589b      	ldr	r3, [r3, r2]
 80020c4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2203      	movs	r2, #3
 80020ca:	4013      	ands	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	220f      	movs	r2, #15
 80020d0:	409a      	lsls	r2, r3
 80020d2:	0013      	movs	r3, r2
 80020d4:	43da      	mvns	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	4013      	ands	r3, r2
 80020da:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	23a0      	movs	r3, #160	; 0xa0
 80020e0:	05db      	lsls	r3, r3, #23
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d019      	beq.n	800211a <HAL_GPIO_Init+0x1e2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a48      	ldr	r2, [pc, #288]	; (800220c <HAL_GPIO_Init+0x2d4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0x1de>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a47      	ldr	r2, [pc, #284]	; (8002210 <HAL_GPIO_Init+0x2d8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00d      	beq.n	8002112 <HAL_GPIO_Init+0x1da>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a46      	ldr	r2, [pc, #280]	; (8002214 <HAL_GPIO_Init+0x2dc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d007      	beq.n	800210e <HAL_GPIO_Init+0x1d6>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a45      	ldr	r2, [pc, #276]	; (8002218 <HAL_GPIO_Init+0x2e0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d101      	bne.n	800210a <HAL_GPIO_Init+0x1d2>
 8002106:	2304      	movs	r3, #4
 8002108:	e008      	b.n	800211c <HAL_GPIO_Init+0x1e4>
 800210a:	2305      	movs	r3, #5
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x1e4>
 800210e:	2303      	movs	r3, #3
 8002110:	e004      	b.n	800211c <HAL_GPIO_Init+0x1e4>
 8002112:	2302      	movs	r3, #2
 8002114:	e002      	b.n	800211c <HAL_GPIO_Init+0x1e4>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_GPIO_Init+0x1e4>
 800211a:	2300      	movs	r3, #0
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	2103      	movs	r1, #3
 8002120:	400a      	ands	r2, r1
 8002122:	00d2      	lsls	r2, r2, #3
 8002124:	4093      	lsls	r3, r2
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	4313      	orrs	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800212c:	4936      	ldr	r1, [pc, #216]	; (8002208 <HAL_GPIO_Init+0x2d0>)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	3318      	adds	r3, #24
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800213a:	4a33      	ldr	r2, [pc, #204]	; (8002208 <HAL_GPIO_Init+0x2d0>)
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	58d3      	ldr	r3, [r2, r3]
 8002140:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	43da      	mvns	r2, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	4013      	ands	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	025b      	lsls	r3, r3, #9
 8002154:	4013      	ands	r3, r2
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4313      	orrs	r3, r2
 800215e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002160:	4929      	ldr	r1, [pc, #164]	; (8002208 <HAL_GPIO_Init+0x2d0>)
 8002162:	2280      	movs	r2, #128	; 0x80
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002168:	4a27      	ldr	r2, [pc, #156]	; (8002208 <HAL_GPIO_Init+0x2d0>)
 800216a:	2384      	movs	r3, #132	; 0x84
 800216c:	58d3      	ldr	r3, [r2, r3]
 800216e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	43da      	mvns	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	4013      	ands	r3, r2
 8002178:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	029b      	lsls	r3, r3, #10
 8002182:	4013      	ands	r3, r2
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800218e:	491e      	ldr	r1, [pc, #120]	; (8002208 <HAL_GPIO_Init+0x2d0>)
 8002190:	2284      	movs	r2, #132	; 0x84
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002196:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <HAL_GPIO_Init+0x2d0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	43da      	mvns	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	4013      	ands	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	035b      	lsls	r3, r3, #13
 80021ae:	4013      	ands	r3, r2
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80021ba:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_GPIO_Init+0x2d0>)
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <HAL_GPIO_Init+0x2d0>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	43da      	mvns	r2, r3
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	4013      	ands	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	039b      	lsls	r3, r3, #14
 80021d8:	4013      	ands	r3, r2
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <HAL_GPIO_Init+0x2d0>)
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	3301      	adds	r3, #1
 80021ee:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	40da      	lsrs	r2, r3
 80021f8:	1e13      	subs	r3, r2, #0
 80021fa:	d000      	beq.n	80021fe <HAL_GPIO_Init+0x2c6>
 80021fc:	e6a4      	b.n	8001f48 <HAL_GPIO_Init+0x10>
  }
}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b006      	add	sp, #24
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021800 	.word	0x40021800
 800220c:	50000400 	.word	0x50000400
 8002210:	50000800 	.word	0x50000800
 8002214:	50000c00 	.word	0x50000c00
 8002218:	50001400 	.word	0x50001400

0800221c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e1e5      	b.n	80025fa <HAL_RCC_OscConfig+0x3de>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2201      	movs	r2, #1
 8002234:	4013      	ands	r3, r2
 8002236:	d100      	bne.n	800223a <HAL_RCC_OscConfig+0x1e>
 8002238:	e06f      	b.n	800231a <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800223a:	4bc4      	ldr	r3, [pc, #784]	; (800254c <HAL_RCC_OscConfig+0x330>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2238      	movs	r2, #56	; 0x38
 8002240:	4013      	ands	r3, r2
 8002242:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b08      	cmp	r3, #8
 8002248:	d10b      	bne.n	8002262 <HAL_RCC_OscConfig+0x46>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224a:	4bc0      	ldr	r3, [pc, #768]	; (800254c <HAL_RCC_OscConfig+0x330>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	029b      	lsls	r3, r3, #10
 8002252:	4013      	ands	r3, r2
 8002254:	d061      	beq.n	800231a <HAL_RCC_OscConfig+0xfe>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d15d      	bne.n	800231a <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e1cb      	b.n	80025fa <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	025b      	lsls	r3, r3, #9
 800226a:	429a      	cmp	r2, r3
 800226c:	d107      	bne.n	800227e <HAL_RCC_OscConfig+0x62>
 800226e:	4bb7      	ldr	r3, [pc, #732]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4bb6      	ldr	r3, [pc, #728]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002274:	2180      	movs	r1, #128	; 0x80
 8002276:	0249      	lsls	r1, r1, #9
 8002278:	430a      	orrs	r2, r1
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e020      	b.n	80022c0 <HAL_RCC_OscConfig+0xa4>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	23a0      	movs	r3, #160	; 0xa0
 8002284:	02db      	lsls	r3, r3, #11
 8002286:	429a      	cmp	r2, r3
 8002288:	d10e      	bne.n	80022a8 <HAL_RCC_OscConfig+0x8c>
 800228a:	4bb0      	ldr	r3, [pc, #704]	; (800254c <HAL_RCC_OscConfig+0x330>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4baf      	ldr	r3, [pc, #700]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002290:	2180      	movs	r1, #128	; 0x80
 8002292:	02c9      	lsls	r1, r1, #11
 8002294:	430a      	orrs	r2, r1
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	4bac      	ldr	r3, [pc, #688]	; (800254c <HAL_RCC_OscConfig+0x330>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4bab      	ldr	r3, [pc, #684]	; (800254c <HAL_RCC_OscConfig+0x330>)
 800229e:	2180      	movs	r1, #128	; 0x80
 80022a0:	0249      	lsls	r1, r1, #9
 80022a2:	430a      	orrs	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e00b      	b.n	80022c0 <HAL_RCC_OscConfig+0xa4>
 80022a8:	4ba8      	ldr	r3, [pc, #672]	; (800254c <HAL_RCC_OscConfig+0x330>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4ba7      	ldr	r3, [pc, #668]	; (800254c <HAL_RCC_OscConfig+0x330>)
 80022ae:	49a8      	ldr	r1, [pc, #672]	; (8002550 <HAL_RCC_OscConfig+0x334>)
 80022b0:	400a      	ands	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	4ba5      	ldr	r3, [pc, #660]	; (800254c <HAL_RCC_OscConfig+0x330>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4ba4      	ldr	r3, [pc, #656]	; (800254c <HAL_RCC_OscConfig+0x330>)
 80022ba:	49a6      	ldr	r1, [pc, #664]	; (8002554 <HAL_RCC_OscConfig+0x338>)
 80022bc:	400a      	ands	r2, r1
 80022be:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d014      	beq.n	80022f2 <HAL_RCC_OscConfig+0xd6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe faa8 	bl	800081c <HAL_GetTick>
 80022cc:	0003      	movs	r3, r0
 80022ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d2:	f7fe faa3 	bl	800081c <HAL_GetTick>
 80022d6:	0002      	movs	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b64      	cmp	r3, #100	; 0x64
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e18a      	b.n	80025fa <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e4:	4b99      	ldr	r3, [pc, #612]	; (800254c <HAL_RCC_OscConfig+0x330>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	029b      	lsls	r3, r3, #10
 80022ec:	4013      	ands	r3, r2
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0xb6>
 80022f0:	e013      	b.n	800231a <HAL_RCC_OscConfig+0xfe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7fe fa93 	bl	800081c <HAL_GetTick>
 80022f6:	0003      	movs	r3, r0
 80022f8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022fc:	f7fe fa8e 	bl	800081c <HAL_GetTick>
 8002300:	0002      	movs	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e175      	b.n	80025fa <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230e:	4b8f      	ldr	r3, [pc, #572]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	029b      	lsls	r3, r3, #10
 8002316:	4013      	ands	r3, r2
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2202      	movs	r2, #2
 8002320:	4013      	ands	r3, r2
 8002322:	d100      	bne.n	8002326 <HAL_RCC_OscConfig+0x10a>
 8002324:	e08c      	b.n	8002440 <HAL_RCC_OscConfig+0x224>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002326:	4b89      	ldr	r3, [pc, #548]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2238      	movs	r2, #56	; 0x38
 800232c:	4013      	ands	r3, r2
 800232e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d135      	bne.n	80023a2 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002336:	4b85      	ldr	r3, [pc, #532]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4013      	ands	r3, r2
 8002340:	d005      	beq.n	800234e <HAL_RCC_OscConfig+0x132>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e155      	b.n	80025fa <HAL_RCC_OscConfig+0x3de>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234e:	4b7f      	ldr	r3, [pc, #508]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4a81      	ldr	r2, [pc, #516]	; (8002558 <HAL_RCC_OscConfig+0x33c>)
 8002354:	4013      	ands	r3, r2
 8002356:	0019      	movs	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	021a      	lsls	r2, r3, #8
 800235e:	4b7b      	ldr	r3, [pc, #492]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002360:	430a      	orrs	r2, r1
 8002362:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d112      	bne.n	8002390 <HAL_RCC_OscConfig+0x174>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800236a:	4b78      	ldr	r3, [pc, #480]	; (800254c <HAL_RCC_OscConfig+0x330>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a7b      	ldr	r2, [pc, #492]	; (800255c <HAL_RCC_OscConfig+0x340>)
 8002370:	4013      	ands	r3, r2
 8002372:	0019      	movs	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	4b74      	ldr	r3, [pc, #464]	; (800254c <HAL_RCC_OscConfig+0x330>)
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800237e:	4b73      	ldr	r3, [pc, #460]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	0adb      	lsrs	r3, r3, #11
 8002384:	2207      	movs	r2, #7
 8002386:	4013      	ands	r3, r2
 8002388:	4a75      	ldr	r2, [pc, #468]	; (8002560 <HAL_RCC_OscConfig+0x344>)
 800238a:	40da      	lsrs	r2, r3
 800238c:	4b75      	ldr	r3, [pc, #468]	; (8002564 <HAL_RCC_OscConfig+0x348>)
 800238e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002390:	4b75      	ldr	r3, [pc, #468]	; (8002568 <HAL_RCC_OscConfig+0x34c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0018      	movs	r0, r3
 8002396:	f7fe f9e7 	bl	8000768 <HAL_InitTick>
 800239a:	1e03      	subs	r3, r0, #0
 800239c:	d050      	beq.n	8002440 <HAL_RCC_OscConfig+0x224>
        {
          return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e12b      	b.n	80025fa <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d030      	beq.n	800240c <HAL_RCC_OscConfig+0x1f0>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023aa:	4b68      	ldr	r3, [pc, #416]	; (800254c <HAL_RCC_OscConfig+0x330>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a6b      	ldr	r2, [pc, #428]	; (800255c <HAL_RCC_OscConfig+0x340>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	0019      	movs	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	4b64      	ldr	r3, [pc, #400]	; (800254c <HAL_RCC_OscConfig+0x330>)
 80023ba:	430a      	orrs	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80023be:	4b63      	ldr	r3, [pc, #396]	; (800254c <HAL_RCC_OscConfig+0x330>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4b62      	ldr	r3, [pc, #392]	; (800254c <HAL_RCC_OscConfig+0x330>)
 80023c4:	2180      	movs	r1, #128	; 0x80
 80023c6:	0049      	lsls	r1, r1, #1
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe fa26 	bl	800081c <HAL_GetTick>
 80023d0:	0003      	movs	r3, r0
 80023d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d6:	f7fe fa21 	bl	800081c <HAL_GetTick>
 80023da:	0002      	movs	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e108      	b.n	80025fa <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023e8:	4b58      	ldr	r3, [pc, #352]	; (800254c <HAL_RCC_OscConfig+0x330>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4013      	ands	r3, r2
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f4:	4b55      	ldr	r3, [pc, #340]	; (800254c <HAL_RCC_OscConfig+0x330>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a57      	ldr	r2, [pc, #348]	; (8002558 <HAL_RCC_OscConfig+0x33c>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	0019      	movs	r1, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	021a      	lsls	r2, r3, #8
 8002404:	4b51      	ldr	r3, [pc, #324]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002406:	430a      	orrs	r2, r1
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	e019      	b.n	8002440 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800240c:	4b4f      	ldr	r3, [pc, #316]	; (800254c <HAL_RCC_OscConfig+0x330>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b4e      	ldr	r3, [pc, #312]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002412:	4956      	ldr	r1, [pc, #344]	; (800256c <HAL_RCC_OscConfig+0x350>)
 8002414:	400a      	ands	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe fa00 	bl	800081c <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x218>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002422:	f7fe f9fb 	bl	800081c <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e0e2      	b.n	80025fa <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002434:	4b45      	ldr	r3, [pc, #276]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	4013      	ands	r3, r2
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2208      	movs	r2, #8
 8002446:	4013      	ands	r3, r2
 8002448:	d047      	beq.n	80024da <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800244a:	4b40      	ldr	r3, [pc, #256]	; (800254c <HAL_RCC_OscConfig+0x330>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2238      	movs	r2, #56	; 0x38
 8002450:	4013      	ands	r3, r2
 8002452:	2b18      	cmp	r3, #24
 8002454:	d10a      	bne.n	800246c <HAL_RCC_OscConfig+0x250>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002456:	4b3d      	ldr	r3, [pc, #244]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245a:	2202      	movs	r2, #2
 800245c:	4013      	ands	r3, r2
 800245e:	d03c      	beq.n	80024da <HAL_RCC_OscConfig+0x2be>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d138      	bne.n	80024da <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0c6      	b.n	80025fa <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d019      	beq.n	80024a8 <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002474:	4b35      	ldr	r3, [pc, #212]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002476:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002478:	4b34      	ldr	r3, [pc, #208]	; (800254c <HAL_RCC_OscConfig+0x330>)
 800247a:	2101      	movs	r1, #1
 800247c:	430a      	orrs	r2, r1
 800247e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7fe f9cc 	bl	800081c <HAL_GetTick>
 8002484:	0003      	movs	r3, r0
 8002486:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248a:	f7fe f9c7 	bl	800081c <HAL_GetTick>
 800248e:	0002      	movs	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e0ae      	b.n	80025fa <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800249c:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HAL_RCC_OscConfig+0x330>)
 800249e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a0:	2202      	movs	r2, #2
 80024a2:	4013      	ands	r3, r2
 80024a4:	d0f1      	beq.n	800248a <HAL_RCC_OscConfig+0x26e>
 80024a6:	e018      	b.n	80024da <HAL_RCC_OscConfig+0x2be>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80024a8:	4b28      	ldr	r3, [pc, #160]	; (800254c <HAL_RCC_OscConfig+0x330>)
 80024aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ac:	4b27      	ldr	r3, [pc, #156]	; (800254c <HAL_RCC_OscConfig+0x330>)
 80024ae:	2101      	movs	r1, #1
 80024b0:	438a      	bics	r2, r1
 80024b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe f9b2 	bl	800081c <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024be:	f7fe f9ad 	bl	800081c <HAL_GetTick>
 80024c2:	0002      	movs	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e094      	b.n	80025fa <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80024d0:	4b1e      	ldr	r3, [pc, #120]	; (800254c <HAL_RCC_OscConfig+0x330>)
 80024d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d4:	2202      	movs	r2, #2
 80024d6:	4013      	ands	r3, r2
 80024d8:	d1f1      	bne.n	80024be <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2204      	movs	r2, #4
 80024e0:	4013      	ands	r3, r2
 80024e2:	d100      	bne.n	80024e6 <HAL_RCC_OscConfig+0x2ca>
 80024e4:	e088      	b.n	80025f8 <HAL_RCC_OscConfig+0x3dc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024e6:	230f      	movs	r3, #15
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80024ee:	4b17      	ldr	r3, [pc, #92]	; (800254c <HAL_RCC_OscConfig+0x330>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2238      	movs	r2, #56	; 0x38
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x2f8>
    {
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80024fa:	4b14      	ldr	r3, [pc, #80]	; (800254c <HAL_RCC_OscConfig+0x330>)
 80024fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fe:	2202      	movs	r2, #2
 8002500:	4013      	ands	r3, r2
 8002502:	d100      	bne.n	8002506 <HAL_RCC_OscConfig+0x2ea>
 8002504:	e078      	b.n	80025f8 <HAL_RCC_OscConfig+0x3dc>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d000      	beq.n	8002510 <HAL_RCC_OscConfig+0x2f4>
 800250e:	e073      	b.n	80025f8 <HAL_RCC_OscConfig+0x3dc>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e072      	b.n	80025fa <HAL_RCC_OscConfig+0x3de>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d106      	bne.n	800252a <HAL_RCC_OscConfig+0x30e>
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_OscConfig+0x330>)
 800251e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002522:	2101      	movs	r1, #1
 8002524:	430a      	orrs	r2, r1
 8002526:	65da      	str	r2, [r3, #92]	; 0x5c
 8002528:	e02e      	b.n	8002588 <HAL_RCC_OscConfig+0x36c>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2b05      	cmp	r3, #5
 8002530:	d11e      	bne.n	8002570 <HAL_RCC_OscConfig+0x354>
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002534:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002536:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002538:	2104      	movs	r1, #4
 800253a:	430a      	orrs	r2, r1
 800253c:	65da      	str	r2, [r3, #92]	; 0x5c
 800253e:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002540:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002542:	4b02      	ldr	r3, [pc, #8]	; (800254c <HAL_RCC_OscConfig+0x330>)
 8002544:	2101      	movs	r1, #1
 8002546:	430a      	orrs	r2, r1
 8002548:	65da      	str	r2, [r3, #92]	; 0x5c
 800254a:	e01d      	b.n	8002588 <HAL_RCC_OscConfig+0x36c>
 800254c:	40021000 	.word	0x40021000
 8002550:	fffeffff 	.word	0xfffeffff
 8002554:	fffbffff 	.word	0xfffbffff
 8002558:	ffff80ff 	.word	0xffff80ff
 800255c:	ffffc7ff 	.word	0xffffc7ff
 8002560:	02dc6c00 	.word	0x02dc6c00
 8002564:	20000000 	.word	0x20000000
 8002568:	20000004 	.word	0x20000004
 800256c:	fffffeff 	.word	0xfffffeff
 8002570:	4b24      	ldr	r3, [pc, #144]	; (8002604 <HAL_RCC_OscConfig+0x3e8>)
 8002572:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002574:	4b23      	ldr	r3, [pc, #140]	; (8002604 <HAL_RCC_OscConfig+0x3e8>)
 8002576:	2101      	movs	r1, #1
 8002578:	438a      	bics	r2, r1
 800257a:	65da      	str	r2, [r3, #92]	; 0x5c
 800257c:	4b21      	ldr	r3, [pc, #132]	; (8002604 <HAL_RCC_OscConfig+0x3e8>)
 800257e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002580:	4b20      	ldr	r3, [pc, #128]	; (8002604 <HAL_RCC_OscConfig+0x3e8>)
 8002582:	2104      	movs	r1, #4
 8002584:	438a      	bics	r2, r1
 8002586:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d014      	beq.n	80025ba <HAL_RCC_OscConfig+0x39e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe f944 	bl	800081c <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002598:	e009      	b.n	80025ae <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259a:	f7fe f93f 	bl	800081c <HAL_GetTick>
 800259e:	0002      	movs	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	4a18      	ldr	r2, [pc, #96]	; (8002608 <HAL_RCC_OscConfig+0x3ec>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e025      	b.n	80025fa <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_RCC_OscConfig+0x3e8>)
 80025b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x37e>
 80025b8:	e013      	b.n	80025e2 <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe f92f 	bl	800081c <HAL_GetTick>
 80025be:	0003      	movs	r3, r0
 80025c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80025c2:	e009      	b.n	80025d8 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f7fe f92a 	bl	800081c <HAL_GetTick>
 80025c8:	0002      	movs	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <HAL_RCC_OscConfig+0x3ec>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e010      	b.n	80025fa <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80025d8:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_RCC_OscConfig+0x3e8>)
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	2202      	movs	r2, #2
 80025de:	4013      	ands	r3, r2
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x3a8>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80025e2:	230f      	movs	r3, #15
 80025e4:	18fb      	adds	r3, r7, r3
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <HAL_RCC_OscConfig+0x3dc>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_RCC_OscConfig+0x3e8>)
 80025ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <HAL_RCC_OscConfig+0x3e8>)
 80025f2:	4906      	ldr	r1, [pc, #24]	; (800260c <HAL_RCC_OscConfig+0x3f0>)
 80025f4:	400a      	ands	r2, r1
 80025f6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	0018      	movs	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b006      	add	sp, #24
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	40021000 	.word	0x40021000
 8002608:	00001388 	.word	0x00001388
 800260c:	efffffff 	.word	0xefffffff

08002610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0e9      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002624:	4b76      	ldr	r3, [pc, #472]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2207      	movs	r2, #7
 800262a:	4013      	ands	r3, r2
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d91e      	bls.n	8002670 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002632:	4b73      	ldr	r3, [pc, #460]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2207      	movs	r2, #7
 8002638:	4393      	bics	r3, r2
 800263a:	0019      	movs	r1, r3
 800263c:	4b70      	ldr	r3, [pc, #448]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002644:	f7fe f8ea 	bl	800081c <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800264c:	e009      	b.n	8002662 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264e:	f7fe f8e5 	bl	800081c <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	4a6a      	ldr	r2, [pc, #424]	; (8002804 <HAL_RCC_ClockConfig+0x1f4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e0ca      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002662:	4b67      	ldr	r3, [pc, #412]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2207      	movs	r2, #7
 8002668:	4013      	ands	r3, r2
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d1ee      	bne.n	800264e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2202      	movs	r2, #2
 8002676:	4013      	ands	r3, r2
 8002678:	d017      	beq.n	80026aa <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2204      	movs	r2, #4
 8002680:	4013      	ands	r3, r2
 8002682:	d008      	beq.n	8002696 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002684:	4b60      	ldr	r3, [pc, #384]	; (8002808 <HAL_RCC_ClockConfig+0x1f8>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4a60      	ldr	r2, [pc, #384]	; (800280c <HAL_RCC_ClockConfig+0x1fc>)
 800268a:	401a      	ands	r2, r3
 800268c:	4b5e      	ldr	r3, [pc, #376]	; (8002808 <HAL_RCC_ClockConfig+0x1f8>)
 800268e:	21b0      	movs	r1, #176	; 0xb0
 8002690:	0109      	lsls	r1, r1, #4
 8002692:	430a      	orrs	r2, r1
 8002694:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002696:	4b5c      	ldr	r3, [pc, #368]	; (8002808 <HAL_RCC_ClockConfig+0x1f8>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	4a5d      	ldr	r2, [pc, #372]	; (8002810 <HAL_RCC_ClockConfig+0x200>)
 800269c:	4013      	ands	r3, r2
 800269e:	0019      	movs	r1, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	4b58      	ldr	r3, [pc, #352]	; (8002808 <HAL_RCC_ClockConfig+0x1f8>)
 80026a6:	430a      	orrs	r2, r1
 80026a8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2201      	movs	r2, #1
 80026b0:	4013      	ands	r3, r2
 80026b2:	d055      	beq.n	8002760 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80026b4:	4b54      	ldr	r3, [pc, #336]	; (8002808 <HAL_RCC_ClockConfig+0x1f8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	221c      	movs	r2, #28
 80026ba:	4393      	bics	r3, r2
 80026bc:	0019      	movs	r1, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	4b51      	ldr	r3, [pc, #324]	; (8002808 <HAL_RCC_ClockConfig+0x1f8>)
 80026c4:	430a      	orrs	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d107      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026d0:	4b4d      	ldr	r3, [pc, #308]	; (8002808 <HAL_RCC_ClockConfig+0x1f8>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	029b      	lsls	r3, r3, #10
 80026d8:	4013      	ands	r3, r2
 80026da:	d11f      	bne.n	800271c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e08b      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e8:	4b47      	ldr	r3, [pc, #284]	; (8002808 <HAL_RCC_ClockConfig+0x1f8>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4013      	ands	r3, r2
 80026f2:	d113      	bne.n	800271c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e07f      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d106      	bne.n	800270e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002700:	4b41      	ldr	r3, [pc, #260]	; (8002808 <HAL_RCC_ClockConfig+0x1f8>)
 8002702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002704:	2202      	movs	r2, #2
 8002706:	4013      	ands	r3, r2
 8002708:	d108      	bne.n	800271c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e074      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800270e:	4b3e      	ldr	r3, [pc, #248]	; (8002808 <HAL_RCC_ClockConfig+0x1f8>)
 8002710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002712:	2202      	movs	r2, #2
 8002714:	4013      	ands	r3, r2
 8002716:	d101      	bne.n	800271c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e06d      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800271c:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <HAL_RCC_ClockConfig+0x1f8>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2207      	movs	r2, #7
 8002722:	4393      	bics	r3, r2
 8002724:	0019      	movs	r1, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	4b37      	ldr	r3, [pc, #220]	; (8002808 <HAL_RCC_ClockConfig+0x1f8>)
 800272c:	430a      	orrs	r2, r1
 800272e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002730:	f7fe f874 	bl	800081c <HAL_GetTick>
 8002734:	0003      	movs	r3, r0
 8002736:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002738:	e009      	b.n	800274e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273a:	f7fe f86f 	bl	800081c <HAL_GetTick>
 800273e:	0002      	movs	r2, r0
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	4a2f      	ldr	r2, [pc, #188]	; (8002804 <HAL_RCC_ClockConfig+0x1f4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e054      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	4b2e      	ldr	r3, [pc, #184]	; (8002808 <HAL_RCC_ClockConfig+0x1f8>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2238      	movs	r2, #56	; 0x38
 8002754:	401a      	ands	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	429a      	cmp	r2, r3
 800275e:	d1ec      	bne.n	800273a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002760:	4b27      	ldr	r3, [pc, #156]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2207      	movs	r2, #7
 8002766:	4013      	ands	r3, r2
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d21e      	bcs.n	80027ac <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b24      	ldr	r3, [pc, #144]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2207      	movs	r2, #7
 8002774:	4393      	bics	r3, r2
 8002776:	0019      	movs	r1, r3
 8002778:	4b21      	ldr	r3, [pc, #132]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002780:	f7fe f84c 	bl	800081c <HAL_GetTick>
 8002784:	0003      	movs	r3, r0
 8002786:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002788:	e009      	b.n	800279e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278a:	f7fe f847 	bl	800081c <HAL_GetTick>
 800278e:	0002      	movs	r2, r0
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	4a1b      	ldr	r2, [pc, #108]	; (8002804 <HAL_RCC_ClockConfig+0x1f4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e02c      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800279e:	4b18      	ldr	r3, [pc, #96]	; (8002800 <HAL_RCC_ClockConfig+0x1f0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2207      	movs	r2, #7
 80027a4:	4013      	ands	r3, r2
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d1ee      	bne.n	800278a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2204      	movs	r2, #4
 80027b2:	4013      	ands	r3, r2
 80027b4:	d009      	beq.n	80027ca <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80027b6:	4b14      	ldr	r3, [pc, #80]	; (8002808 <HAL_RCC_ClockConfig+0x1f8>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	4a16      	ldr	r2, [pc, #88]	; (8002814 <HAL_RCC_ClockConfig+0x204>)
 80027bc:	4013      	ands	r3, r2
 80027be:	0019      	movs	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <HAL_RCC_ClockConfig+0x1f8>)
 80027c6:	430a      	orrs	r2, r1
 80027c8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80027ca:	f000 f82b 	bl	8002824 <HAL_RCC_GetSysClockFreq>
 80027ce:	0001      	movs	r1, r0
 80027d0:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <HAL_RCC_ClockConfig+0x1f8>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	0a1b      	lsrs	r3, r3, #8
 80027d6:	220f      	movs	r2, #15
 80027d8:	401a      	ands	r2, r3
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <HAL_RCC_ClockConfig+0x208>)
 80027dc:	0092      	lsls	r2, r2, #2
 80027de:	58d3      	ldr	r3, [r2, r3]
 80027e0:	221f      	movs	r2, #31
 80027e2:	4013      	ands	r3, r2
 80027e4:	000a      	movs	r2, r1
 80027e6:	40da      	lsrs	r2, r3
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <HAL_RCC_ClockConfig+0x20c>)
 80027ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <HAL_RCC_ClockConfig+0x210>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7fd ffb9 	bl	8000768 <HAL_InitTick>
 80027f6:	0003      	movs	r3, r0
}
 80027f8:	0018      	movs	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b004      	add	sp, #16
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40022000 	.word	0x40022000
 8002804:	00001388 	.word	0x00001388
 8002808:	40021000 	.word	0x40021000
 800280c:	ffff84ff 	.word	0xffff84ff
 8002810:	fffff0ff 	.word	0xfffff0ff
 8002814:	ffff8fff 	.word	0xffff8fff
 8002818:	080030b0 	.word	0x080030b0
 800281c:	20000000 	.word	0x20000000
 8002820:	20000004 	.word	0x20000004

08002824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800282a:	4b1c      	ldr	r3, [pc, #112]	; (800289c <HAL_RCC_GetSysClockFreq+0x78>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2238      	movs	r2, #56	; 0x38
 8002830:	4013      	ands	r3, r2
 8002832:	d10f      	bne.n	8002854 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_RCC_GetSysClockFreq+0x78>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0adb      	lsrs	r3, r3, #11
 800283a:	2207      	movs	r2, #7
 800283c:	4013      	ands	r3, r2
 800283e:	2201      	movs	r2, #1
 8002840:	409a      	lsls	r2, r3
 8002842:	0013      	movs	r3, r2
 8002844:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002846:	6839      	ldr	r1, [r7, #0]
 8002848:	4815      	ldr	r0, [pc, #84]	; (80028a0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800284a:	f7fd fc5d 	bl	8000108 <__udivsi3>
 800284e:	0003      	movs	r3, r0
 8002850:	607b      	str	r3, [r7, #4]
 8002852:	e01e      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_RCC_GetSysClockFreq+0x78>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2238      	movs	r2, #56	; 0x38
 800285a:	4013      	ands	r3, r2
 800285c:	2b08      	cmp	r3, #8
 800285e:	d102      	bne.n	8002866 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x80>)
 8002862:	607b      	str	r3, [r7, #4]
 8002864:	e015      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002866:	4b0d      	ldr	r3, [pc, #52]	; (800289c <HAL_RCC_GetSysClockFreq+0x78>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2238      	movs	r2, #56	; 0x38
 800286c:	4013      	ands	r3, r2
 800286e:	2b20      	cmp	r3, #32
 8002870:	d103      	bne.n	800287a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	021b      	lsls	r3, r3, #8
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	e00b      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800287a:	4b08      	ldr	r3, [pc, #32]	; (800289c <HAL_RCC_GetSysClockFreq+0x78>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2238      	movs	r2, #56	; 0x38
 8002880:	4013      	ands	r3, r2
 8002882:	2b18      	cmp	r3, #24
 8002884:	d103      	bne.n	800288e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002886:	23fa      	movs	r3, #250	; 0xfa
 8002888:	01db      	lsls	r3, r3, #7
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	e001      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8002892:	687b      	ldr	r3, [r7, #4]
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	b002      	add	sp, #8
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000
 80028a0:	02dc6c00 	.word	0x02dc6c00
 80028a4:	007a1200 	.word	0x007a1200

080028a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80028b0:	2313      	movs	r3, #19
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028b8:	2312      	movs	r3, #18
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	2380      	movs	r3, #128	; 0x80
 80028c6:	029b      	lsls	r3, r3, #10
 80028c8:	4013      	ands	r3, r2
 80028ca:	d100      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x26>
 80028cc:	e079      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ce:	2011      	movs	r0, #17
 80028d0:	183b      	adds	r3, r7, r0
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d6:	4b64      	ldr	r3, [pc, #400]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028da:	2380      	movs	r3, #128	; 0x80
 80028dc:	055b      	lsls	r3, r3, #21
 80028de:	4013      	ands	r3, r2
 80028e0:	d110      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e2:	4b61      	ldr	r3, [pc, #388]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028e6:	4b60      	ldr	r3, [pc, #384]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028e8:	2180      	movs	r1, #128	; 0x80
 80028ea:	0549      	lsls	r1, r1, #21
 80028ec:	430a      	orrs	r2, r1
 80028ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80028f0:	4b5d      	ldr	r3, [pc, #372]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	055b      	lsls	r3, r3, #21
 80028f8:	4013      	ands	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fe:	183b      	adds	r3, r7, r0
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002904:	4b58      	ldr	r3, [pc, #352]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002906:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002908:	23c0      	movs	r3, #192	; 0xc0
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4013      	ands	r3, r2
 800290e:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d019      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	429a      	cmp	r2, r3
 800291e:	d014      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002920:	4b51      	ldr	r3, [pc, #324]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002924:	4a51      	ldr	r2, [pc, #324]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002926:	4013      	ands	r3, r2
 8002928:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800292a:	4b4f      	ldr	r3, [pc, #316]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800292c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800292e:	4b4e      	ldr	r3, [pc, #312]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002930:	2180      	movs	r1, #128	; 0x80
 8002932:	0249      	lsls	r1, r1, #9
 8002934:	430a      	orrs	r2, r1
 8002936:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002938:	4b4b      	ldr	r3, [pc, #300]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800293a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800293c:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800293e:	494c      	ldr	r1, [pc, #304]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002940:	400a      	ands	r2, r1
 8002942:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002944:	4b48      	ldr	r3, [pc, #288]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2201      	movs	r2, #1
 800294e:	4013      	ands	r3, r2
 8002950:	d016      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002952:	f7fd ff63 	bl	800081c <HAL_GetTick>
 8002956:	0003      	movs	r3, r0
 8002958:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800295a:	e00c      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295c:	f7fd ff5e 	bl	800081c <HAL_GetTick>
 8002960:	0002      	movs	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	4a43      	ldr	r2, [pc, #268]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d904      	bls.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 800296c:	2313      	movs	r3, #19
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	2203      	movs	r2, #3
 8002972:	701a      	strb	r2, [r3, #0]
          break;
 8002974:	e004      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002976:	4b3c      	ldr	r3, [pc, #240]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	2202      	movs	r2, #2
 800297c:	4013      	ands	r3, r2
 800297e:	d0ed      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002980:	2313      	movs	r3, #19
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10a      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800298a:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298e:	4a37      	ldr	r2, [pc, #220]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002990:	4013      	ands	r3, r2
 8002992:	0019      	movs	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699a      	ldr	r2, [r3, #24]
 8002998:	4b33      	ldr	r3, [pc, #204]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800299a:	430a      	orrs	r2, r1
 800299c:	65da      	str	r2, [r3, #92]	; 0x5c
 800299e:	e005      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a0:	2312      	movs	r3, #18
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	2213      	movs	r2, #19
 80029a6:	18ba      	adds	r2, r7, r2
 80029a8:	7812      	ldrb	r2, [r2, #0]
 80029aa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029ac:	2311      	movs	r3, #17
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d105      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b6:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029ba:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029bc:	492e      	ldr	r1, [pc, #184]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029be:	400a      	ands	r2, r1
 80029c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2201      	movs	r2, #1
 80029c8:	4013      	ands	r3, r2
 80029ca:	d009      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029cc:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d0:	2203      	movs	r2, #3
 80029d2:	4393      	bics	r3, r2
 80029d4:	0019      	movs	r1, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029dc:	430a      	orrs	r2, r1
 80029de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2240      	movs	r2, #64	; 0x40
 80029e6:	4013      	ands	r3, r2
 80029e8:	d009      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ea:	4b1f      	ldr	r3, [pc, #124]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	4a23      	ldr	r2, [pc, #140]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029fa:	430a      	orrs	r2, r1
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	01db      	lsls	r3, r3, #7
 8002a06:	4013      	ands	r3, r2
 8002a08:	d008      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a0a:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	0899      	lsrs	r1, r3, #2
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	4013      	ands	r3, r2
 8002a26:	d009      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2c:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	0019      	movs	r1, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	da09      	bge.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	22e0      	movs	r2, #224	; 0xe0
 8002a4a:	4393      	bics	r3, r2
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a54:	430a      	orrs	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002a58:	2312      	movs	r3, #18
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	781b      	ldrb	r3, [r3, #0]
}
 8002a5e:	0018      	movs	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b006      	add	sp, #24
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	fffffcff 	.word	0xfffffcff
 8002a70:	fffeffff 	.word	0xfffeffff
 8002a74:	00001388 	.word	0x00001388
 8002a78:	efffffff 	.word	0xefffffff
 8002a7c:	ffffcfff 	.word	0xffffcfff
 8002a80:	ffff3fff 	.word	0xffff3fff

08002a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e04a      	b.n	8002b2c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	223d      	movs	r2, #61	; 0x3d
 8002a9a:	5c9b      	ldrb	r3, [r3, r2]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d107      	bne.n	8002ab2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	223c      	movs	r2, #60	; 0x3c
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7fd fdcd 	bl	800064c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	223d      	movs	r2, #61	; 0x3d
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	0010      	movs	r0, r2
 8002ac6:	f000 f951 	bl	8002d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2248      	movs	r2, #72	; 0x48
 8002ace:	2101      	movs	r1, #1
 8002ad0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	223e      	movs	r2, #62	; 0x3e
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	5499      	strb	r1, [r3, r2]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	223f      	movs	r2, #63	; 0x3f
 8002ade:	2101      	movs	r1, #1
 8002ae0:	5499      	strb	r1, [r3, r2]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2240      	movs	r2, #64	; 0x40
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	5499      	strb	r1, [r3, r2]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2241      	movs	r2, #65	; 0x41
 8002aee:	2101      	movs	r1, #1
 8002af0:	5499      	strb	r1, [r3, r2]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2242      	movs	r2, #66	; 0x42
 8002af6:	2101      	movs	r1, #1
 8002af8:	5499      	strb	r1, [r3, r2]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2243      	movs	r2, #67	; 0x43
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2244      	movs	r2, #68	; 0x44
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2245      	movs	r2, #69	; 0x45
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2246      	movs	r2, #70	; 0x46
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2247      	movs	r2, #71	; 0x47
 8002b1e:	2101      	movs	r1, #1
 8002b20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	223d      	movs	r2, #61	; 0x3d
 8002b26:	2101      	movs	r1, #1
 8002b28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b002      	add	sp, #8
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	223d      	movs	r2, #61	; 0x3d
 8002b40:	5c9b      	ldrb	r3, [r3, r2]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d001      	beq.n	8002b4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e02f      	b.n	8002bac <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	223d      	movs	r2, #61	; 0x3d
 8002b50:	2102      	movs	r1, #2
 8002b52:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a16      	ldr	r2, [pc, #88]	; (8002bb4 <HAL_TIM_Base_Start+0x80>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d004      	beq.n	8002b68 <HAL_TIM_Base_Start+0x34>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a15      	ldr	r2, [pc, #84]	; (8002bb8 <HAL_TIM_Base_Start+0x84>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d116      	bne.n	8002b96 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	4a13      	ldr	r2, [pc, #76]	; (8002bbc <HAL_TIM_Base_Start+0x88>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b06      	cmp	r3, #6
 8002b78:	d016      	beq.n	8002ba8 <HAL_TIM_Base_Start+0x74>
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	025b      	lsls	r3, r3, #9
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d011      	beq.n	8002ba8 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2101      	movs	r1, #1
 8002b90:	430a      	orrs	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b94:	e008      	b.n	8002ba8 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e000      	b.n	8002baa <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	0018      	movs	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	b004      	add	sp, #16
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40012c00 	.word	0x40012c00
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	00010007 	.word	0x00010007

08002bc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bca:	230f      	movs	r3, #15
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	223c      	movs	r2, #60	; 0x3c
 8002bd6:	5c9b      	ldrb	r3, [r3, r2]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_TIM_ConfigClockSource+0x20>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e0bc      	b.n	8002d5a <HAL_TIM_ConfigClockSource+0x19a>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	223c      	movs	r2, #60	; 0x3c
 8002be4:	2101      	movs	r1, #1
 8002be6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	223d      	movs	r2, #61	; 0x3d
 8002bec:	2102      	movs	r1, #2
 8002bee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4a5a      	ldr	r2, [pc, #360]	; (8002d64 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4a59      	ldr	r2, [pc, #356]	; (8002d68 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2280      	movs	r2, #128	; 0x80
 8002c16:	0192      	lsls	r2, r2, #6
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d040      	beq.n	8002c9e <HAL_TIM_ConfigClockSource+0xde>
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	0192      	lsls	r2, r2, #6
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d900      	bls.n	8002c26 <HAL_TIM_ConfigClockSource+0x66>
 8002c24:	e088      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x178>
 8002c26:	2280      	movs	r2, #128	; 0x80
 8002c28:	0152      	lsls	r2, r2, #5
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d100      	bne.n	8002c30 <HAL_TIM_ConfigClockSource+0x70>
 8002c2e:	e088      	b.n	8002d42 <HAL_TIM_ConfigClockSource+0x182>
 8002c30:	2280      	movs	r2, #128	; 0x80
 8002c32:	0152      	lsls	r2, r2, #5
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d900      	bls.n	8002c3a <HAL_TIM_ConfigClockSource+0x7a>
 8002c38:	e07e      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x178>
 8002c3a:	2b70      	cmp	r3, #112	; 0x70
 8002c3c:	d018      	beq.n	8002c70 <HAL_TIM_ConfigClockSource+0xb0>
 8002c3e:	d900      	bls.n	8002c42 <HAL_TIM_ConfigClockSource+0x82>
 8002c40:	e07a      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x178>
 8002c42:	2b60      	cmp	r3, #96	; 0x60
 8002c44:	d04f      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0x126>
 8002c46:	d900      	bls.n	8002c4a <HAL_TIM_ConfigClockSource+0x8a>
 8002c48:	e076      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x178>
 8002c4a:	2b50      	cmp	r3, #80	; 0x50
 8002c4c:	d03b      	beq.n	8002cc6 <HAL_TIM_ConfigClockSource+0x106>
 8002c4e:	d900      	bls.n	8002c52 <HAL_TIM_ConfigClockSource+0x92>
 8002c50:	e072      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x178>
 8002c52:	2b40      	cmp	r3, #64	; 0x40
 8002c54:	d057      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0x146>
 8002c56:	d900      	bls.n	8002c5a <HAL_TIM_ConfigClockSource+0x9a>
 8002c58:	e06e      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x178>
 8002c5a:	2b30      	cmp	r3, #48	; 0x30
 8002c5c:	d063      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x166>
 8002c5e:	d86b      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x178>
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d060      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x166>
 8002c64:	d868      	bhi.n	8002d38 <HAL_TIM_ConfigClockSource+0x178>
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d05d      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x166>
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d05b      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x166>
 8002c6e:	e063      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	6899      	ldr	r1, [r3, #8]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f000 f95c 	bl	8002f3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2277      	movs	r2, #119	; 0x77
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	609a      	str	r2, [r3, #8]
      break;
 8002c9c:	e052      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	6899      	ldr	r1, [r3, #8]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f000 f945 	bl	8002f3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2180      	movs	r1, #128	; 0x80
 8002cbe:	01c9      	lsls	r1, r1, #7
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	609a      	str	r2, [r3, #8]
      break;
 8002cc4:	e03e      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	001a      	movs	r2, r3
 8002cd4:	f000 f8b6 	bl	8002e44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2150      	movs	r1, #80	; 0x50
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f000 f910 	bl	8002f04 <TIM_ITRx_SetConfig>
      break;
 8002ce4:	e02e      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6859      	ldr	r1, [r3, #4]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	001a      	movs	r2, r3
 8002cf4:	f000 f8d4 	bl	8002ea0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2160      	movs	r1, #96	; 0x60
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 f900 	bl	8002f04 <TIM_ITRx_SetConfig>
      break;
 8002d04:	e01e      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6859      	ldr	r1, [r3, #4]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	001a      	movs	r2, r3
 8002d14:	f000 f896 	bl	8002e44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2140      	movs	r1, #64	; 0x40
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f000 f8f0 	bl	8002f04 <TIM_ITRx_SetConfig>
      break;
 8002d24:	e00e      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	0019      	movs	r1, r3
 8002d30:	0010      	movs	r0, r2
 8002d32:	f000 f8e7 	bl	8002f04 <TIM_ITRx_SetConfig>
      break;
 8002d36:	e005      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002d38:	230f      	movs	r3, #15
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
      break;
 8002d40:	e000      	b.n	8002d44 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002d42:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	223d      	movs	r2, #61	; 0x3d
 8002d48:	2101      	movs	r1, #1
 8002d4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	223c      	movs	r2, #60	; 0x3c
 8002d50:	2100      	movs	r1, #0
 8002d52:	5499      	strb	r1, [r3, r2]

  return status;
 8002d54:	230f      	movs	r3, #15
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	781b      	ldrb	r3, [r3, #0]
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b004      	add	sp, #16
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	ffceff88 	.word	0xffceff88
 8002d68:	ffff00ff 	.word	0xffff00ff

08002d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a2b      	ldr	r2, [pc, #172]	; (8002e2c <TIM_Base_SetConfig+0xc0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d003      	beq.n	8002d8c <TIM_Base_SetConfig+0x20>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a2a      	ldr	r2, [pc, #168]	; (8002e30 <TIM_Base_SetConfig+0xc4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d108      	bne.n	8002d9e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2270      	movs	r2, #112	; 0x70
 8002d90:	4393      	bics	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <TIM_Base_SetConfig+0xc0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00f      	beq.n	8002dc6 <TIM_Base_SetConfig+0x5a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a21      	ldr	r2, [pc, #132]	; (8002e30 <TIM_Base_SetConfig+0xc4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00b      	beq.n	8002dc6 <TIM_Base_SetConfig+0x5a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a20      	ldr	r2, [pc, #128]	; (8002e34 <TIM_Base_SetConfig+0xc8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <TIM_Base_SetConfig+0x5a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a1f      	ldr	r2, [pc, #124]	; (8002e38 <TIM_Base_SetConfig+0xcc>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <TIM_Base_SetConfig+0x5a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a1e      	ldr	r2, [pc, #120]	; (8002e3c <TIM_Base_SetConfig+0xd0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d108      	bne.n	8002dd8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <TIM_Base_SetConfig+0xd4>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	4393      	bics	r3, r2
 8002dde:	001a      	movs	r2, r3
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <TIM_Base_SetConfig+0xc0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d007      	beq.n	8002e16 <TIM_Base_SetConfig+0xaa>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a0b      	ldr	r2, [pc, #44]	; (8002e38 <TIM_Base_SetConfig+0xcc>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d003      	beq.n	8002e16 <TIM_Base_SetConfig+0xaa>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <TIM_Base_SetConfig+0xd0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d103      	bne.n	8002e1e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	615a      	str	r2, [r3, #20]
}
 8002e24:	46c0      	nop			; (mov r8, r8)
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b004      	add	sp, #16
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40012c00 	.word	0x40012c00
 8002e30:	40000400 	.word	0x40000400
 8002e34:	40002000 	.word	0x40002000
 8002e38:	40014400 	.word	0x40014400
 8002e3c:	40014800 	.word	0x40014800
 8002e40:	fffffcff 	.word	0xfffffcff

08002e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	4393      	bics	r3, r2
 8002e5e:	001a      	movs	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	22f0      	movs	r2, #240	; 0xf0
 8002e6e:	4393      	bics	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	220a      	movs	r2, #10
 8002e80:	4393      	bics	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	621a      	str	r2, [r3, #32]
}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b006      	add	sp, #24
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	4393      	bics	r3, r2
 8002eb4:	001a      	movs	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <TIM_TI2_ConfigInputStage+0x60>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	031b      	lsls	r3, r3, #12
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	22a0      	movs	r2, #160	; 0xa0
 8002edc:	4393      	bics	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b006      	add	sp, #24
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	ffff0fff 	.word	0xffff0fff

08002f04 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4a08      	ldr	r2, [pc, #32]	; (8002f38 <TIM_ITRx_SetConfig+0x34>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	2207      	movs	r2, #7
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	609a      	str	r2, [r3, #8]
}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b004      	add	sp, #16
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	ffcfff8f 	.word	0xffcfff8f

08002f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	4a09      	ldr	r2, [pc, #36]	; (8002f78 <TIM_ETR_SetConfig+0x3c>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	021a      	lsls	r2, r3, #8
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	609a      	str	r2, [r3, #8]
}
 8002f70:	46c0      	nop			; (mov r8, r8)
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b006      	add	sp, #24
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	ffff00ff 	.word	0xffff00ff

08002f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	223c      	movs	r2, #60	; 0x3c
 8002f8a:	5c9b      	ldrb	r3, [r3, r2]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e04a      	b.n	800302a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	223c      	movs	r2, #60	; 0x3c
 8002f98:	2101      	movs	r1, #1
 8002f9a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	223d      	movs	r2, #61	; 0x3d
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a1e      	ldr	r2, [pc, #120]	; (8003034 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d108      	bne.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2270      	movs	r2, #112	; 0x70
 8002fd4:	4393      	bics	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a11      	ldr	r2, [pc, #68]	; (8003034 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d004      	beq.n	8002ffe <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a10      	ldr	r2, [pc, #64]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d10c      	bne.n	8003018 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	4393      	bics	r3, r2
 8003004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	4313      	orrs	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	223d      	movs	r2, #61	; 0x3d
 800301c:	2101      	movs	r1, #1
 800301e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	223c      	movs	r2, #60	; 0x3c
 8003024:	2100      	movs	r1, #0
 8003026:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	0018      	movs	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	b004      	add	sp, #16
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	40012c00 	.word	0x40012c00
 8003038:	ff0fffff 	.word	0xff0fffff
 800303c:	40000400 	.word	0x40000400

08003040 <__libc_init_array>:
 8003040:	b570      	push	{r4, r5, r6, lr}
 8003042:	2600      	movs	r6, #0
 8003044:	4d0c      	ldr	r5, [pc, #48]	; (8003078 <__libc_init_array+0x38>)
 8003046:	4c0d      	ldr	r4, [pc, #52]	; (800307c <__libc_init_array+0x3c>)
 8003048:	1b64      	subs	r4, r4, r5
 800304a:	10a4      	asrs	r4, r4, #2
 800304c:	42a6      	cmp	r6, r4
 800304e:	d109      	bne.n	8003064 <__libc_init_array+0x24>
 8003050:	2600      	movs	r6, #0
 8003052:	f000 f821 	bl	8003098 <_init>
 8003056:	4d0a      	ldr	r5, [pc, #40]	; (8003080 <__libc_init_array+0x40>)
 8003058:	4c0a      	ldr	r4, [pc, #40]	; (8003084 <__libc_init_array+0x44>)
 800305a:	1b64      	subs	r4, r4, r5
 800305c:	10a4      	asrs	r4, r4, #2
 800305e:	42a6      	cmp	r6, r4
 8003060:	d105      	bne.n	800306e <__libc_init_array+0x2e>
 8003062:	bd70      	pop	{r4, r5, r6, pc}
 8003064:	00b3      	lsls	r3, r6, #2
 8003066:	58eb      	ldr	r3, [r5, r3]
 8003068:	4798      	blx	r3
 800306a:	3601      	adds	r6, #1
 800306c:	e7ee      	b.n	800304c <__libc_init_array+0xc>
 800306e:	00b3      	lsls	r3, r6, #2
 8003070:	58eb      	ldr	r3, [r5, r3]
 8003072:	4798      	blx	r3
 8003074:	3601      	adds	r6, #1
 8003076:	e7f2      	b.n	800305e <__libc_init_array+0x1e>
 8003078:	080030f0 	.word	0x080030f0
 800307c:	080030f0 	.word	0x080030f0
 8003080:	080030f0 	.word	0x080030f0
 8003084:	080030f4 	.word	0x080030f4

08003088 <memset>:
 8003088:	0003      	movs	r3, r0
 800308a:	1882      	adds	r2, r0, r2
 800308c:	4293      	cmp	r3, r2
 800308e:	d100      	bne.n	8003092 <memset+0xa>
 8003090:	4770      	bx	lr
 8003092:	7019      	strb	r1, [r3, #0]
 8003094:	3301      	adds	r3, #1
 8003096:	e7f9      	b.n	800308c <memset+0x4>

08003098 <_init>:
 8003098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800309e:	bc08      	pop	{r3}
 80030a0:	469e      	mov	lr, r3
 80030a2:	4770      	bx	lr

080030a4 <_fini>:
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030aa:	bc08      	pop	{r3}
 80030ac:	469e      	mov	lr, r3
 80030ae:	4770      	bx	lr
