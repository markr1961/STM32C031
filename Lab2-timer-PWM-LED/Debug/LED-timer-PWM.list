
LED-timer-PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000240c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080024cc  080024cc  000124cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002560  08002560  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002560  08002560  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002560  08002560  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002560  08002560  00012560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002564  08002564  00012564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  08002578  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08002578  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008734  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014ce  00000000  00000000  0002876c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  00029c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002a5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000125ac  00000000  00000000  0002ae78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d52  00000000  00000000  0003d424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075c91  00000000  00000000  00047176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bce07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021e4  00000000  00000000  000bce58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080024b4 	.word	0x080024b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080024b4 	.word	0x080024b4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
uint32_t uwTimerPulse = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 fa94 	bl	8000756 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f817 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f927 	bl	8000484 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000236:	f000 f857 	bl	80002e8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800023a:	4b07      	ldr	r3, [pc, #28]	; (8000258 <main+0x38>)
 800023c:	2100      	movs	r1, #0
 800023e:	0018      	movs	r0, r3
 8000240:	f001 f98e 	bl	8001560 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (uwTimerPulse != uwNewPulse)
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <main+0x3c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	429a      	cmp	r2, r3
 800024c:	d0fa      	beq.n	8000244 <main+0x24>
	  {
		  uwTimerPulse = uwNewPulse;
 800024e:	4b03      	ldr	r3, [pc, #12]	; (800025c <main+0x3c>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	607b      	str	r3, [r7, #4]
	  if (uwTimerPulse != uwNewPulse)
 8000254:	e7f6      	b.n	8000244 <main+0x24>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	2000002c 	.word	0x2000002c
 800025c:	20000000 	.word	0x20000000

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b08d      	sub	sp, #52	; 0x34
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	2414      	movs	r4, #20
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	231c      	movs	r3, #28
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f002 f917 	bl	80024a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	003b      	movs	r3, r7
 8000278:	0018      	movs	r0, r3
 800027a:	2314      	movs	r3, #20
 800027c:	001a      	movs	r2, r3
 800027e:	2100      	movs	r1, #0
 8000280:	f002 f910 	bl	80024a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000284:	193b      	adds	r3, r7, r4
 8000286:	2202      	movs	r2, #2
 8000288:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	193b      	adds	r3, r7, r4
 800028c:	2280      	movs	r2, #128	; 0x80
 800028e:	0052      	lsls	r2, r2, #1
 8000290:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000292:	193b      	adds	r3, r7, r4
 8000294:	2200      	movs	r2, #0
 8000296:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000298:	193b      	adds	r3, r7, r4
 800029a:	2240      	movs	r2, #64	; 0x40
 800029c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029e:	193b      	adds	r3, r7, r4
 80002a0:	0018      	movs	r0, r3
 80002a2:	f000 fd61 	bl	8000d68 <HAL_RCC_OscConfig>
 80002a6:	1e03      	subs	r3, r0, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002aa:	f000 f977 	bl	800059c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	003b      	movs	r3, r7
 80002b0:	2207      	movs	r2, #7
 80002b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b4:	003b      	movs	r3, r7
 80002b6:	2200      	movs	r2, #0
 80002b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002ba:	003b      	movs	r3, r7
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002c0:	003b      	movs	r3, r7
 80002c2:	2200      	movs	r2, #0
 80002c4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV16;
 80002c6:	003b      	movs	r3, r7
 80002c8:	22e0      	movs	r2, #224	; 0xe0
 80002ca:	01d2      	lsls	r2, r2, #7
 80002cc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002ce:	003b      	movs	r3, r7
 80002d0:	2101      	movs	r1, #1
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 ff42 	bl	800115c <HAL_RCC_ClockConfig>
 80002d8:	1e03      	subs	r3, r0, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002dc:	f000 f95e 	bl	800059c <Error_Handler>
  }
}
 80002e0:	46c0      	nop			; (mov r8, r8)
 80002e2:	46bd      	mov	sp, r7
 80002e4:	b00d      	add	sp, #52	; 0x34
 80002e6:	bd90      	pop	{r4, r7, pc}

080002e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b09c      	sub	sp, #112	; 0x70
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ee:	2360      	movs	r3, #96	; 0x60
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	0018      	movs	r0, r3
 80002f4:	2310      	movs	r3, #16
 80002f6:	001a      	movs	r2, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	f002 f8d3 	bl	80024a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002fe:	2354      	movs	r3, #84	; 0x54
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	0018      	movs	r0, r3
 8000304:	230c      	movs	r3, #12
 8000306:	001a      	movs	r2, r3
 8000308:	2100      	movs	r1, #0
 800030a:	f002 f8cb 	bl	80024a4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800030e:	2338      	movs	r3, #56	; 0x38
 8000310:	18fb      	adds	r3, r7, r3
 8000312:	0018      	movs	r0, r3
 8000314:	231c      	movs	r3, #28
 8000316:	001a      	movs	r2, r3
 8000318:	2100      	movs	r1, #0
 800031a:	f002 f8c3 	bl	80024a4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	0018      	movs	r0, r3
 8000322:	2334      	movs	r3, #52	; 0x34
 8000324:	001a      	movs	r2, r3
 8000326:	2100      	movs	r1, #0
 8000328:	f002 f8bc 	bl	80024a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800032c:	4b51      	ldr	r3, [pc, #324]	; (8000474 <MX_TIM1_Init+0x18c>)
 800032e:	4a52      	ldr	r2, [pc, #328]	; (8000478 <MX_TIM1_Init+0x190>)
 8000330:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128;
 8000332:	4b50      	ldr	r3, [pc, #320]	; (8000474 <MX_TIM1_Init+0x18c>)
 8000334:	2280      	movs	r2, #128	; 0x80
 8000336:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000338:	4b4e      	ldr	r3, [pc, #312]	; (8000474 <MX_TIM1_Init+0x18c>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 46875;
 800033e:	4b4d      	ldr	r3, [pc, #308]	; (8000474 <MX_TIM1_Init+0x18c>)
 8000340:	4a4e      	ldr	r2, [pc, #312]	; (800047c <MX_TIM1_Init+0x194>)
 8000342:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000344:	4b4b      	ldr	r3, [pc, #300]	; (8000474 <MX_TIM1_Init+0x18c>)
 8000346:	2200      	movs	r2, #0
 8000348:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800034a:	4b4a      	ldr	r3, [pc, #296]	; (8000474 <MX_TIM1_Init+0x18c>)
 800034c:	2200      	movs	r2, #0
 800034e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000350:	4b48      	ldr	r3, [pc, #288]	; (8000474 <MX_TIM1_Init+0x18c>)
 8000352:	2200      	movs	r2, #0
 8000354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000356:	4b47      	ldr	r3, [pc, #284]	; (8000474 <MX_TIM1_Init+0x18c>)
 8000358:	0018      	movs	r0, r3
 800035a:	f001 f849 	bl	80013f0 <HAL_TIM_Base_Init>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000362:	f000 f91b 	bl	800059c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000366:	2160      	movs	r1, #96	; 0x60
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2280      	movs	r2, #128	; 0x80
 800036c:	0152      	lsls	r2, r2, #5
 800036e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000370:	187a      	adds	r2, r7, r1
 8000372:	4b40      	ldr	r3, [pc, #256]	; (8000474 <MX_TIM1_Init+0x18c>)
 8000374:	0011      	movs	r1, r2
 8000376:	0018      	movs	r0, r3
 8000378:	f001 faca 	bl	8001910 <HAL_TIM_ConfigClockSource>
 800037c:	1e03      	subs	r3, r0, #0
 800037e:	d001      	beq.n	8000384 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000380:	f000 f90c 	bl	800059c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000384:	4b3b      	ldr	r3, [pc, #236]	; (8000474 <MX_TIM1_Init+0x18c>)
 8000386:	0018      	movs	r0, r3
 8000388:	f001 f88a 	bl	80014a0 <HAL_TIM_PWM_Init>
 800038c:	1e03      	subs	r3, r0, #0
 800038e:	d001      	beq.n	8000394 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000390:	f000 f904 	bl	800059c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000394:	2154      	movs	r1, #84	; 0x54
 8000396:	187b      	adds	r3, r7, r1
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800039c:	187b      	adds	r3, r7, r1
 800039e:	2200      	movs	r2, #0
 80003a0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003a8:	187a      	adds	r2, r7, r1
 80003aa:	4b32      	ldr	r3, [pc, #200]	; (8000474 <MX_TIM1_Init+0x18c>)
 80003ac:	0011      	movs	r1, r2
 80003ae:	0018      	movs	r0, r3
 80003b0:	f001 ff4c 	bl	800224c <HAL_TIMEx_MasterConfigSynchronization>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d001      	beq.n	80003bc <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80003b8:	f000 f8f0 	bl	800059c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003bc:	2138      	movs	r1, #56	; 0x38
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2260      	movs	r2, #96	; 0x60
 80003c2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 23474;
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	4a2e      	ldr	r2, [pc, #184]	; (8000480 <MX_TIM1_Init+0x198>)
 80003c8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2200      	movs	r2, #0
 80003e0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	4b22      	ldr	r3, [pc, #136]	; (8000474 <MX_TIM1_Init+0x18c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	0018      	movs	r0, r3
 80003f0:	f001 f98e 	bl	8001710 <HAL_TIM_PWM_ConfigChannel>
 80003f4:	1e03      	subs	r3, r0, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80003f8:	f000 f8d0 	bl	800059c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2200      	movs	r2, #0
 8000406:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2200      	movs	r2, #0
 8000412:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2200      	movs	r2, #0
 8000418:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2280      	movs	r2, #128	; 0x80
 800041e:	0192      	lsls	r2, r2, #6
 8000420:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2200      	movs	r2, #0
 8000426:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2200      	movs	r2, #0
 800042c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2200      	movs	r2, #0
 8000432:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	0492      	lsls	r2, r2, #18
 800043a:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2200      	movs	r2, #0
 8000446:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2200      	movs	r2, #0
 800044c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800044e:	1d3a      	adds	r2, r7, #4
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <MX_TIM1_Init+0x18c>)
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f001 ff5b 	bl	8002310 <HAL_TIMEx_ConfigBreakDeadTime>
 800045a:	1e03      	subs	r3, r0, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800045e:	f000 f89d 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000462:	4b04      	ldr	r3, [pc, #16]	; (8000474 <MX_TIM1_Init+0x18c>)
 8000464:	0018      	movs	r0, r3
 8000466:	f000 f8e3 	bl	8000630 <HAL_TIM_MspPostInit>

}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b01c      	add	sp, #112	; 0x70
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	2000002c 	.word	0x2000002c
 8000478:	40012c00 	.word	0x40012c00
 800047c:	0000b71b 	.word	0x0000b71b
 8000480:	00005bb2 	.word	0x00005bb2

08000484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b08b      	sub	sp, #44	; 0x2c
 8000488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	2414      	movs	r4, #20
 800048c:	193b      	adds	r3, r7, r4
 800048e:	0018      	movs	r0, r3
 8000490:	2314      	movs	r3, #20
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f002 f805 	bl	80024a4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4b3c      	ldr	r3, [pc, #240]	; (800058c <MX_GPIO_Init+0x108>)
 800049c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800049e:	4b3b      	ldr	r3, [pc, #236]	; (800058c <MX_GPIO_Init+0x108>)
 80004a0:	2104      	movs	r1, #4
 80004a2:	430a      	orrs	r2, r1
 80004a4:	635a      	str	r2, [r3, #52]	; 0x34
 80004a6:	4b39      	ldr	r3, [pc, #228]	; (800058c <MX_GPIO_Init+0x108>)
 80004a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004aa:	2204      	movs	r2, #4
 80004ac:	4013      	ands	r3, r2
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004b2:	4b36      	ldr	r3, [pc, #216]	; (800058c <MX_GPIO_Init+0x108>)
 80004b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004b6:	4b35      	ldr	r3, [pc, #212]	; (800058c <MX_GPIO_Init+0x108>)
 80004b8:	2120      	movs	r1, #32
 80004ba:	430a      	orrs	r2, r1
 80004bc:	635a      	str	r2, [r3, #52]	; 0x34
 80004be:	4b33      	ldr	r3, [pc, #204]	; (800058c <MX_GPIO_Init+0x108>)
 80004c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004c2:	2220      	movs	r2, #32
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b30      	ldr	r3, [pc, #192]	; (800058c <MX_GPIO_Init+0x108>)
 80004cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ce:	4b2f      	ldr	r3, [pc, #188]	; (800058c <MX_GPIO_Init+0x108>)
 80004d0:	2101      	movs	r1, #1
 80004d2:	430a      	orrs	r2, r1
 80004d4:	635a      	str	r2, [r3, #52]	; 0x34
 80004d6:	4b2d      	ldr	r3, [pc, #180]	; (800058c <MX_GPIO_Init+0x108>)
 80004d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004da:	2201      	movs	r2, #1
 80004dc:	4013      	ands	r3, r2
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	4b2a      	ldr	r3, [pc, #168]	; (800058c <MX_GPIO_Init+0x108>)
 80004e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004e6:	4b29      	ldr	r3, [pc, #164]	; (800058c <MX_GPIO_Init+0x108>)
 80004e8:	2102      	movs	r1, #2
 80004ea:	430a      	orrs	r2, r1
 80004ec:	635a      	str	r2, [r3, #52]	; 0x34
 80004ee:	4b27      	ldr	r3, [pc, #156]	; (800058c <MX_GPIO_Init+0x108>)
 80004f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004f2:	2202      	movs	r2, #2
 80004f4:	4013      	ands	r3, r2
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	0192      	lsls	r2, r2, #6
 8000500:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	4a22      	ldr	r2, [pc, #136]	; (8000590 <MX_GPIO_Init+0x10c>)
 8000506:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800050e:	193b      	adds	r3, r7, r4
 8000510:	4a20      	ldr	r2, [pc, #128]	; (8000594 <MX_GPIO_Init+0x110>)
 8000512:	0019      	movs	r1, r3
 8000514:	0010      	movs	r0, r2
 8000516:	f000 fa77 	bl	8000a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	220c      	movs	r2, #12
 800051e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2202      	movs	r2, #2
 8000524:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2201      	movs	r2, #1
 8000536:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	193a      	adds	r2, r7, r4
 800053a:	23a0      	movs	r3, #160	; 0xa0
 800053c:	05db      	lsls	r3, r3, #23
 800053e:	0011      	movs	r1, r2
 8000540:	0018      	movs	r0, r3
 8000542:	f000 fa61 	bl	8000a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000546:	0021      	movs	r1, r4
 8000548:	187b      	adds	r3, r7, r1
 800054a:	22c0      	movs	r2, #192	; 0xc0
 800054c:	0092      	lsls	r2, r2, #2
 800054e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2212      	movs	r2, #18
 8000554:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2206      	movs	r2, #6
 8000566:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000568:	187b      	adds	r3, r7, r1
 800056a:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <MX_GPIO_Init+0x114>)
 800056c:	0019      	movs	r1, r3
 800056e:	0010      	movs	r0, r2
 8000570:	f000 fa4a 	bl	8000a08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2100      	movs	r1, #0
 8000578:	2007      	movs	r0, #7
 800057a:	f000 fa13 	bl	80009a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800057e:	2007      	movs	r0, #7
 8000580:	f000 fa25 	bl	80009ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b00b      	add	sp, #44	; 0x2c
 800058a:	bd90      	pop	{r4, r7, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	10110000 	.word	0x10110000
 8000594:	50000800 	.word	0x50000800
 8000598:	50000400 	.word	0x50000400

0800059c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
}
 80005a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <Error_Handler+0x8>
	...

080005a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <HAL_MspInit+0x44>)
 80005b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <HAL_MspInit+0x44>)
 80005b4:	2101      	movs	r1, #1
 80005b6:	430a      	orrs	r2, r1
 80005b8:	641a      	str	r2, [r3, #64]	; 0x40
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <HAL_MspInit+0x44>)
 80005bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005be:	2201      	movs	r2, #1
 80005c0:	4013      	ands	r3, r2
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_MspInit+0x44>)
 80005c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <HAL_MspInit+0x44>)
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	0549      	lsls	r1, r1, #21
 80005d0:	430a      	orrs	r2, r1
 80005d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <HAL_MspInit+0x44>)
 80005d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	055b      	lsls	r3, r3, #21
 80005dc:	4013      	ands	r3, r2
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	b002      	add	sp, #8
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	40021000 	.word	0x40021000

080005f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <HAL_TIM_Base_MspInit+0x38>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d10d      	bne.n	800061e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <HAL_TIM_Base_MspInit+0x3c>)
 8000604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <HAL_TIM_Base_MspInit+0x3c>)
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	0109      	lsls	r1, r1, #4
 800060c:	430a      	orrs	r2, r1
 800060e:	641a      	str	r2, [r3, #64]	; 0x40
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <HAL_TIM_Base_MspInit+0x3c>)
 8000612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	4013      	ands	r3, r2
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b004      	add	sp, #16
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	40012c00 	.word	0x40012c00
 800062c:	40021000 	.word	0x40021000

08000630 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b089      	sub	sp, #36	; 0x24
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	240c      	movs	r4, #12
 800063a:	193b      	adds	r3, r7, r4
 800063c:	0018      	movs	r0, r3
 800063e:	2314      	movs	r3, #20
 8000640:	001a      	movs	r2, r3
 8000642:	2100      	movs	r1, #0
 8000644:	f001 ff2e 	bl	80024a4 <memset>
  if(htim->Instance==TIM1)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <HAL_TIM_MspPostInit+0x70>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d122      	bne.n	8000698 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <HAL_TIM_MspPostInit+0x74>)
 8000654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <HAL_TIM_MspPostInit+0x74>)
 8000658:	2101      	movs	r1, #1
 800065a:	430a      	orrs	r2, r1
 800065c:	635a      	str	r2, [r3, #52]	; 0x34
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <HAL_TIM_MspPostInit+0x74>)
 8000660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000662:	2201      	movs	r2, #1
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA5     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800066a:	0021      	movs	r1, r4
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2220      	movs	r2, #32
 8000670:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2202      	movs	r2, #2
 8000676:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2205      	movs	r2, #5
 8000688:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068a:	187a      	adds	r2, r7, r1
 800068c:	23a0      	movs	r3, #160	; 0xa0
 800068e:	05db      	lsls	r3, r3, #23
 8000690:	0011      	movs	r1, r2
 8000692:	0018      	movs	r0, r3
 8000694:	f000 f9b8 	bl	8000a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	b009      	add	sp, #36	; 0x24
 800069e:	bd90      	pop	{r4, r7, pc}
 80006a0:	40012c00 	.word	0x40012c00
 80006a4:	40021000 	.word	0x40021000

080006a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <NMI_Handler+0x4>

080006ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <HardFault_Handler+0x4>

080006b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006cc:	f000 f8a4 	bl	8000818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 80006da:	2380      	movs	r3, #128	; 0x80
 80006dc:	019b      	lsls	r3, r3, #6
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 fb04 	bl	8000cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80006e4:	46c0      	nop			; (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <SystemInit+0x14>)
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	0512      	lsls	r2, r2, #20
 80006f6:	609a      	str	r2, [r3, #8]
#endif
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000706:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000708:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800070a:	e003      	b.n	8000714 <LoopCopyDataInit>

0800070c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800070e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000710:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000712:	3104      	adds	r1, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000714:	480b      	ldr	r0, [pc, #44]	; (8000744 <LoopForever+0xa>)
  ldr r3, =_edata
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <LoopForever+0xe>)
  adds r2, r0, r1
 8000718:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800071a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800071c:	d3f6      	bcc.n	800070c <CopyDataInit>
  ldr r2, =_sbss
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <LoopForever+0x12>)
  b LoopFillZerobss
 8000720:	e002      	b.n	8000728 <LoopFillZerobss>

08000722 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  str  r3, [r2]
 8000724:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000726:	3204      	adds	r2, #4

08000728 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <LoopForever+0x16>)
  cmp r2, r3
 800072a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800072c:	d3f9      	bcc.n	8000722 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800072e:	f7ff ffdd 	bl	80006ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000732:	f001 fe93 	bl	800245c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000736:	f7ff fd73 	bl	8000220 <main>

0800073a <LoopForever>:

LoopForever:
    b LoopForever
 800073a:	e7fe      	b.n	800073a <LoopForever>
  ldr   r0, =_estack
 800073c:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000740:	08002568 	.word	0x08002568
  ldr r0, =_sdata
 8000744:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000748:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 800074c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000750:	2000007c 	.word	0x2000007c

08000754 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000754:	e7fe      	b.n	8000754 <ADC1_IRQHandler>

08000756 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800075c:	1dfb      	adds	r3, r7, #7
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000762:	2003      	movs	r0, #3
 8000764:	f000 f80e 	bl	8000784 <HAL_InitTick>
 8000768:	1e03      	subs	r3, r0, #0
 800076a:	d003      	beq.n	8000774 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	2201      	movs	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]
 8000772:	e001      	b.n	8000778 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000774:	f7ff ff18 	bl	80005a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	781b      	ldrb	r3, [r3, #0]
}
 800077c:	0018      	movs	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	b002      	add	sp, #8
 8000782:	bd80      	pop	{r7, pc}

08000784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800078c:	230f      	movs	r3, #15
 800078e:	18fb      	adds	r3, r7, r3
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000794:	4b1d      	ldr	r3, [pc, #116]	; (800080c <HAL_InitTick+0x88>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d02b      	beq.n	80007f4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <HAL_InitTick+0x8c>)
 800079e:	681c      	ldr	r4, [r3, #0]
 80007a0:	4b1a      	ldr	r3, [pc, #104]	; (800080c <HAL_InitTick+0x88>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	0019      	movs	r1, r3
 80007a6:	23fa      	movs	r3, #250	; 0xfa
 80007a8:	0098      	lsls	r0, r3, #2
 80007aa:	f7ff fcad 	bl	8000108 <__udivsi3>
 80007ae:	0003      	movs	r3, r0
 80007b0:	0019      	movs	r1, r3
 80007b2:	0020      	movs	r0, r4
 80007b4:	f7ff fca8 	bl	8000108 <__udivsi3>
 80007b8:	0003      	movs	r3, r0
 80007ba:	0018      	movs	r0, r3
 80007bc:	f000 f917 	bl	80009ee <HAL_SYSTICK_Config>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d112      	bne.n	80007ea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b03      	cmp	r3, #3
 80007c8:	d80a      	bhi.n	80007e0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	2301      	movs	r3, #1
 80007ce:	425b      	negs	r3, r3
 80007d0:	2200      	movs	r2, #0
 80007d2:	0018      	movs	r0, r3
 80007d4:	f000 f8e6 	bl	80009a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <HAL_InitTick+0x90>)
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	e00d      	b.n	80007fc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80007e0:	230f      	movs	r3, #15
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
 80007e8:	e008      	b.n	80007fc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007ea:	230f      	movs	r3, #15
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	2201      	movs	r2, #1
 80007f0:	701a      	strb	r2, [r3, #0]
 80007f2:	e003      	b.n	80007fc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007f4:	230f      	movs	r3, #15
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	2201      	movs	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80007fc:	230f      	movs	r3, #15
 80007fe:	18fb      	adds	r3, r7, r3
 8000800:	781b      	ldrb	r3, [r3, #0]
}
 8000802:	0018      	movs	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	b005      	add	sp, #20
 8000808:	bd90      	pop	{r4, r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	2000000c 	.word	0x2000000c
 8000810:	20000004 	.word	0x20000004
 8000814:	20000008 	.word	0x20000008

08000818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <HAL_IncTick+0x18>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <HAL_IncTick+0x1c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	18d2      	adds	r2, r2, r3
 8000826:	4b02      	ldr	r3, [pc, #8]	; (8000830 <HAL_IncTick+0x18>)
 8000828:	601a      	str	r2, [r3, #0]
}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000078 	.word	0x20000078
 8000834:	2000000c 	.word	0x2000000c

08000838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  return uwTick;
 800083c:	4b02      	ldr	r3, [pc, #8]	; (8000848 <HAL_GetTick+0x10>)
 800083e:	681b      	ldr	r3, [r3, #0]
}
 8000840:	0018      	movs	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	20000078 	.word	0x20000078

0800084c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	0002      	movs	r2, r0
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b7f      	cmp	r3, #127	; 0x7f
 800085e:	d809      	bhi.n	8000874 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	001a      	movs	r2, r3
 8000866:	231f      	movs	r3, #31
 8000868:	401a      	ands	r2, r3
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <__NVIC_EnableIRQ+0x30>)
 800086c:	2101      	movs	r1, #1
 800086e:	4091      	lsls	r1, r2
 8000870:	000a      	movs	r2, r1
 8000872:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b002      	add	sp, #8
 800087a:	bd80      	pop	{r7, pc}
 800087c:	e000e100 	.word	0xe000e100

08000880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	0002      	movs	r2, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b7f      	cmp	r3, #127	; 0x7f
 8000894:	d828      	bhi.n	80008e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000896:	4a2f      	ldr	r2, [pc, #188]	; (8000954 <__NVIC_SetPriority+0xd4>)
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b25b      	sxtb	r3, r3
 800089e:	089b      	lsrs	r3, r3, #2
 80008a0:	33c0      	adds	r3, #192	; 0xc0
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	589b      	ldr	r3, [r3, r2]
 80008a6:	1dfa      	adds	r2, r7, #7
 80008a8:	7812      	ldrb	r2, [r2, #0]
 80008aa:	0011      	movs	r1, r2
 80008ac:	2203      	movs	r2, #3
 80008ae:	400a      	ands	r2, r1
 80008b0:	00d2      	lsls	r2, r2, #3
 80008b2:	21ff      	movs	r1, #255	; 0xff
 80008b4:	4091      	lsls	r1, r2
 80008b6:	000a      	movs	r2, r1
 80008b8:	43d2      	mvns	r2, r2
 80008ba:	401a      	ands	r2, r3
 80008bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	019b      	lsls	r3, r3, #6
 80008c2:	22ff      	movs	r2, #255	; 0xff
 80008c4:	401a      	ands	r2, r3
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	0018      	movs	r0, r3
 80008cc:	2303      	movs	r3, #3
 80008ce:	4003      	ands	r3, r0
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d4:	481f      	ldr	r0, [pc, #124]	; (8000954 <__NVIC_SetPriority+0xd4>)
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b25b      	sxtb	r3, r3
 80008dc:	089b      	lsrs	r3, r3, #2
 80008de:	430a      	orrs	r2, r1
 80008e0:	33c0      	adds	r3, #192	; 0xc0
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008e6:	e031      	b.n	800094c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e8:	4a1b      	ldr	r2, [pc, #108]	; (8000958 <__NVIC_SetPriority+0xd8>)
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	0019      	movs	r1, r3
 80008f0:	230f      	movs	r3, #15
 80008f2:	400b      	ands	r3, r1
 80008f4:	3b08      	subs	r3, #8
 80008f6:	089b      	lsrs	r3, r3, #2
 80008f8:	3306      	adds	r3, #6
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	18d3      	adds	r3, r2, r3
 80008fe:	3304      	adds	r3, #4
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	1dfa      	adds	r2, r7, #7
 8000904:	7812      	ldrb	r2, [r2, #0]
 8000906:	0011      	movs	r1, r2
 8000908:	2203      	movs	r2, #3
 800090a:	400a      	ands	r2, r1
 800090c:	00d2      	lsls	r2, r2, #3
 800090e:	21ff      	movs	r1, #255	; 0xff
 8000910:	4091      	lsls	r1, r2
 8000912:	000a      	movs	r2, r1
 8000914:	43d2      	mvns	r2, r2
 8000916:	401a      	ands	r2, r3
 8000918:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	019b      	lsls	r3, r3, #6
 800091e:	22ff      	movs	r2, #255	; 0xff
 8000920:	401a      	ands	r2, r3
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	0018      	movs	r0, r3
 8000928:	2303      	movs	r3, #3
 800092a:	4003      	ands	r3, r0
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000930:	4809      	ldr	r0, [pc, #36]	; (8000958 <__NVIC_SetPriority+0xd8>)
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	001c      	movs	r4, r3
 8000938:	230f      	movs	r3, #15
 800093a:	4023      	ands	r3, r4
 800093c:	3b08      	subs	r3, #8
 800093e:	089b      	lsrs	r3, r3, #2
 8000940:	430a      	orrs	r2, r1
 8000942:	3306      	adds	r3, #6
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	18c3      	adds	r3, r0, r3
 8000948:	3304      	adds	r3, #4
 800094a:	601a      	str	r2, [r3, #0]
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b003      	add	sp, #12
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	e000e100 	.word	0xe000e100
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	1e5a      	subs	r2, r3, #1
 8000968:	2380      	movs	r3, #128	; 0x80
 800096a:	045b      	lsls	r3, r3, #17
 800096c:	429a      	cmp	r2, r3
 800096e:	d301      	bcc.n	8000974 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000970:	2301      	movs	r3, #1
 8000972:	e010      	b.n	8000996 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <SysTick_Config+0x44>)
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	3a01      	subs	r2, #1
 800097a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097c:	2301      	movs	r3, #1
 800097e:	425b      	negs	r3, r3
 8000980:	2103      	movs	r1, #3
 8000982:	0018      	movs	r0, r3
 8000984:	f7ff ff7c 	bl	8000880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <SysTick_Config+0x44>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <SysTick_Config+0x44>)
 8000990:	2207      	movs	r2, #7
 8000992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000994:	2300      	movs	r3, #0
}
 8000996:	0018      	movs	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	b002      	add	sp, #8
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	e000e010 	.word	0xe000e010

080009a4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	210f      	movs	r1, #15
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	1c02      	adds	r2, r0, #0
 80009b4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	0011      	movs	r1, r2
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff ff5d 	bl	8000880 <__NVIC_SetPriority>
}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b004      	add	sp, #16
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	0002      	movs	r2, r0
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b25b      	sxtb	r3, r3
 80009e0:	0018      	movs	r0, r3
 80009e2:	f7ff ff33 	bl	800084c <__NVIC_EnableIRQ>
}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	b002      	add	sp, #8
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	0018      	movs	r0, r3
 80009fa:	f7ff ffaf 	bl	800095c <SysTick_Config>
 80009fe:	0003      	movs	r3, r0
}
 8000a00:	0018      	movs	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b002      	add	sp, #8
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000a16:	e153      	b.n	8000cc0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4091      	lsls	r1, r2
 8000a22:	000a      	movs	r2, r1
 8000a24:	4013      	ands	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d100      	bne.n	8000a30 <HAL_GPIO_Init+0x28>
 8000a2e:	e144      	b.n	8000cba <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d003      	beq.n	8000a40 <HAL_GPIO_Init+0x38>
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	2b12      	cmp	r3, #18
 8000a3e:	d125      	bne.n	8000a8c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	08da      	lsrs	r2, r3, #3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3208      	adds	r2, #8
 8000a48:	0092      	lsls	r2, r2, #2
 8000a4a:	58d3      	ldr	r3, [r2, r3]
 8000a4c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	2207      	movs	r2, #7
 8000a52:	4013      	ands	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	220f      	movs	r2, #15
 8000a58:	409a      	lsls	r2, r3
 8000a5a:	0013      	movs	r3, r2
 8000a5c:	43da      	mvns	r2, r3
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	4013      	ands	r3, r2
 8000a62:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	691b      	ldr	r3, [r3, #16]
 8000a68:	220f      	movs	r2, #15
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	2107      	movs	r1, #7
 8000a70:	400b      	ands	r3, r1
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	409a      	lsls	r2, r3
 8000a76:	0013      	movs	r3, r2
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	08da      	lsrs	r2, r3, #3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3208      	adds	r2, #8
 8000a86:	0092      	lsls	r2, r2, #2
 8000a88:	6979      	ldr	r1, [r7, #20]
 8000a8a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	2203      	movs	r2, #3
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	0013      	movs	r3, r2
 8000a9c:	43da      	mvns	r2, r3
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	401a      	ands	r2, r3
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	409a      	lsls	r2, r3
 8000ab2:	0013      	movs	r3, r2
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d00b      	beq.n	8000ae0 <HAL_GPIO_Init+0xd8>
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d007      	beq.n	8000ae0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad4:	2b11      	cmp	r3, #17
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2b12      	cmp	r3, #18
 8000ade:	d130      	bne.n	8000b42 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	2203      	movs	r2, #3
 8000aec:	409a      	lsls	r2, r3
 8000aee:	0013      	movs	r3, r2
 8000af0:	43da      	mvns	r2, r3
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	4013      	ands	r3, r2
 8000af6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	409a      	lsls	r2, r3
 8000b02:	0013      	movs	r3, r2
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b16:	2201      	movs	r2, #1
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	409a      	lsls	r2, r3
 8000b1c:	0013      	movs	r3, r2
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	4013      	ands	r3, r2
 8000b24:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	091b      	lsrs	r3, r3, #4
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	401a      	ands	r2, r3
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	409a      	lsls	r2, r3
 8000b34:	0013      	movs	r3, r2
 8000b36:	697a      	ldr	r2, [r7, #20]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d017      	beq.n	8000b7a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	2203      	movs	r2, #3
 8000b56:	409a      	lsls	r2, r3
 8000b58:	0013      	movs	r3, r2
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	409a      	lsls	r2, r3
 8000b6c:	0013      	movs	r3, r2
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	2380      	movs	r3, #128	; 0x80
 8000b80:	055b      	lsls	r3, r3, #21
 8000b82:	4013      	ands	r3, r2
 8000b84:	d100      	bne.n	8000b88 <HAL_GPIO_Init+0x180>
 8000b86:	e098      	b.n	8000cba <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000b88:	4a53      	ldr	r2, [pc, #332]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	089b      	lsrs	r3, r3, #2
 8000b8e:	3318      	adds	r3, #24
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	589b      	ldr	r3, [r3, r2]
 8000b94:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	2203      	movs	r2, #3
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	220f      	movs	r2, #15
 8000ba0:	409a      	lsls	r2, r3
 8000ba2:	0013      	movs	r3, r2
 8000ba4:	43da      	mvns	r2, r3
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	23a0      	movs	r3, #160	; 0xa0
 8000bb0:	05db      	lsls	r3, r3, #23
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d019      	beq.n	8000bea <HAL_GPIO_Init+0x1e2>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a48      	ldr	r2, [pc, #288]	; (8000cdc <HAL_GPIO_Init+0x2d4>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d013      	beq.n	8000be6 <HAL_GPIO_Init+0x1de>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a47      	ldr	r2, [pc, #284]	; (8000ce0 <HAL_GPIO_Init+0x2d8>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d00d      	beq.n	8000be2 <HAL_GPIO_Init+0x1da>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a46      	ldr	r2, [pc, #280]	; (8000ce4 <HAL_GPIO_Init+0x2dc>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d007      	beq.n	8000bde <HAL_GPIO_Init+0x1d6>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a45      	ldr	r2, [pc, #276]	; (8000ce8 <HAL_GPIO_Init+0x2e0>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d101      	bne.n	8000bda <HAL_GPIO_Init+0x1d2>
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	e008      	b.n	8000bec <HAL_GPIO_Init+0x1e4>
 8000bda:	2305      	movs	r3, #5
 8000bdc:	e006      	b.n	8000bec <HAL_GPIO_Init+0x1e4>
 8000bde:	2303      	movs	r3, #3
 8000be0:	e004      	b.n	8000bec <HAL_GPIO_Init+0x1e4>
 8000be2:	2302      	movs	r3, #2
 8000be4:	e002      	b.n	8000bec <HAL_GPIO_Init+0x1e4>
 8000be6:	2301      	movs	r3, #1
 8000be8:	e000      	b.n	8000bec <HAL_GPIO_Init+0x1e4>
 8000bea:	2300      	movs	r3, #0
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	2103      	movs	r1, #3
 8000bf0:	400a      	ands	r2, r1
 8000bf2:	00d2      	lsls	r2, r2, #3
 8000bf4:	4093      	lsls	r3, r2
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000bfc:	4936      	ldr	r1, [pc, #216]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	3318      	adds	r3, #24
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000c0a:	4a33      	ldr	r2, [pc, #204]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	58d3      	ldr	r3, [r2, r3]
 8000c10:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	43da      	mvns	r2, r3
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	025b      	lsls	r3, r3, #9
 8000c24:	4013      	ands	r3, r2
 8000c26:	d003      	beq.n	8000c30 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000c30:	4929      	ldr	r1, [pc, #164]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000c38:	4a27      	ldr	r2, [pc, #156]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c3a:	2384      	movs	r3, #132	; 0x84
 8000c3c:	58d3      	ldr	r3, [r2, r3]
 8000c3e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	43da      	mvns	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	4013      	ands	r3, r2
 8000c48:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	029b      	lsls	r3, r3, #10
 8000c52:	4013      	ands	r3, r2
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000c5e:	491e      	ldr	r1, [pc, #120]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c60:	2284      	movs	r2, #132	; 0x84
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	4013      	ands	r3, r2
 8000c74:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	035b      	lsls	r3, r3, #13
 8000c7e:	4013      	ands	r3, r2
 8000c80:	d003      	beq.n	8000c8a <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	43da      	mvns	r2, r3
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	039b      	lsls	r3, r3, #14
 8000ca8:	4013      	ands	r3, r2
 8000caa:	d003      	beq.n	8000cb4 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_GPIO_Init+0x2d0>)
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	40da      	lsrs	r2, r3
 8000cc8:	1e13      	subs	r3, r2, #0
 8000cca:	d000      	beq.n	8000cce <HAL_GPIO_Init+0x2c6>
 8000ccc:	e6a4      	b.n	8000a18 <HAL_GPIO_Init+0x10>
  }
}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b006      	add	sp, #24
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021800 	.word	0x40021800
 8000cdc:	50000400 	.word	0x50000400
 8000ce0:	50000800 	.word	0x50000800
 8000ce4:	50000c00 	.word	0x50000c00
 8000ce8:	50001400 	.word	0x50001400

08000cec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	0002      	movs	r2, r0
 8000cf4:	1dbb      	adds	r3, r7, #6
 8000cf6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	1dba      	adds	r2, r7, #6
 8000cfe:	8812      	ldrh	r2, [r2, #0]
 8000d00:	4013      	ands	r3, r2
 8000d02:	d008      	beq.n	8000d16 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000d06:	1dba      	adds	r2, r7, #6
 8000d08:	8812      	ldrh	r2, [r2, #0]
 8000d0a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000d0c:	1dbb      	adds	r3, r7, #6
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	0018      	movs	r0, r3
 8000d12:	f000 f815 	bl	8000d40 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	1dba      	adds	r2, r7, #6
 8000d1c:	8812      	ldrh	r2, [r2, #0]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d008      	beq.n	8000d34 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000d24:	1dba      	adds	r2, r7, #6
 8000d26:	8812      	ldrh	r2, [r2, #0]
 8000d28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000d2a:	1dbb      	adds	r3, r7, #6
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 f810 	bl	8000d54 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b002      	add	sp, #8
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40021800 	.word	0x40021800

08000d40 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	0002      	movs	r2, r0
 8000d48:	1dbb      	adds	r3, r7, #6
 8000d4a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	0002      	movs	r2, r0
 8000d5c:	1dbb      	adds	r3, r7, #6
 8000d5e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d101      	bne.n	8000d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e1e5      	b.n	8001146 <HAL_RCC_OscConfig+0x3de>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4013      	ands	r3, r2
 8000d82:	d100      	bne.n	8000d86 <HAL_RCC_OscConfig+0x1e>
 8000d84:	e06f      	b.n	8000e66 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d86:	4bc4      	ldr	r3, [pc, #784]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	2238      	movs	r2, #56	; 0x38
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	2b08      	cmp	r3, #8
 8000d94:	d10b      	bne.n	8000dae <HAL_RCC_OscConfig+0x46>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d96:	4bc0      	ldr	r3, [pc, #768]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	2380      	movs	r3, #128	; 0x80
 8000d9c:	029b      	lsls	r3, r3, #10
 8000d9e:	4013      	ands	r3, r2
 8000da0:	d061      	beq.n	8000e66 <HAL_RCC_OscConfig+0xfe>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d15d      	bne.n	8000e66 <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e1cb      	b.n	8001146 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	025b      	lsls	r3, r3, #9
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d107      	bne.n	8000dca <HAL_RCC_OscConfig+0x62>
 8000dba:	4bb7      	ldr	r3, [pc, #732]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4bb6      	ldr	r3, [pc, #728]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	0249      	lsls	r1, r1, #9
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	e020      	b.n	8000e0c <HAL_RCC_OscConfig+0xa4>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	23a0      	movs	r3, #160	; 0xa0
 8000dd0:	02db      	lsls	r3, r3, #11
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d10e      	bne.n	8000df4 <HAL_RCC_OscConfig+0x8c>
 8000dd6:	4bb0      	ldr	r3, [pc, #704]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4baf      	ldr	r3, [pc, #700]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	02c9      	lsls	r1, r1, #11
 8000de0:	430a      	orrs	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	4bac      	ldr	r3, [pc, #688]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4bab      	ldr	r3, [pc, #684]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000dea:	2180      	movs	r1, #128	; 0x80
 8000dec:	0249      	lsls	r1, r1, #9
 8000dee:	430a      	orrs	r2, r1
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e00b      	b.n	8000e0c <HAL_RCC_OscConfig+0xa4>
 8000df4:	4ba8      	ldr	r3, [pc, #672]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4ba7      	ldr	r3, [pc, #668]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000dfa:	49a8      	ldr	r1, [pc, #672]	; (800109c <HAL_RCC_OscConfig+0x334>)
 8000dfc:	400a      	ands	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	4ba5      	ldr	r3, [pc, #660]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4ba4      	ldr	r3, [pc, #656]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000e06:	49a6      	ldr	r1, [pc, #664]	; (80010a0 <HAL_RCC_OscConfig+0x338>)
 8000e08:	400a      	ands	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d014      	beq.n	8000e3e <HAL_RCC_OscConfig+0xd6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e14:	f7ff fd10 	bl	8000838 <HAL_GetTick>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e1c:	e008      	b.n	8000e30 <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e1e:	f7ff fd0b 	bl	8000838 <HAL_GetTick>
 8000e22:	0002      	movs	r2, r0
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b64      	cmp	r3, #100	; 0x64
 8000e2a:	d901      	bls.n	8000e30 <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e18a      	b.n	8001146 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e30:	4b99      	ldr	r3, [pc, #612]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	029b      	lsls	r3, r3, #10
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d0f0      	beq.n	8000e1e <HAL_RCC_OscConfig+0xb6>
 8000e3c:	e013      	b.n	8000e66 <HAL_RCC_OscConfig+0xfe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e3e:	f7ff fcfb 	bl	8000838 <HAL_GetTick>
 8000e42:	0003      	movs	r3, r0
 8000e44:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e46:	e008      	b.n	8000e5a <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e48:	f7ff fcf6 	bl	8000838 <HAL_GetTick>
 8000e4c:	0002      	movs	r2, r0
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b64      	cmp	r3, #100	; 0x64
 8000e54:	d901      	bls.n	8000e5a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e175      	b.n	8001146 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e5a:	4b8f      	ldr	r3, [pc, #572]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	029b      	lsls	r3, r3, #10
 8000e62:	4013      	ands	r3, r2
 8000e64:	d1f0      	bne.n	8000e48 <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d100      	bne.n	8000e72 <HAL_RCC_OscConfig+0x10a>
 8000e70:	e08c      	b.n	8000f8c <HAL_RCC_OscConfig+0x224>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e72:	4b89      	ldr	r3, [pc, #548]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2238      	movs	r2, #56	; 0x38
 8000e78:	4013      	ands	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d135      	bne.n	8000eee <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e82:	4b85      	ldr	r3, [pc, #532]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d005      	beq.n	8000e9a <HAL_RCC_OscConfig+0x132>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e155      	b.n	8001146 <HAL_RCC_OscConfig+0x3de>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e9a:	4b7f      	ldr	r3, [pc, #508]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	4a81      	ldr	r2, [pc, #516]	; (80010a4 <HAL_RCC_OscConfig+0x33c>)
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	0019      	movs	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	021a      	lsls	r2, r3, #8
 8000eaa:	4b7b      	ldr	r3, [pc, #492]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000eac:	430a      	orrs	r2, r1
 8000eae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d112      	bne.n	8000edc <HAL_RCC_OscConfig+0x174>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000eb6:	4b78      	ldr	r3, [pc, #480]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a7b      	ldr	r2, [pc, #492]	; (80010a8 <HAL_RCC_OscConfig+0x340>)
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	0019      	movs	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	691a      	ldr	r2, [r3, #16]
 8000ec4:	4b74      	ldr	r3, [pc, #464]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000eca:	4b73      	ldr	r3, [pc, #460]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	0adb      	lsrs	r3, r3, #11
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	4a75      	ldr	r2, [pc, #468]	; (80010ac <HAL_RCC_OscConfig+0x344>)
 8000ed6:	40da      	lsrs	r2, r3
 8000ed8:	4b75      	ldr	r3, [pc, #468]	; (80010b0 <HAL_RCC_OscConfig+0x348>)
 8000eda:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000edc:	4b75      	ldr	r3, [pc, #468]	; (80010b4 <HAL_RCC_OscConfig+0x34c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff fc4f 	bl	8000784 <HAL_InitTick>
 8000ee6:	1e03      	subs	r3, r0, #0
 8000ee8:	d050      	beq.n	8000f8c <HAL_RCC_OscConfig+0x224>
        {
          return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e12b      	b.n	8001146 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d030      	beq.n	8000f58 <HAL_RCC_OscConfig+0x1f0>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000ef6:	4b68      	ldr	r3, [pc, #416]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a6b      	ldr	r2, [pc, #428]	; (80010a8 <HAL_RCC_OscConfig+0x340>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	0019      	movs	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	691a      	ldr	r2, [r3, #16]
 8000f04:	4b64      	ldr	r3, [pc, #400]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000f06:	430a      	orrs	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8000f0a:	4b63      	ldr	r3, [pc, #396]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	4b62      	ldr	r3, [pc, #392]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000f10:	2180      	movs	r1, #128	; 0x80
 8000f12:	0049      	lsls	r1, r1, #1
 8000f14:	430a      	orrs	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f18:	f7ff fc8e 	bl	8000838 <HAL_GetTick>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f20:	e008      	b.n	8000f34 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f22:	f7ff fc89 	bl	8000838 <HAL_GetTick>
 8000f26:	0002      	movs	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e108      	b.n	8001146 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f34:	4b58      	ldr	r3, [pc, #352]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d0f0      	beq.n	8000f22 <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f40:	4b55      	ldr	r3, [pc, #340]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	4a57      	ldr	r2, [pc, #348]	; (80010a4 <HAL_RCC_OscConfig+0x33c>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	0019      	movs	r1, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	021a      	lsls	r2, r3, #8
 8000f50:	4b51      	ldr	r3, [pc, #324]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000f52:	430a      	orrs	r2, r1
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	e019      	b.n	8000f8c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8000f58:	4b4f      	ldr	r3, [pc, #316]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b4e      	ldr	r3, [pc, #312]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000f5e:	4956      	ldr	r1, [pc, #344]	; (80010b8 <HAL_RCC_OscConfig+0x350>)
 8000f60:	400a      	ands	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f64:	f7ff fc68 	bl	8000838 <HAL_GetTick>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f6c:	e008      	b.n	8000f80 <HAL_RCC_OscConfig+0x218>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f6e:	f7ff fc63 	bl	8000838 <HAL_GetTick>
 8000f72:	0002      	movs	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e0e2      	b.n	8001146 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f80:	4b45      	ldr	r3, [pc, #276]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d1f0      	bne.n	8000f6e <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2208      	movs	r2, #8
 8000f92:	4013      	ands	r3, r2
 8000f94:	d047      	beq.n	8001026 <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000f96:	4b40      	ldr	r3, [pc, #256]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2238      	movs	r2, #56	; 0x38
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	2b18      	cmp	r3, #24
 8000fa0:	d10a      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x250>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000fa2:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d03c      	beq.n	8001026 <HAL_RCC_OscConfig+0x2be>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d138      	bne.n	8001026 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e0c6      	b.n	8001146 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d019      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000fc0:	4b35      	ldr	r3, [pc, #212]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000fc2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fc4:	4b34      	ldr	r3, [pc, #208]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fc34 	bl	8000838 <HAL_GetTick>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fd6:	f7ff fc2f 	bl	8000838 <HAL_GetTick>
 8000fda:	0002      	movs	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e0ae      	b.n	8001146 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000fe8:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fec:	2202      	movs	r2, #2
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d0f1      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x26e>
 8000ff2:	e018      	b.n	8001026 <HAL_RCC_OscConfig+0x2be>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000ff4:	4b28      	ldr	r3, [pc, #160]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000ff6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	438a      	bics	r2, r1
 8000ffe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001000:	f7ff fc1a 	bl	8000838 <HAL_GetTick>
 8001004:	0003      	movs	r3, r0
 8001006:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001008:	e008      	b.n	800101c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800100a:	f7ff fc15 	bl	8000838 <HAL_GetTick>
 800100e:	0002      	movs	r2, r0
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d901      	bls.n	800101c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e094      	b.n	8001146 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001020:	2202      	movs	r2, #2
 8001022:	4013      	ands	r3, r2
 8001024:	d1f1      	bne.n	800100a <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2204      	movs	r2, #4
 800102c:	4013      	ands	r3, r2
 800102e:	d100      	bne.n	8001032 <HAL_RCC_OscConfig+0x2ca>
 8001030:	e088      	b.n	8001144 <HAL_RCC_OscConfig+0x3dc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001032:	230f      	movs	r3, #15
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	2238      	movs	r2, #56	; 0x38
 8001040:	4013      	ands	r3, r2
 8001042:	2b20      	cmp	r3, #32
 8001044:	d10c      	bne.n	8001060 <HAL_RCC_OscConfig+0x2f8>
    {
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8001048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800104a:	2202      	movs	r2, #2
 800104c:	4013      	ands	r3, r2
 800104e:	d100      	bne.n	8001052 <HAL_RCC_OscConfig+0x2ea>
 8001050:	e078      	b.n	8001144 <HAL_RCC_OscConfig+0x3dc>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d000      	beq.n	800105c <HAL_RCC_OscConfig+0x2f4>
 800105a:	e073      	b.n	8001144 <HAL_RCC_OscConfig+0x3dc>
      {
        return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e072      	b.n	8001146 <HAL_RCC_OscConfig+0x3de>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d106      	bne.n	8001076 <HAL_RCC_OscConfig+0x30e>
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 800106a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 800106e:	2101      	movs	r1, #1
 8001070:	430a      	orrs	r2, r1
 8001072:	65da      	str	r2, [r3, #92]	; 0x5c
 8001074:	e02e      	b.n	80010d4 <HAL_RCC_OscConfig+0x36c>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	2b05      	cmp	r3, #5
 800107c:	d11e      	bne.n	80010bc <HAL_RCC_OscConfig+0x354>
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8001080:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8001084:	2104      	movs	r1, #4
 8001086:	430a      	orrs	r2, r1
 8001088:	65da      	str	r2, [r3, #92]	; 0x5c
 800108a:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 800108c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800108e:	4b02      	ldr	r3, [pc, #8]	; (8001098 <HAL_RCC_OscConfig+0x330>)
 8001090:	2101      	movs	r1, #1
 8001092:	430a      	orrs	r2, r1
 8001094:	65da      	str	r2, [r3, #92]	; 0x5c
 8001096:	e01d      	b.n	80010d4 <HAL_RCC_OscConfig+0x36c>
 8001098:	40021000 	.word	0x40021000
 800109c:	fffeffff 	.word	0xfffeffff
 80010a0:	fffbffff 	.word	0xfffbffff
 80010a4:	ffff80ff 	.word	0xffff80ff
 80010a8:	ffffc7ff 	.word	0xffffc7ff
 80010ac:	02dc6c00 	.word	0x02dc6c00
 80010b0:	20000004 	.word	0x20000004
 80010b4:	20000008 	.word	0x20000008
 80010b8:	fffffeff 	.word	0xfffffeff
 80010bc:	4b24      	ldr	r3, [pc, #144]	; (8001150 <HAL_RCC_OscConfig+0x3e8>)
 80010be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010c0:	4b23      	ldr	r3, [pc, #140]	; (8001150 <HAL_RCC_OscConfig+0x3e8>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	438a      	bics	r2, r1
 80010c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80010c8:	4b21      	ldr	r3, [pc, #132]	; (8001150 <HAL_RCC_OscConfig+0x3e8>)
 80010ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010cc:	4b20      	ldr	r3, [pc, #128]	; (8001150 <HAL_RCC_OscConfig+0x3e8>)
 80010ce:	2104      	movs	r1, #4
 80010d0:	438a      	bics	r2, r1
 80010d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d014      	beq.n	8001106 <HAL_RCC_OscConfig+0x39e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010dc:	f7ff fbac 	bl	8000838 <HAL_GetTick>
 80010e0:	0003      	movs	r3, r0
 80010e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80010e4:	e009      	b.n	80010fa <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e6:	f7ff fba7 	bl	8000838 <HAL_GetTick>
 80010ea:	0002      	movs	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	4a18      	ldr	r2, [pc, #96]	; (8001154 <HAL_RCC_OscConfig+0x3ec>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e025      	b.n	8001146 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_RCC_OscConfig+0x3e8>)
 80010fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fe:	2202      	movs	r2, #2
 8001100:	4013      	ands	r3, r2
 8001102:	d0f0      	beq.n	80010e6 <HAL_RCC_OscConfig+0x37e>
 8001104:	e013      	b.n	800112e <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001106:	f7ff fb97 	bl	8000838 <HAL_GetTick>
 800110a:	0003      	movs	r3, r0
 800110c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800110e:	e009      	b.n	8001124 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001110:	f7ff fb92 	bl	8000838 <HAL_GetTick>
 8001114:	0002      	movs	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <HAL_RCC_OscConfig+0x3ec>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e010      	b.n	8001146 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_RCC_OscConfig+0x3e8>)
 8001126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001128:	2202      	movs	r2, #2
 800112a:	4013      	ands	r3, r2
 800112c:	d1f0      	bne.n	8001110 <HAL_RCC_OscConfig+0x3a8>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800112e:	230f      	movs	r3, #15
 8001130:	18fb      	adds	r3, r7, r3
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d105      	bne.n	8001144 <HAL_RCC_OscConfig+0x3dc>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_RCC_OscConfig+0x3e8>)
 800113a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <HAL_RCC_OscConfig+0x3e8>)
 800113e:	4906      	ldr	r1, [pc, #24]	; (8001158 <HAL_RCC_OscConfig+0x3f0>)
 8001140:	400a      	ands	r2, r1
 8001142:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	0018      	movs	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	b006      	add	sp, #24
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	40021000 	.word	0x40021000
 8001154:	00001388 	.word	0x00001388
 8001158:	efffffff 	.word	0xefffffff

0800115c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e0e9      	b.n	8001344 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001170:	4b76      	ldr	r3, [pc, #472]	; (800134c <HAL_RCC_ClockConfig+0x1f0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2207      	movs	r2, #7
 8001176:	4013      	ands	r3, r2
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	d91e      	bls.n	80011bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117e:	4b73      	ldr	r3, [pc, #460]	; (800134c <HAL_RCC_ClockConfig+0x1f0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2207      	movs	r2, #7
 8001184:	4393      	bics	r3, r2
 8001186:	0019      	movs	r1, r3
 8001188:	4b70      	ldr	r3, [pc, #448]	; (800134c <HAL_RCC_ClockConfig+0x1f0>)
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001190:	f7ff fb52 	bl	8000838 <HAL_GetTick>
 8001194:	0003      	movs	r3, r0
 8001196:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001198:	e009      	b.n	80011ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800119a:	f7ff fb4d 	bl	8000838 <HAL_GetTick>
 800119e:	0002      	movs	r2, r0
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	4a6a      	ldr	r2, [pc, #424]	; (8001350 <HAL_RCC_ClockConfig+0x1f4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e0ca      	b.n	8001344 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011ae:	4b67      	ldr	r3, [pc, #412]	; (800134c <HAL_RCC_ClockConfig+0x1f0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2207      	movs	r2, #7
 80011b4:	4013      	ands	r3, r2
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d1ee      	bne.n	800119a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2202      	movs	r2, #2
 80011c2:	4013      	ands	r3, r2
 80011c4:	d017      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2204      	movs	r2, #4
 80011cc:	4013      	ands	r3, r2
 80011ce:	d008      	beq.n	80011e2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80011d0:	4b60      	ldr	r3, [pc, #384]	; (8001354 <HAL_RCC_ClockConfig+0x1f8>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	4a60      	ldr	r2, [pc, #384]	; (8001358 <HAL_RCC_ClockConfig+0x1fc>)
 80011d6:	401a      	ands	r2, r3
 80011d8:	4b5e      	ldr	r3, [pc, #376]	; (8001354 <HAL_RCC_ClockConfig+0x1f8>)
 80011da:	21b0      	movs	r1, #176	; 0xb0
 80011dc:	0109      	lsls	r1, r1, #4
 80011de:	430a      	orrs	r2, r1
 80011e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011e2:	4b5c      	ldr	r3, [pc, #368]	; (8001354 <HAL_RCC_ClockConfig+0x1f8>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	4a5d      	ldr	r2, [pc, #372]	; (800135c <HAL_RCC_ClockConfig+0x200>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	0019      	movs	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	4b58      	ldr	r3, [pc, #352]	; (8001354 <HAL_RCC_ClockConfig+0x1f8>)
 80011f2:	430a      	orrs	r2, r1
 80011f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2201      	movs	r2, #1
 80011fc:	4013      	ands	r3, r2
 80011fe:	d055      	beq.n	80012ac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001200:	4b54      	ldr	r3, [pc, #336]	; (8001354 <HAL_RCC_ClockConfig+0x1f8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	221c      	movs	r2, #28
 8001206:	4393      	bics	r3, r2
 8001208:	0019      	movs	r1, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	4b51      	ldr	r3, [pc, #324]	; (8001354 <HAL_RCC_ClockConfig+0x1f8>)
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d107      	bne.n	800122c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800121c:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <HAL_RCC_ClockConfig+0x1f8>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	029b      	lsls	r3, r3, #10
 8001224:	4013      	ands	r3, r2
 8001226:	d11f      	bne.n	8001268 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e08b      	b.n	8001344 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d107      	bne.n	8001244 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001234:	4b47      	ldr	r3, [pc, #284]	; (8001354 <HAL_RCC_ClockConfig+0x1f8>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	4013      	ands	r3, r2
 800123e:	d113      	bne.n	8001268 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e07f      	b.n	8001344 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b03      	cmp	r3, #3
 800124a:	d106      	bne.n	800125a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800124c:	4b41      	ldr	r3, [pc, #260]	; (8001354 <HAL_RCC_ClockConfig+0x1f8>)
 800124e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001250:	2202      	movs	r2, #2
 8001252:	4013      	ands	r3, r2
 8001254:	d108      	bne.n	8001268 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e074      	b.n	8001344 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800125a:	4b3e      	ldr	r3, [pc, #248]	; (8001354 <HAL_RCC_ClockConfig+0x1f8>)
 800125c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125e:	2202      	movs	r2, #2
 8001260:	4013      	ands	r3, r2
 8001262:	d101      	bne.n	8001268 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e06d      	b.n	8001344 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001268:	4b3a      	ldr	r3, [pc, #232]	; (8001354 <HAL_RCC_ClockConfig+0x1f8>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2207      	movs	r2, #7
 800126e:	4393      	bics	r3, r2
 8001270:	0019      	movs	r1, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	4b37      	ldr	r3, [pc, #220]	; (8001354 <HAL_RCC_ClockConfig+0x1f8>)
 8001278:	430a      	orrs	r2, r1
 800127a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800127c:	f7ff fadc 	bl	8000838 <HAL_GetTick>
 8001280:	0003      	movs	r3, r0
 8001282:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001284:	e009      	b.n	800129a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001286:	f7ff fad7 	bl	8000838 <HAL_GetTick>
 800128a:	0002      	movs	r2, r0
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	4a2f      	ldr	r2, [pc, #188]	; (8001350 <HAL_RCC_ClockConfig+0x1f4>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d901      	bls.n	800129a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e054      	b.n	8001344 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800129a:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <HAL_RCC_ClockConfig+0x1f8>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2238      	movs	r2, #56	; 0x38
 80012a0:	401a      	ands	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d1ec      	bne.n	8001286 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012ac:	4b27      	ldr	r3, [pc, #156]	; (800134c <HAL_RCC_ClockConfig+0x1f0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2207      	movs	r2, #7
 80012b2:	4013      	ands	r3, r2
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d21e      	bcs.n	80012f8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ba:	4b24      	ldr	r3, [pc, #144]	; (800134c <HAL_RCC_ClockConfig+0x1f0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2207      	movs	r2, #7
 80012c0:	4393      	bics	r3, r2
 80012c2:	0019      	movs	r1, r3
 80012c4:	4b21      	ldr	r3, [pc, #132]	; (800134c <HAL_RCC_ClockConfig+0x1f0>)
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80012cc:	f7ff fab4 	bl	8000838 <HAL_GetTick>
 80012d0:	0003      	movs	r3, r0
 80012d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012d4:	e009      	b.n	80012ea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d6:	f7ff faaf 	bl	8000838 <HAL_GetTick>
 80012da:	0002      	movs	r2, r0
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	4a1b      	ldr	r2, [pc, #108]	; (8001350 <HAL_RCC_ClockConfig+0x1f4>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e02c      	b.n	8001344 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012ea:	4b18      	ldr	r3, [pc, #96]	; (800134c <HAL_RCC_ClockConfig+0x1f0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2207      	movs	r2, #7
 80012f0:	4013      	ands	r3, r2
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d1ee      	bne.n	80012d6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2204      	movs	r2, #4
 80012fe:	4013      	ands	r3, r2
 8001300:	d009      	beq.n	8001316 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_RCC_ClockConfig+0x1f8>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	4a16      	ldr	r2, [pc, #88]	; (8001360 <HAL_RCC_ClockConfig+0x204>)
 8001308:	4013      	ands	r3, r2
 800130a:	0019      	movs	r1, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_RCC_ClockConfig+0x1f8>)
 8001312:	430a      	orrs	r2, r1
 8001314:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001316:	f000 f82b 	bl	8001370 <HAL_RCC_GetSysClockFreq>
 800131a:	0001      	movs	r1, r0
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_RCC_ClockConfig+0x1f8>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	220f      	movs	r2, #15
 8001324:	401a      	ands	r2, r3
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_RCC_ClockConfig+0x208>)
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	58d3      	ldr	r3, [r2, r3]
 800132c:	221f      	movs	r2, #31
 800132e:	4013      	ands	r3, r2
 8001330:	000a      	movs	r2, r1
 8001332:	40da      	lsrs	r2, r3
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_RCC_ClockConfig+0x20c>)
 8001336:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_RCC_ClockConfig+0x210>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	0018      	movs	r0, r3
 800133e:	f7ff fa21 	bl	8000784 <HAL_InitTick>
 8001342:	0003      	movs	r3, r0
}
 8001344:	0018      	movs	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	b004      	add	sp, #16
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40022000 	.word	0x40022000
 8001350:	00001388 	.word	0x00001388
 8001354:	40021000 	.word	0x40021000
 8001358:	ffff84ff 	.word	0xffff84ff
 800135c:	fffff0ff 	.word	0xfffff0ff
 8001360:	ffff8fff 	.word	0xffff8fff
 8001364:	080024cc 	.word	0x080024cc
 8001368:	20000004 	.word	0x20000004
 800136c:	20000008 	.word	0x20000008

08001370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2238      	movs	r2, #56	; 0x38
 800137c:	4013      	ands	r3, r2
 800137e:	d10f      	bne.n	80013a0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	0adb      	lsrs	r3, r3, #11
 8001386:	2207      	movs	r2, #7
 8001388:	4013      	ands	r3, r2
 800138a:	2201      	movs	r2, #1
 800138c:	409a      	lsls	r2, r3
 800138e:	0013      	movs	r3, r2
 8001390:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001392:	6839      	ldr	r1, [r7, #0]
 8001394:	4815      	ldr	r0, [pc, #84]	; (80013ec <HAL_RCC_GetSysClockFreq+0x7c>)
 8001396:	f7fe feb7 	bl	8000108 <__udivsi3>
 800139a:	0003      	movs	r3, r0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	e01e      	b.n	80013de <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_RCC_GetSysClockFreq+0x78>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	2238      	movs	r2, #56	; 0x38
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d102      	bne.n	80013b2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_RCC_GetSysClockFreq+0x7c>)
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	e015      	b.n	80013de <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <HAL_RCC_GetSysClockFreq+0x78>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2238      	movs	r2, #56	; 0x38
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b20      	cmp	r3, #32
 80013bc:	d103      	bne.n	80013c6 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	e00b      	b.n	80013de <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_RCC_GetSysClockFreq+0x78>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2238      	movs	r2, #56	; 0x38
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b18      	cmp	r3, #24
 80013d0:	d103      	bne.n	80013da <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80013d2:	23fa      	movs	r3, #250	; 0xfa
 80013d4:	01db      	lsls	r3, r3, #7
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	e001      	b.n	80013de <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80013de:	687b      	ldr	r3, [r7, #4]
}
 80013e0:	0018      	movs	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b002      	add	sp, #8
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000
 80013ec:	02dc6c00 	.word	0x02dc6c00

080013f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e04a      	b.n	8001498 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	223d      	movs	r2, #61	; 0x3d
 8001406:	5c9b      	ldrb	r3, [r3, r2]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d107      	bne.n	800141e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	223c      	movs	r2, #60	; 0x3c
 8001412:	2100      	movs	r1, #0
 8001414:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff f8e9 	bl	80005f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	223d      	movs	r2, #61	; 0x3d
 8001422:	2102      	movs	r1, #2
 8001424:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3304      	adds	r3, #4
 800142e:	0019      	movs	r1, r3
 8001430:	0010      	movs	r0, r2
 8001432:	f000 fb43 	bl	8001abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2248      	movs	r2, #72	; 0x48
 800143a:	2101      	movs	r1, #1
 800143c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	223e      	movs	r2, #62	; 0x3e
 8001442:	2101      	movs	r1, #1
 8001444:	5499      	strb	r1, [r3, r2]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	223f      	movs	r2, #63	; 0x3f
 800144a:	2101      	movs	r1, #1
 800144c:	5499      	strb	r1, [r3, r2]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2240      	movs	r2, #64	; 0x40
 8001452:	2101      	movs	r1, #1
 8001454:	5499      	strb	r1, [r3, r2]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2241      	movs	r2, #65	; 0x41
 800145a:	2101      	movs	r1, #1
 800145c:	5499      	strb	r1, [r3, r2]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2242      	movs	r2, #66	; 0x42
 8001462:	2101      	movs	r1, #1
 8001464:	5499      	strb	r1, [r3, r2]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2243      	movs	r2, #67	; 0x43
 800146a:	2101      	movs	r1, #1
 800146c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2244      	movs	r2, #68	; 0x44
 8001472:	2101      	movs	r1, #1
 8001474:	5499      	strb	r1, [r3, r2]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2245      	movs	r2, #69	; 0x45
 800147a:	2101      	movs	r1, #1
 800147c:	5499      	strb	r1, [r3, r2]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2246      	movs	r2, #70	; 0x46
 8001482:	2101      	movs	r1, #1
 8001484:	5499      	strb	r1, [r3, r2]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2247      	movs	r2, #71	; 0x47
 800148a:	2101      	movs	r1, #1
 800148c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	223d      	movs	r2, #61	; 0x3d
 8001492:	2101      	movs	r1, #1
 8001494:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b002      	add	sp, #8
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e04a      	b.n	8001548 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	223d      	movs	r2, #61	; 0x3d
 80014b6:	5c9b      	ldrb	r3, [r3, r2]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d107      	bne.n	80014ce <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	223c      	movs	r2, #60	; 0x3c
 80014c2:	2100      	movs	r1, #0
 80014c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	0018      	movs	r0, r3
 80014ca:	f000 f841 	bl	8001550 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	223d      	movs	r2, #61	; 0x3d
 80014d2:	2102      	movs	r1, #2
 80014d4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3304      	adds	r3, #4
 80014de:	0019      	movs	r1, r3
 80014e0:	0010      	movs	r0, r2
 80014e2:	f000 faeb 	bl	8001abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2248      	movs	r2, #72	; 0x48
 80014ea:	2101      	movs	r1, #1
 80014ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	223e      	movs	r2, #62	; 0x3e
 80014f2:	2101      	movs	r1, #1
 80014f4:	5499      	strb	r1, [r3, r2]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	223f      	movs	r2, #63	; 0x3f
 80014fa:	2101      	movs	r1, #1
 80014fc:	5499      	strb	r1, [r3, r2]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2240      	movs	r2, #64	; 0x40
 8001502:	2101      	movs	r1, #1
 8001504:	5499      	strb	r1, [r3, r2]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2241      	movs	r2, #65	; 0x41
 800150a:	2101      	movs	r1, #1
 800150c:	5499      	strb	r1, [r3, r2]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2242      	movs	r2, #66	; 0x42
 8001512:	2101      	movs	r1, #1
 8001514:	5499      	strb	r1, [r3, r2]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2243      	movs	r2, #67	; 0x43
 800151a:	2101      	movs	r1, #1
 800151c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2244      	movs	r2, #68	; 0x44
 8001522:	2101      	movs	r1, #1
 8001524:	5499      	strb	r1, [r3, r2]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2245      	movs	r2, #69	; 0x45
 800152a:	2101      	movs	r1, #1
 800152c:	5499      	strb	r1, [r3, r2]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2246      	movs	r2, #70	; 0x46
 8001532:	2101      	movs	r1, #1
 8001534:	5499      	strb	r1, [r3, r2]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2247      	movs	r2, #71	; 0x47
 800153a:	2101      	movs	r1, #1
 800153c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	223d      	movs	r2, #61	; 0x3d
 8001542:	2101      	movs	r1, #1
 8001544:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	0018      	movs	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	b002      	add	sp, #8
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d108      	bne.n	8001582 <HAL_TIM_PWM_Start+0x22>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	223e      	movs	r2, #62	; 0x3e
 8001574:	5c9b      	ldrb	r3, [r3, r2]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	3b01      	subs	r3, #1
 800157a:	1e5a      	subs	r2, r3, #1
 800157c:	4193      	sbcs	r3, r2
 800157e:	b2db      	uxtb	r3, r3
 8001580:	e037      	b.n	80015f2 <HAL_TIM_PWM_Start+0x92>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b04      	cmp	r3, #4
 8001586:	d108      	bne.n	800159a <HAL_TIM_PWM_Start+0x3a>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	223f      	movs	r2, #63	; 0x3f
 800158c:	5c9b      	ldrb	r3, [r3, r2]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	3b01      	subs	r3, #1
 8001592:	1e5a      	subs	r2, r3, #1
 8001594:	4193      	sbcs	r3, r2
 8001596:	b2db      	uxtb	r3, r3
 8001598:	e02b      	b.n	80015f2 <HAL_TIM_PWM_Start+0x92>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2b08      	cmp	r3, #8
 800159e:	d108      	bne.n	80015b2 <HAL_TIM_PWM_Start+0x52>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2240      	movs	r2, #64	; 0x40
 80015a4:	5c9b      	ldrb	r3, [r3, r2]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	3b01      	subs	r3, #1
 80015aa:	1e5a      	subs	r2, r3, #1
 80015ac:	4193      	sbcs	r3, r2
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	e01f      	b.n	80015f2 <HAL_TIM_PWM_Start+0x92>
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	2b0c      	cmp	r3, #12
 80015b6:	d108      	bne.n	80015ca <HAL_TIM_PWM_Start+0x6a>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2241      	movs	r2, #65	; 0x41
 80015bc:	5c9b      	ldrb	r3, [r3, r2]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	3b01      	subs	r3, #1
 80015c2:	1e5a      	subs	r2, r3, #1
 80015c4:	4193      	sbcs	r3, r2
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	e013      	b.n	80015f2 <HAL_TIM_PWM_Start+0x92>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2b10      	cmp	r3, #16
 80015ce:	d108      	bne.n	80015e2 <HAL_TIM_PWM_Start+0x82>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2242      	movs	r2, #66	; 0x42
 80015d4:	5c9b      	ldrb	r3, [r3, r2]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	3b01      	subs	r3, #1
 80015da:	1e5a      	subs	r2, r3, #1
 80015dc:	4193      	sbcs	r3, r2
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	e007      	b.n	80015f2 <HAL_TIM_PWM_Start+0x92>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2243      	movs	r2, #67	; 0x43
 80015e6:	5c9b      	ldrb	r3, [r3, r2]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	3b01      	subs	r3, #1
 80015ec:	1e5a      	subs	r2, r3, #1
 80015ee:	4193      	sbcs	r3, r2
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e07b      	b.n	80016f2 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d104      	bne.n	800160a <HAL_TIM_PWM_Start+0xaa>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	223e      	movs	r2, #62	; 0x3e
 8001604:	2102      	movs	r1, #2
 8001606:	5499      	strb	r1, [r3, r2]
 8001608:	e023      	b.n	8001652 <HAL_TIM_PWM_Start+0xf2>
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	2b04      	cmp	r3, #4
 800160e:	d104      	bne.n	800161a <HAL_TIM_PWM_Start+0xba>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	223f      	movs	r2, #63	; 0x3f
 8001614:	2102      	movs	r1, #2
 8001616:	5499      	strb	r1, [r3, r2]
 8001618:	e01b      	b.n	8001652 <HAL_TIM_PWM_Start+0xf2>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2b08      	cmp	r3, #8
 800161e:	d104      	bne.n	800162a <HAL_TIM_PWM_Start+0xca>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2240      	movs	r2, #64	; 0x40
 8001624:	2102      	movs	r1, #2
 8001626:	5499      	strb	r1, [r3, r2]
 8001628:	e013      	b.n	8001652 <HAL_TIM_PWM_Start+0xf2>
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	2b0c      	cmp	r3, #12
 800162e:	d104      	bne.n	800163a <HAL_TIM_PWM_Start+0xda>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2241      	movs	r2, #65	; 0x41
 8001634:	2102      	movs	r1, #2
 8001636:	5499      	strb	r1, [r3, r2]
 8001638:	e00b      	b.n	8001652 <HAL_TIM_PWM_Start+0xf2>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2b10      	cmp	r3, #16
 800163e:	d104      	bne.n	800164a <HAL_TIM_PWM_Start+0xea>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2242      	movs	r2, #66	; 0x42
 8001644:	2102      	movs	r1, #2
 8001646:	5499      	strb	r1, [r3, r2]
 8001648:	e003      	b.n	8001652 <HAL_TIM_PWM_Start+0xf2>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2243      	movs	r2, #67	; 0x43
 800164e:	2102      	movs	r1, #2
 8001650:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6839      	ldr	r1, [r7, #0]
 8001658:	2201      	movs	r2, #1
 800165a:	0018      	movs	r0, r3
 800165c:	f000 fdd2 	bl	8002204 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a25      	ldr	r2, [pc, #148]	; (80016fc <HAL_TIM_PWM_Start+0x19c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d009      	beq.n	800167e <HAL_TIM_PWM_Start+0x11e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a24      	ldr	r2, [pc, #144]	; (8001700 <HAL_TIM_PWM_Start+0x1a0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d004      	beq.n	800167e <HAL_TIM_PWM_Start+0x11e>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a22      	ldr	r2, [pc, #136]	; (8001704 <HAL_TIM_PWM_Start+0x1a4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d101      	bne.n	8001682 <HAL_TIM_PWM_Start+0x122>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <HAL_TIM_PWM_Start+0x124>
 8001682:	2300      	movs	r3, #0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	0209      	lsls	r1, r1, #8
 8001696:	430a      	orrs	r2, r1
 8001698:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a17      	ldr	r2, [pc, #92]	; (80016fc <HAL_TIM_PWM_Start+0x19c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d004      	beq.n	80016ae <HAL_TIM_PWM_Start+0x14e>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a17      	ldr	r2, [pc, #92]	; (8001708 <HAL_TIM_PWM_Start+0x1a8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d116      	bne.n	80016dc <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4a15      	ldr	r2, [pc, #84]	; (800170c <HAL_TIM_PWM_Start+0x1ac>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2b06      	cmp	r3, #6
 80016be:	d016      	beq.n	80016ee <HAL_TIM_PWM_Start+0x18e>
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	025b      	lsls	r3, r3, #9
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d011      	beq.n	80016ee <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2101      	movs	r1, #1
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016da:	e008      	b.n	80016ee <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2101      	movs	r1, #1
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e000      	b.n	80016f0 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016ee:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	0018      	movs	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b004      	add	sp, #16
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	40012c00 	.word	0x40012c00
 8001700:	40014400 	.word	0x40014400
 8001704:	40014800 	.word	0x40014800
 8001708:	40000400 	.word	0x40000400
 800170c:	00010007 	.word	0x00010007

08001710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800171c:	2317      	movs	r3, #23
 800171e:	18fb      	adds	r3, r7, r3
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	223c      	movs	r2, #60	; 0x3c
 8001728:	5c9b      	ldrb	r3, [r3, r2]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d101      	bne.n	8001732 <HAL_TIM_PWM_ConfigChannel+0x22>
 800172e:	2302      	movs	r3, #2
 8001730:	e0e5      	b.n	80018fe <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	223c      	movs	r2, #60	; 0x3c
 8001736:	2101      	movs	r1, #1
 8001738:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b14      	cmp	r3, #20
 800173e:	d900      	bls.n	8001742 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001740:	e0d1      	b.n	80018e6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	009a      	lsls	r2, r3, #2
 8001746:	4b70      	ldr	r3, [pc, #448]	; (8001908 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001748:	18d3      	adds	r3, r2, r3
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	0011      	movs	r1, r2
 8001756:	0018      	movs	r0, r3
 8001758:	f000 fa1c 	bl	8001b94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699a      	ldr	r2, [r3, #24]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2108      	movs	r1, #8
 8001768:	430a      	orrs	r2, r1
 800176a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699a      	ldr	r2, [r3, #24]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2104      	movs	r1, #4
 8001778:	438a      	bics	r2, r1
 800177a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6999      	ldr	r1, [r3, #24]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	619a      	str	r2, [r3, #24]
      break;
 800178e:	e0af      	b.n	80018f0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	0011      	movs	r1, r2
 8001798:	0018      	movs	r0, r3
 800179a:	f000 fa7b 	bl	8001c94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	699a      	ldr	r2, [r3, #24]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	0109      	lsls	r1, r1, #4
 80017ac:	430a      	orrs	r2, r1
 80017ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	699a      	ldr	r2, [r3, #24]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4954      	ldr	r1, [pc, #336]	; (800190c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80017bc:	400a      	ands	r2, r1
 80017be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6999      	ldr	r1, [r3, #24]
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	021a      	lsls	r2, r3, #8
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	619a      	str	r2, [r3, #24]
      break;
 80017d4:	e08c      	b.n	80018f0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	0011      	movs	r1, r2
 80017de:	0018      	movs	r0, r3
 80017e0:	f000 fad6 	bl	8001d90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	69da      	ldr	r2, [r3, #28]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2108      	movs	r1, #8
 80017f0:	430a      	orrs	r2, r1
 80017f2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	69da      	ldr	r2, [r3, #28]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2104      	movs	r1, #4
 8001800:	438a      	bics	r2, r1
 8001802:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	69d9      	ldr	r1, [r3, #28]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	61da      	str	r2, [r3, #28]
      break;
 8001816:	e06b      	b.n	80018f0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	0011      	movs	r1, r2
 8001820:	0018      	movs	r0, r3
 8001822:	f000 fb37 	bl	8001e94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	69da      	ldr	r2, [r3, #28]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	0109      	lsls	r1, r1, #4
 8001834:	430a      	orrs	r2, r1
 8001836:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	69da      	ldr	r2, [r3, #28]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4932      	ldr	r1, [pc, #200]	; (800190c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001844:	400a      	ands	r2, r1
 8001846:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	69d9      	ldr	r1, [r3, #28]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	021a      	lsls	r2, r3, #8
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	61da      	str	r2, [r3, #28]
      break;
 800185c:	e048      	b.n	80018f0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	0011      	movs	r1, r2
 8001866:	0018      	movs	r0, r3
 8001868:	f000 fb78 	bl	8001f5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2108      	movs	r1, #8
 8001878:	430a      	orrs	r2, r1
 800187a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2104      	movs	r1, #4
 8001888:	438a      	bics	r2, r1
 800188a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	691a      	ldr	r2, [r3, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800189e:	e027      	b.n	80018f0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	0011      	movs	r1, r2
 80018a8:	0018      	movs	r0, r3
 80018aa:	f000 fbb1 	bl	8002010 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	0109      	lsls	r1, r1, #4
 80018bc:	430a      	orrs	r2, r1
 80018be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4910      	ldr	r1, [pc, #64]	; (800190c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80018cc:	400a      	ands	r2, r1
 80018ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	021a      	lsls	r2, r3, #8
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80018e4:	e004      	b.n	80018f0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80018e6:	2317      	movs	r3, #23
 80018e8:	18fb      	adds	r3, r7, r3
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
      break;
 80018ee:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	223c      	movs	r2, #60	; 0x3c
 80018f4:	2100      	movs	r1, #0
 80018f6:	5499      	strb	r1, [r3, r2]

  return status;
 80018f8:	2317      	movs	r3, #23
 80018fa:	18fb      	adds	r3, r7, r3
 80018fc:	781b      	ldrb	r3, [r3, #0]
}
 80018fe:	0018      	movs	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	b006      	add	sp, #24
 8001904:	bd80      	pop	{r7, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	0800250c 	.word	0x0800250c
 800190c:	fffffbff 	.word	0xfffffbff

08001910 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800191a:	230f      	movs	r3, #15
 800191c:	18fb      	adds	r3, r7, r3
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	223c      	movs	r2, #60	; 0x3c
 8001926:	5c9b      	ldrb	r3, [r3, r2]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_TIM_ConfigClockSource+0x20>
 800192c:	2302      	movs	r3, #2
 800192e:	e0bc      	b.n	8001aaa <HAL_TIM_ConfigClockSource+0x19a>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	223c      	movs	r2, #60	; 0x3c
 8001934:	2101      	movs	r1, #1
 8001936:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	223d      	movs	r2, #61	; 0x3d
 800193c:	2102      	movs	r1, #2
 800193e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	4a5a      	ldr	r2, [pc, #360]	; (8001ab4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800194c:	4013      	ands	r3, r2
 800194e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4a59      	ldr	r2, [pc, #356]	; (8001ab8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8001954:	4013      	ands	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2280      	movs	r2, #128	; 0x80
 8001966:	0192      	lsls	r2, r2, #6
 8001968:	4293      	cmp	r3, r2
 800196a:	d040      	beq.n	80019ee <HAL_TIM_ConfigClockSource+0xde>
 800196c:	2280      	movs	r2, #128	; 0x80
 800196e:	0192      	lsls	r2, r2, #6
 8001970:	4293      	cmp	r3, r2
 8001972:	d900      	bls.n	8001976 <HAL_TIM_ConfigClockSource+0x66>
 8001974:	e088      	b.n	8001a88 <HAL_TIM_ConfigClockSource+0x178>
 8001976:	2280      	movs	r2, #128	; 0x80
 8001978:	0152      	lsls	r2, r2, #5
 800197a:	4293      	cmp	r3, r2
 800197c:	d100      	bne.n	8001980 <HAL_TIM_ConfigClockSource+0x70>
 800197e:	e088      	b.n	8001a92 <HAL_TIM_ConfigClockSource+0x182>
 8001980:	2280      	movs	r2, #128	; 0x80
 8001982:	0152      	lsls	r2, r2, #5
 8001984:	4293      	cmp	r3, r2
 8001986:	d900      	bls.n	800198a <HAL_TIM_ConfigClockSource+0x7a>
 8001988:	e07e      	b.n	8001a88 <HAL_TIM_ConfigClockSource+0x178>
 800198a:	2b70      	cmp	r3, #112	; 0x70
 800198c:	d018      	beq.n	80019c0 <HAL_TIM_ConfigClockSource+0xb0>
 800198e:	d900      	bls.n	8001992 <HAL_TIM_ConfigClockSource+0x82>
 8001990:	e07a      	b.n	8001a88 <HAL_TIM_ConfigClockSource+0x178>
 8001992:	2b60      	cmp	r3, #96	; 0x60
 8001994:	d04f      	beq.n	8001a36 <HAL_TIM_ConfigClockSource+0x126>
 8001996:	d900      	bls.n	800199a <HAL_TIM_ConfigClockSource+0x8a>
 8001998:	e076      	b.n	8001a88 <HAL_TIM_ConfigClockSource+0x178>
 800199a:	2b50      	cmp	r3, #80	; 0x50
 800199c:	d03b      	beq.n	8001a16 <HAL_TIM_ConfigClockSource+0x106>
 800199e:	d900      	bls.n	80019a2 <HAL_TIM_ConfigClockSource+0x92>
 80019a0:	e072      	b.n	8001a88 <HAL_TIM_ConfigClockSource+0x178>
 80019a2:	2b40      	cmp	r3, #64	; 0x40
 80019a4:	d057      	beq.n	8001a56 <HAL_TIM_ConfigClockSource+0x146>
 80019a6:	d900      	bls.n	80019aa <HAL_TIM_ConfigClockSource+0x9a>
 80019a8:	e06e      	b.n	8001a88 <HAL_TIM_ConfigClockSource+0x178>
 80019aa:	2b30      	cmp	r3, #48	; 0x30
 80019ac:	d063      	beq.n	8001a76 <HAL_TIM_ConfigClockSource+0x166>
 80019ae:	d86b      	bhi.n	8001a88 <HAL_TIM_ConfigClockSource+0x178>
 80019b0:	2b20      	cmp	r3, #32
 80019b2:	d060      	beq.n	8001a76 <HAL_TIM_ConfigClockSource+0x166>
 80019b4:	d868      	bhi.n	8001a88 <HAL_TIM_ConfigClockSource+0x178>
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d05d      	beq.n	8001a76 <HAL_TIM_ConfigClockSource+0x166>
 80019ba:	2b10      	cmp	r3, #16
 80019bc:	d05b      	beq.n	8001a76 <HAL_TIM_ConfigClockSource+0x166>
 80019be:	e063      	b.n	8001a88 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	6899      	ldr	r1, [r3, #8]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f000 fbf8 	bl	80021c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2277      	movs	r2, #119	; 0x77
 80019e0:	4313      	orrs	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	609a      	str	r2, [r3, #8]
      break;
 80019ec:	e052      	b.n	8001a94 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6899      	ldr	r1, [r3, #8]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f000 fbe1 	bl	80021c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2180      	movs	r1, #128	; 0x80
 8001a0e:	01c9      	lsls	r1, r1, #7
 8001a10:	430a      	orrs	r2, r1
 8001a12:	609a      	str	r2, [r3, #8]
      break;
 8001a14:	e03e      	b.n	8001a94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	6859      	ldr	r1, [r3, #4]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	001a      	movs	r2, r3
 8001a24:	f000 fb52 	bl	80020cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2150      	movs	r1, #80	; 0x50
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f000 fbac 	bl	800218c <TIM_ITRx_SetConfig>
      break;
 8001a34:	e02e      	b.n	8001a94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	6859      	ldr	r1, [r3, #4]
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	001a      	movs	r2, r3
 8001a44:	f000 fb70 	bl	8002128 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2160      	movs	r1, #96	; 0x60
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f000 fb9c 	bl	800218c <TIM_ITRx_SetConfig>
      break;
 8001a54:	e01e      	b.n	8001a94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6859      	ldr	r1, [r3, #4]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	001a      	movs	r2, r3
 8001a64:	f000 fb32 	bl	80020cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2140      	movs	r1, #64	; 0x40
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 fb8c 	bl	800218c <TIM_ITRx_SetConfig>
      break;
 8001a74:	e00e      	b.n	8001a94 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	0019      	movs	r1, r3
 8001a80:	0010      	movs	r0, r2
 8001a82:	f000 fb83 	bl	800218c <TIM_ITRx_SetConfig>
      break;
 8001a86:	e005      	b.n	8001a94 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001a88:	230f      	movs	r3, #15
 8001a8a:	18fb      	adds	r3, r7, r3
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
      break;
 8001a90:	e000      	b.n	8001a94 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001a92:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	223d      	movs	r2, #61	; 0x3d
 8001a98:	2101      	movs	r1, #1
 8001a9a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	223c      	movs	r2, #60	; 0x3c
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	5499      	strb	r1, [r3, r2]

  return status;
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	781b      	ldrb	r3, [r3, #0]
}
 8001aaa:	0018      	movs	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b004      	add	sp, #16
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	ffceff88 	.word	0xffceff88
 8001ab8:	ffff00ff 	.word	0xffff00ff

08001abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a2b      	ldr	r2, [pc, #172]	; (8001b7c <TIM_Base_SetConfig+0xc0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d003      	beq.n	8001adc <TIM_Base_SetConfig+0x20>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a2a      	ldr	r2, [pc, #168]	; (8001b80 <TIM_Base_SetConfig+0xc4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d108      	bne.n	8001aee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2270      	movs	r2, #112	; 0x70
 8001ae0:	4393      	bics	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a22      	ldr	r2, [pc, #136]	; (8001b7c <TIM_Base_SetConfig+0xc0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00f      	beq.n	8001b16 <TIM_Base_SetConfig+0x5a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a21      	ldr	r2, [pc, #132]	; (8001b80 <TIM_Base_SetConfig+0xc4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00b      	beq.n	8001b16 <TIM_Base_SetConfig+0x5a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a20      	ldr	r2, [pc, #128]	; (8001b84 <TIM_Base_SetConfig+0xc8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d007      	beq.n	8001b16 <TIM_Base_SetConfig+0x5a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <TIM_Base_SetConfig+0xcc>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d003      	beq.n	8001b16 <TIM_Base_SetConfig+0x5a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a1e      	ldr	r2, [pc, #120]	; (8001b8c <TIM_Base_SetConfig+0xd0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d108      	bne.n	8001b28 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4a1d      	ldr	r2, [pc, #116]	; (8001b90 <TIM_Base_SetConfig+0xd4>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2280      	movs	r2, #128	; 0x80
 8001b2c:	4393      	bics	r3, r2
 8001b2e:	001a      	movs	r2, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <TIM_Base_SetConfig+0xc0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d007      	beq.n	8001b66 <TIM_Base_SetConfig+0xaa>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <TIM_Base_SetConfig+0xcc>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d003      	beq.n	8001b66 <TIM_Base_SetConfig+0xaa>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <TIM_Base_SetConfig+0xd0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d103      	bne.n	8001b6e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	691a      	ldr	r2, [r3, #16]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	615a      	str	r2, [r3, #20]
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b004      	add	sp, #16
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40012c00 	.word	0x40012c00
 8001b80:	40000400 	.word	0x40000400
 8001b84:	40002000 	.word	0x40002000
 8001b88:	40014400 	.word	0x40014400
 8001b8c:	40014800 	.word	0x40014800
 8001b90:	fffffcff 	.word	0xfffffcff

08001b94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4393      	bics	r3, r2
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4a2e      	ldr	r2, [pc, #184]	; (8001c7c <TIM_OC1_SetConfig+0xe8>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2203      	movs	r2, #3
 8001bca:	4393      	bics	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	4393      	bics	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <TIM_OC1_SetConfig+0xec>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d007      	beq.n	8001c02 <TIM_OC1_SetConfig+0x6e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a23      	ldr	r2, [pc, #140]	; (8001c84 <TIM_OC1_SetConfig+0xf0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d003      	beq.n	8001c02 <TIM_OC1_SetConfig+0x6e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a22      	ldr	r2, [pc, #136]	; (8001c88 <TIM_OC1_SetConfig+0xf4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d10c      	bne.n	8001c1c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2208      	movs	r2, #8
 8001c06:	4393      	bics	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2204      	movs	r2, #4
 8001c18:	4393      	bics	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <TIM_OC1_SetConfig+0xec>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d007      	beq.n	8001c34 <TIM_OC1_SetConfig+0xa0>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a17      	ldr	r2, [pc, #92]	; (8001c84 <TIM_OC1_SetConfig+0xf0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d003      	beq.n	8001c34 <TIM_OC1_SetConfig+0xa0>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a16      	ldr	r2, [pc, #88]	; (8001c88 <TIM_OC1_SetConfig+0xf4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d111      	bne.n	8001c58 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <TIM_OC1_SetConfig+0xf8>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <TIM_OC1_SetConfig+0xfc>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	621a      	str	r2, [r3, #32]
}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b006      	add	sp, #24
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	fffeff8f 	.word	0xfffeff8f
 8001c80:	40012c00 	.word	0x40012c00
 8001c84:	40014400 	.word	0x40014400
 8001c88:	40014800 	.word	0x40014800
 8001c8c:	fffffeff 	.word	0xfffffeff
 8001c90:	fffffdff 	.word	0xfffffdff

08001c94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	2210      	movs	r2, #16
 8001ca4:	4393      	bics	r3, r2
 8001ca6:	001a      	movs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4a2c      	ldr	r2, [pc, #176]	; (8001d74 <TIM_OC2_SetConfig+0xe0>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4a2b      	ldr	r2, [pc, #172]	; (8001d78 <TIM_OC2_SetConfig+0xe4>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	4393      	bics	r3, r2
 8001ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a22      	ldr	r2, [pc, #136]	; (8001d7c <TIM_OC2_SetConfig+0xe8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d10d      	bne.n	8001d12 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2280      	movs	r2, #128	; 0x80
 8001cfa:	4393      	bics	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2240      	movs	r2, #64	; 0x40
 8001d0e:	4393      	bics	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <TIM_OC2_SetConfig+0xe8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d007      	beq.n	8001d2a <TIM_OC2_SetConfig+0x96>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a18      	ldr	r2, [pc, #96]	; (8001d80 <TIM_OC2_SetConfig+0xec>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d003      	beq.n	8001d2a <TIM_OC2_SetConfig+0x96>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a17      	ldr	r2, [pc, #92]	; (8001d84 <TIM_OC2_SetConfig+0xf0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d113      	bne.n	8001d52 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4a16      	ldr	r2, [pc, #88]	; (8001d88 <TIM_OC2_SetConfig+0xf4>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4a15      	ldr	r2, [pc, #84]	; (8001d8c <TIM_OC2_SetConfig+0xf8>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	621a      	str	r2, [r3, #32]
}
 8001d6c:	46c0      	nop			; (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b006      	add	sp, #24
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	feff8fff 	.word	0xfeff8fff
 8001d78:	fffffcff 	.word	0xfffffcff
 8001d7c:	40012c00 	.word	0x40012c00
 8001d80:	40014400 	.word	0x40014400
 8001d84:	40014800 	.word	0x40014800
 8001d88:	fffffbff 	.word	0xfffffbff
 8001d8c:	fffff7ff 	.word	0xfffff7ff

08001d90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4a33      	ldr	r2, [pc, #204]	; (8001e6c <TIM_OC3_SetConfig+0xdc>)
 8001da0:	401a      	ands	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4a2d      	ldr	r2, [pc, #180]	; (8001e70 <TIM_OC3_SetConfig+0xe0>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	4393      	bics	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	4a27      	ldr	r2, [pc, #156]	; (8001e74 <TIM_OC3_SetConfig+0xe4>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a23      	ldr	r2, [pc, #140]	; (8001e78 <TIM_OC3_SetConfig+0xe8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d10d      	bne.n	8001e0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	4a22      	ldr	r2, [pc, #136]	; (8001e7c <TIM_OC3_SetConfig+0xec>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	021b      	lsls	r3, r3, #8
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	4a1e      	ldr	r2, [pc, #120]	; (8001e80 <TIM_OC3_SetConfig+0xf0>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a1a      	ldr	r2, [pc, #104]	; (8001e78 <TIM_OC3_SetConfig+0xe8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <TIM_OC3_SetConfig+0x92>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a1b      	ldr	r2, [pc, #108]	; (8001e84 <TIM_OC3_SetConfig+0xf4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d003      	beq.n	8001e22 <TIM_OC3_SetConfig+0x92>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a1a      	ldr	r2, [pc, #104]	; (8001e88 <TIM_OC3_SetConfig+0xf8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d113      	bne.n	8001e4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <TIM_OC3_SetConfig+0xfc>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4a18      	ldr	r2, [pc, #96]	; (8001e90 <TIM_OC3_SetConfig+0x100>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	621a      	str	r2, [r3, #32]
}
 8001e64:	46c0      	nop			; (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b006      	add	sp, #24
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	fffffeff 	.word	0xfffffeff
 8001e70:	fffeff8f 	.word	0xfffeff8f
 8001e74:	fffffdff 	.word	0xfffffdff
 8001e78:	40012c00 	.word	0x40012c00
 8001e7c:	fffff7ff 	.word	0xfffff7ff
 8001e80:	fffffbff 	.word	0xfffffbff
 8001e84:	40014400 	.word	0x40014400
 8001e88:	40014800 	.word	0x40014800
 8001e8c:	ffffefff 	.word	0xffffefff
 8001e90:	ffffdfff 	.word	0xffffdfff

08001e94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4a26      	ldr	r2, [pc, #152]	; (8001f3c <TIM_OC4_SetConfig+0xa8>)
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4a20      	ldr	r2, [pc, #128]	; (8001f40 <TIM_OC4_SetConfig+0xac>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a1f      	ldr	r2, [pc, #124]	; (8001f44 <TIM_OC4_SetConfig+0xb0>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <TIM_OC4_SetConfig+0xb4>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	031b      	lsls	r3, r3, #12
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <TIM_OC4_SetConfig+0xb8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d007      	beq.n	8001f04 <TIM_OC4_SetConfig+0x70>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a16      	ldr	r2, [pc, #88]	; (8001f50 <TIM_OC4_SetConfig+0xbc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d003      	beq.n	8001f04 <TIM_OC4_SetConfig+0x70>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a15      	ldr	r2, [pc, #84]	; (8001f54 <TIM_OC4_SetConfig+0xc0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d109      	bne.n	8001f18 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <TIM_OC4_SetConfig+0xc4>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	019b      	lsls	r3, r3, #6
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	621a      	str	r2, [r3, #32]
}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b006      	add	sp, #24
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	ffffefff 	.word	0xffffefff
 8001f40:	feff8fff 	.word	0xfeff8fff
 8001f44:	fffffcff 	.word	0xfffffcff
 8001f48:	ffffdfff 	.word	0xffffdfff
 8001f4c:	40012c00 	.word	0x40012c00
 8001f50:	40014400 	.word	0x40014400
 8001f54:	40014800 	.word	0x40014800
 8001f58:	ffffbfff 	.word	0xffffbfff

08001f5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a23      	ldr	r2, [pc, #140]	; (8001ff8 <TIM_OC5_SetConfig+0x9c>)
 8001f6c:	401a      	ands	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <TIM_OC5_SetConfig+0xa0>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4a19      	ldr	r2, [pc, #100]	; (8002000 <TIM_OC5_SetConfig+0xa4>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	041b      	lsls	r3, r3, #16
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a15      	ldr	r2, [pc, #84]	; (8002004 <TIM_OC5_SetConfig+0xa8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d007      	beq.n	8001fc2 <TIM_OC5_SetConfig+0x66>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a14      	ldr	r2, [pc, #80]	; (8002008 <TIM_OC5_SetConfig+0xac>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d003      	beq.n	8001fc2 <TIM_OC5_SetConfig+0x66>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a13      	ldr	r2, [pc, #76]	; (800200c <TIM_OC5_SetConfig+0xb0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d109      	bne.n	8001fd6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	4a0c      	ldr	r2, [pc, #48]	; (8001ff8 <TIM_OC5_SetConfig+0x9c>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	621a      	str	r2, [r3, #32]
}
 8001ff0:	46c0      	nop			; (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b006      	add	sp, #24
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	fffeffff 	.word	0xfffeffff
 8001ffc:	fffeff8f 	.word	0xfffeff8f
 8002000:	fffdffff 	.word	0xfffdffff
 8002004:	40012c00 	.word	0x40012c00
 8002008:	40014400 	.word	0x40014400
 800200c:	40014800 	.word	0x40014800

08002010 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4a24      	ldr	r2, [pc, #144]	; (80020b0 <TIM_OC6_SetConfig+0xa0>)
 8002020:	401a      	ands	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <TIM_OC6_SetConfig+0xa4>)
 800203c:	4013      	ands	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4a1a      	ldr	r2, [pc, #104]	; (80020b8 <TIM_OC6_SetConfig+0xa8>)
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	051b      	lsls	r3, r3, #20
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a16      	ldr	r2, [pc, #88]	; (80020bc <TIM_OC6_SetConfig+0xac>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d007      	beq.n	8002078 <TIM_OC6_SetConfig+0x68>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a15      	ldr	r2, [pc, #84]	; (80020c0 <TIM_OC6_SetConfig+0xb0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d003      	beq.n	8002078 <TIM_OC6_SetConfig+0x68>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <TIM_OC6_SetConfig+0xb4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d109      	bne.n	800208c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	4a13      	ldr	r2, [pc, #76]	; (80020c8 <TIM_OC6_SetConfig+0xb8>)
 800207c:	4013      	ands	r3, r2
 800207e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	029b      	lsls	r3, r3, #10
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4313      	orrs	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	621a      	str	r2, [r3, #32]
}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b006      	add	sp, #24
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	ffefffff 	.word	0xffefffff
 80020b4:	feff8fff 	.word	0xfeff8fff
 80020b8:	ffdfffff 	.word	0xffdfffff
 80020bc:	40012c00 	.word	0x40012c00
 80020c0:	40014400 	.word	0x40014400
 80020c4:	40014800 	.word	0x40014800
 80020c8:	fffbffff 	.word	0xfffbffff

080020cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	2201      	movs	r2, #1
 80020e4:	4393      	bics	r3, r2
 80020e6:	001a      	movs	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	22f0      	movs	r2, #240	; 0xf0
 80020f6:	4393      	bics	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	220a      	movs	r2, #10
 8002108:	4393      	bics	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	4313      	orrs	r3, r2
 8002112:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	621a      	str	r2, [r3, #32]
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b006      	add	sp, #24
 8002126:	bd80      	pop	{r7, pc}

08002128 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	2210      	movs	r2, #16
 800213a:	4393      	bics	r3, r2
 800213c:	001a      	movs	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	4a0d      	ldr	r2, [pc, #52]	; (8002188 <TIM_TI2_ConfigInputStage+0x60>)
 8002152:	4013      	ands	r3, r2
 8002154:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	031b      	lsls	r3, r3, #12
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4313      	orrs	r3, r2
 800215e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	22a0      	movs	r2, #160	; 0xa0
 8002164:	4393      	bics	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	621a      	str	r2, [r3, #32]
}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	46bd      	mov	sp, r7
 8002182:	b006      	add	sp, #24
 8002184:	bd80      	pop	{r7, pc}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	ffff0fff 	.word	0xffff0fff

0800218c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a08      	ldr	r2, [pc, #32]	; (80021c0 <TIM_ITRx_SetConfig+0x34>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	2207      	movs	r2, #7
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	609a      	str	r2, [r3, #8]
}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b004      	add	sp, #16
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	ffcfff8f 	.word	0xffcfff8f

080021c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <TIM_ETR_SetConfig+0x3c>)
 80021dc:	4013      	ands	r3, r2
 80021de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	021a      	lsls	r2, r3, #8
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	609a      	str	r2, [r3, #8]
}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b006      	add	sp, #24
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	ffff00ff 	.word	0xffff00ff

08002204 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	221f      	movs	r2, #31
 8002214:	4013      	ands	r3, r2
 8002216:	2201      	movs	r2, #1
 8002218:	409a      	lsls	r2, r3
 800221a:	0013      	movs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	43d2      	mvns	r2, r2
 8002226:	401a      	ands	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a1a      	ldr	r2, [r3, #32]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	211f      	movs	r1, #31
 8002234:	400b      	ands	r3, r1
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4099      	lsls	r1, r3
 800223a:	000b      	movs	r3, r1
 800223c:	431a      	orrs	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	621a      	str	r2, [r3, #32]
}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	46bd      	mov	sp, r7
 8002246:	b006      	add	sp, #24
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	223c      	movs	r2, #60	; 0x3c
 800225a:	5c9b      	ldrb	r3, [r3, r2]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002260:	2302      	movs	r3, #2
 8002262:	e04a      	b.n	80022fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	223c      	movs	r2, #60	; 0x3c
 8002268:	2101      	movs	r1, #1
 800226a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	223d      	movs	r2, #61	; 0x3d
 8002270:	2102      	movs	r1, #2
 8002272:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a1e      	ldr	r2, [pc, #120]	; (8002304 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d108      	bne.n	80022a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4a1d      	ldr	r2, [pc, #116]	; (8002308 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002292:	4013      	ands	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2270      	movs	r2, #112	; 0x70
 80022a4:	4393      	bics	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a11      	ldr	r2, [pc, #68]	; (8002304 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d004      	beq.n	80022ce <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a10      	ldr	r2, [pc, #64]	; (800230c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d10c      	bne.n	80022e8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2280      	movs	r2, #128	; 0x80
 80022d2:	4393      	bics	r3, r2
 80022d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	223d      	movs	r2, #61	; 0x3d
 80022ec:	2101      	movs	r1, #1
 80022ee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	223c      	movs	r2, #60	; 0x3c
 80022f4:	2100      	movs	r1, #0
 80022f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	0018      	movs	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b004      	add	sp, #16
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	40012c00 	.word	0x40012c00
 8002308:	ff0fffff 	.word	0xff0fffff
 800230c:	40000400 	.word	0x40000400

08002310 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	223c      	movs	r2, #60	; 0x3c
 8002322:	5c9b      	ldrb	r3, [r3, r2]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002328:	2302      	movs	r3, #2
 800232a:	e079      	b.n	8002420 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	223c      	movs	r2, #60	; 0x3c
 8002330:	2101      	movs	r1, #1
 8002332:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	22ff      	movs	r2, #255	; 0xff
 8002338:	4393      	bics	r3, r2
 800233a:	001a      	movs	r2, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4a38      	ldr	r2, [pc, #224]	; (8002428 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8002348:	401a      	ands	r2, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4a35      	ldr	r2, [pc, #212]	; (800242c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002356:	401a      	ands	r2, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	4313      	orrs	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4a33      	ldr	r2, [pc, #204]	; (8002430 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8002364:	401a      	ands	r2, r3
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4a30      	ldr	r2, [pc, #192]	; (8002434 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8002372:	401a      	ands	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4a2e      	ldr	r2, [pc, #184]	; (8002438 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8002380:	401a      	ands	r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4a2b      	ldr	r2, [pc, #172]	; (800243c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800238e:	401a      	ands	r2, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	4313      	orrs	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4a29      	ldr	r2, [pc, #164]	; (8002440 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800239c:	401a      	ands	r2, r3
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	041b      	lsls	r3, r3, #16
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a25      	ldr	r2, [pc, #148]	; (8002444 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d106      	bne.n	80023c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4a24      	ldr	r2, [pc, #144]	; (8002448 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80023b6:	401a      	ands	r2, r3
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	4313      	orrs	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1f      	ldr	r2, [pc, #124]	; (8002444 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d121      	bne.n	800240e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4a1f      	ldr	r2, [pc, #124]	; (800244c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80023ce:	401a      	ands	r2, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	051b      	lsls	r3, r3, #20
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4a1c      	ldr	r2, [pc, #112]	; (8002450 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80023de:	401a      	ands	r2, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4a1a      	ldr	r2, [pc, #104]	; (8002454 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80023ec:	401a      	ands	r2, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a12      	ldr	r2, [pc, #72]	; (8002444 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d106      	bne.n	800240e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4a15      	ldr	r2, [pc, #84]	; (8002458 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8002404:	401a      	ands	r2, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	223c      	movs	r2, #60	; 0x3c
 800241a:	2100      	movs	r1, #0
 800241c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	0018      	movs	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	b004      	add	sp, #16
 8002426:	bd80      	pop	{r7, pc}
 8002428:	fffffcff 	.word	0xfffffcff
 800242c:	fffffbff 	.word	0xfffffbff
 8002430:	fffff7ff 	.word	0xfffff7ff
 8002434:	ffffefff 	.word	0xffffefff
 8002438:	ffffdfff 	.word	0xffffdfff
 800243c:	ffffbfff 	.word	0xffffbfff
 8002440:	fff0ffff 	.word	0xfff0ffff
 8002444:	40012c00 	.word	0x40012c00
 8002448:	efffffff 	.word	0xefffffff
 800244c:	ff0fffff 	.word	0xff0fffff
 8002450:	feffffff 	.word	0xfeffffff
 8002454:	fdffffff 	.word	0xfdffffff
 8002458:	dfffffff 	.word	0xdfffffff

0800245c <__libc_init_array>:
 800245c:	b570      	push	{r4, r5, r6, lr}
 800245e:	2600      	movs	r6, #0
 8002460:	4d0c      	ldr	r5, [pc, #48]	; (8002494 <__libc_init_array+0x38>)
 8002462:	4c0d      	ldr	r4, [pc, #52]	; (8002498 <__libc_init_array+0x3c>)
 8002464:	1b64      	subs	r4, r4, r5
 8002466:	10a4      	asrs	r4, r4, #2
 8002468:	42a6      	cmp	r6, r4
 800246a:	d109      	bne.n	8002480 <__libc_init_array+0x24>
 800246c:	2600      	movs	r6, #0
 800246e:	f000 f821 	bl	80024b4 <_init>
 8002472:	4d0a      	ldr	r5, [pc, #40]	; (800249c <__libc_init_array+0x40>)
 8002474:	4c0a      	ldr	r4, [pc, #40]	; (80024a0 <__libc_init_array+0x44>)
 8002476:	1b64      	subs	r4, r4, r5
 8002478:	10a4      	asrs	r4, r4, #2
 800247a:	42a6      	cmp	r6, r4
 800247c:	d105      	bne.n	800248a <__libc_init_array+0x2e>
 800247e:	bd70      	pop	{r4, r5, r6, pc}
 8002480:	00b3      	lsls	r3, r6, #2
 8002482:	58eb      	ldr	r3, [r5, r3]
 8002484:	4798      	blx	r3
 8002486:	3601      	adds	r6, #1
 8002488:	e7ee      	b.n	8002468 <__libc_init_array+0xc>
 800248a:	00b3      	lsls	r3, r6, #2
 800248c:	58eb      	ldr	r3, [r5, r3]
 800248e:	4798      	blx	r3
 8002490:	3601      	adds	r6, #1
 8002492:	e7f2      	b.n	800247a <__libc_init_array+0x1e>
 8002494:	08002560 	.word	0x08002560
 8002498:	08002560 	.word	0x08002560
 800249c:	08002560 	.word	0x08002560
 80024a0:	08002564 	.word	0x08002564

080024a4 <memset>:
 80024a4:	0003      	movs	r3, r0
 80024a6:	1882      	adds	r2, r0, r2
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d100      	bne.n	80024ae <memset+0xa>
 80024ac:	4770      	bx	lr
 80024ae:	7019      	strb	r1, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	e7f9      	b.n	80024a8 <memset+0x4>

080024b4 <_init>:
 80024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ba:	bc08      	pop	{r3}
 80024bc:	469e      	mov	lr, r3
 80024be:	4770      	bx	lr

080024c0 <_fini>:
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c6:	bc08      	pop	{r3}
 80024c8:	469e      	mov	lr, r3
 80024ca:	4770      	bx	lr
